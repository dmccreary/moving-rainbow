{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Moving Rainbow Website!","text":""},{"location":"#about-the-moving-rainbow-project","title":"About the Moving Rainbow Project","text":"<p>Moving Rainbow is a way to learn the basics of programming using fun LED strips. We use low-cost components so you can build entire projects and costumes with 100s of LEDs for under $10. Since 2014 we have been building low-cost kits that teach all the concepts of Computational Thinking.</p> <p>Note</p> <p>We are no longer accepting pull requests for Arduino C code.  Because we can get Raspberry Pi Pico processors for $4 that run Python we have moved all our Moving Rainbow code over to Python.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Our getting started guide has three parts:</p> <ol> <li>About Moving Rainbow</li> <li>Sample Hardware Kits</li> <li>Build Your Own from Parts</li> <li>Desktop Setup</li> </ol>"},{"location":"#raspberry-pi-pico","title":"Raspberry Pi Pico","text":"<p>The Raspberry Pi Pico cost only $4 and runs Python.  All our labs use this processor.</p>"},{"location":"#breadboards","title":"Breadboards","text":"<p>In our projects we use 1/2 sized breadboard with 400 tie points.</p> <p></p>"},{"location":"#mode-buttons","title":"Mode Buttons","text":"<p>A \"mode\" is a way of having a single Arduino program run multiple patterns on the LED strip. Each mode has a number associated with it starting with 0 and continuing to the number of patterns we have in our program.</p> <p>In this section we will add two mode buttons.  One button will make the pattern mode go to the next mode.  The other button will go to the previous mode.</p>"},{"location":"#other-resources","title":"Other Resources","text":"<p>See our Teachers Guide for anyone teaching students about computational thinking.</p> <p>See our incredible Glossary for over 200 terms and examples of how we use these terms in this course.</p>"},{"location":"challenges-v2/","title":"Challenges for Python LED Exercises","text":""},{"location":"challenges-v2/#1-blinkpy","title":"1. Blink.py","text":""},{"location":"challenges-v2/#a-original-intent","title":"a. Original intent:","text":"<ul> <li>Understand the \u201cstrip[0]\u201d position</li> <li>Understand RGB numbering</li> <li>Understand \u201csleep(1)\u201d (1 = seconds)</li> <li>Introduce \u201cwhile True:\u201d looping concept</li> </ul>"},{"location":"challenges-v2/#b-challenge","title":"b. Challenge:","text":"<ul> <li>Select a different position</li> <li>Select a different color</li> <li>Select a different delay</li> </ul>"},{"location":"challenges-v2/#2-red-green-bluepy","title":"2. Red-green-blue.py","text":""},{"location":"challenges-v2/#a-original-intent_1","title":"a. Original intent:","text":"<ul> <li>Reinforce above concepts</li> </ul>"},{"location":"challenges-v2/#b-challenge_1","title":"b. Challenge:","text":"<ul> <li>Change brightness</li> <li>Make lights blink (turn off) before changing colors</li> <li>Add new colors (blending RGB)</li> </ul>"},{"location":"challenges-v2/#3-dimmerpy","title":"3. Dimmer.py","text":""},{"location":"challenges-v2/#a-original-intent_2","title":"a. Original intent:","text":"<ul> <li>Reinforce above</li> <li>Introduce \u2018stepping\u2019 parameter in for loop, and thus the concept of counting backwards</li> </ul>"},{"location":"challenges-v2/#b-challenge_2","title":"b. Challenge:","text":"<ul> <li>Select a different rate at which to increase and decrease brightness (different step value) \u2013 light up only the even-numbered LEDs (or odd)</li> <li>Have different lights dim/brighten \u2013 make each of the lights in the strip brighten/dim in sequence</li> </ul>"},{"location":"challenges-v2/#4-movepy","title":"4. Move.py","text":""},{"location":"challenges-v2/#a-original-intent_3","title":"a. Original intent:","text":"<ul> <li>Reinforce above</li> <li>Introduce config.NUMBER_PIXELS &amp; using that to control the end of loop</li> <li>Note that NUMBER_PIXELS indicates the quantity of LEDs in the strip, but that the LEDs are indexed/identified starting with 0</li> </ul>"},{"location":"challenges-v2/#b-challenge_3","title":"b. Challenge:","text":"<ul> <li>Make the move backwards (well .. this is done in the next exercise)</li> <li>Illuminate every third LED on the strip</li> <li>Make the lights appear to \u201crun faster\u201d backwards than forwards</li> </ul>"},{"location":"challenges-v2/#5-up-and-downpy","title":"5. Up-and-down.py","text":""},{"location":"challenges-v2/#a-original-intent_4","title":"a. Original intent:","text":"<ul> <li>Reinforce above</li> </ul>"},{"location":"challenges-v2/#b-challenge_4","title":"b. Challenge:","text":"<ul> <li>See challenges in Move.py</li> </ul>"},{"location":"challenges-v2/#6-color-wipepy","title":"6. Color-wipe.py","text":""},{"location":"challenges-v2/#a-original-intent_5","title":"a. Original intent:","text":"<ul> <li>Reinforce above</li> </ul>"},{"location":"challenges-v2/#b-challenge_5","title":"b. Challenge:","text":"<ul> <li>Make it so that the entire strip seems to change from R to G to B at once</li> <li>Make a stop light \u2013 top 1/3 = red, mid = yellow, lower 1/3 = green</li> </ul>"},{"location":"challenges-v2/#7-randompy","title":"7. Random.py","text":""},{"location":"challenges-v2/#a-original-intent_6","title":"a. Original intent:","text":"<ul> <li>Reminder about \u201crandint\u201d function</li> <li>Reinforce RGB, looping</li> </ul>"},{"location":"challenges-v2/#b-challenge_6","title":"b. Challenge:","text":"<ul> <li>Have two LEDs lit at the same time, one randomly in the lower half of the strip and one in the upper half.</li> <li>Have two LEDs lit at the same time, each the same random distance from the center point</li> </ul>"},{"location":"challenges-v2/#8-color-wheelpy","title":"8. Color-wheel.py","text":""},{"location":"challenges-v2/#a-original-intent_7","title":"a. Original intent:","text":"<ul> <li>Reminder about creating functions</li> <li>Use of \u201creturn\u201d</li> </ul>"},{"location":"challenges-v2/#b-challenge_7","title":"b. Challenge:","text":"<ul> <li>Either make entire strip become a color wheel</li> <li>Or \u2026 make each LED in the strip become a color wheel, one by one with a slight pause between</li> </ul>"},{"location":"challenges-v2/#9-rainbowpy","title":"9. Rainbow.py","text":""},{"location":"challenges-v2/#a-original-intent_8","title":"a. Original intent:","text":"<ul> <li>Reinforce functions/return</li> </ul>"},{"location":"challenges-v2/#b-challenge_8","title":"b. Challenge:","text":"<ul> <li>Make it build rainbow backwards (so end result is VIBGYOR)</li> </ul>"},{"location":"challenges-v2/#10-rainbow-cyclepy","title":"10. Rainbow-cycle.py","text":""},{"location":"challenges-v2/#a-original-intent_9","title":"a. Original intent:","text":"<ul> <li>More of rainbow.py, but moving in continuous loop</li> </ul>"},{"location":"challenges-v2/#b-challenge_9","title":"b. Challenge:","text":"<ul> <li>Make it cycle forwards, then backwards</li> </ul>"},{"location":"challenges/","title":"Moving Rainbow Challenges","text":"<p>They are a set of learning challenges for the LED Strip.  They are listed in order from the simplest to the most complex.</p>"},{"location":"challenges/#beginning-challenges","title":"Beginning Challenges","text":"<p>These challenges can all be done once you know the following commands:</p> <ol> <li>Initialize the NeoPixel</li> <li>Change a Pixel Color</li> <li>Write the Strip</li> <li>For Loop and range</li> <li>Sleep</li> </ol>"},{"location":"challenges/#make-a-pixel-blink","title":"Make a Pixel Blink","text":""},{"location":"challenges/#draw-an-rgb-pattern","title":"Draw an RGB Pattern","text":""},{"location":"challenges/#draw-a-rainbow","title":"Draw a Rainbow","text":""},{"location":"challenges/#make-a-pixel-fade-in-and-out-slowly","title":"Make a Pixel Fade in and Out Slowly","text":""},{"location":"challenges/#make-a-heartbeat-pattern","title":"Make a Heartbeat Pattern","text":""},{"location":"challenges/#make-a-pixel-move-down-the-strip","title":"Make a Pixel Move Down the Strip","text":""},{"location":"challenges/#change-colors-for-the-entire-led-strip-wipe","title":"Change Colors for the Entire LED Strip (wipe)","text":""},{"location":"challenges/#move-a-pixel-down-and-back","title":"Move a Pixel Down and Back","text":""},{"location":"challenges/#create-a-larson-scanner-pattern","title":"Create a Larson Scanner Pattern","text":""},{"location":"challenges/#draw-different-levels-of-brightness","title":"Draw Different Levels of Brightness","text":""},{"location":"challenges/#make-every-other-pixel-a-different-color","title":"Make Every Other Pixel a Different Color","text":""},{"location":"challenges/#intermediate-labs","title":"Intermediate Labs","text":"<p>These challenges involve more advanced programming such as using:</p> <ol> <li>Conditionals</li> <li>Modulo (remainder)</li> <li>Functions</li> <li>Multiple Loops</li> <li>Nested Loops</li> <li>Lists</li> <li>Random Numbers</li> </ol>"},{"location":"challenges/#move-the-rainbow-pattern","title":"Move the Rainbow Pattern","text":""},{"location":"challenges/#move-a-comet-pattern","title":"Move a Comet Pattern","text":""},{"location":"challenges/#create-a-list-of-named-colors","title":"Create a List of Named Colors","text":""},{"location":"challenges/#create-a-theater-chase-pattern","title":"Create a Theater Chase Pattern","text":""},{"location":"challenges/#use-the-wheel-function-to-draw-a-rainbow","title":"Use The Wheel Function to Draw a Rainbow","text":""},{"location":"challenges/#do-a-color-cycle-for-the-entire-strip","title":"Do a Color Cycle for the Entire Strip","text":""},{"location":"challenges/#draw-multiple-color-comets","title":"Draw Multiple Color Comets","text":""},{"location":"challenges/#draw-different-patterns-in-a-loop","title":"Draw Different Patterns in a Loop","text":""},{"location":"challenges/#use-random-numbers-for-color-selection","title":"Use Random Numbers for Color Selection","text":""},{"location":"challenges/#random-ripples","title":"Random Ripples","text":"<p>Draw random ripple patterns on the LED strips where the pixels move out from a single point.</p>"},{"location":"challenges/#use-random-to-simulate-candle-flicker","title":"Use Random to Simulate Candle Flicker","text":""},{"location":"challenges/#use-random-to-for-changing-move-direction","title":"Use Random to For Changing Move Direction","text":""},{"location":"challenges/#advanced-labs","title":"Advanced Labs","text":"<p>These labs may require some additional components such as:</p> <ol> <li>Buttons (momentary press)</li> <li>Potentiometers</li> <li>Speaker/Buzzer</li> <li>Interrupt Service Routines</li> <li>A USB Current Meter</li> <li>A Light Sensor (photoresistor)</li> <li>An OLED display</li> <li>A Wireless Controller</li> </ol>"},{"location":"challenges/#create-separate-python-functions-for-five-patterns","title":"Create Separate Python Functions for Five Patterns","text":""},{"location":"challenges/#create-a-mode-variable-for-switching-the-patterns","title":"Create a Mode Variable for Switching the Patterns","text":""},{"location":"challenges/#use-a-button-to-change-a-pattern-mode","title":"Use a Button to Change a Pattern Mode","text":""},{"location":"challenges/#night-light","title":"Night Light","text":"<p>Add a photoresistor that will turn the LED strip on when it is dark in the room.</p>"},{"location":"challenges/#use-potentiometers-to-change-speed","title":"Use Potentiometers to Change Speed","text":"<p>Add a potentiometer and change the speed of a display pattern</p>"},{"location":"challenges/#use-potentiometers-to-change-brightness","title":"Use Potentiometers to Change Brightness","text":"<p>Add a potentiometer and change the brightness of a display pattern</p>"},{"location":"challenges/#create-a-demo-auto-cycle-pattern-a-button-to-advance-the-mode","title":"Create a Demo Auto-Cycle Pattern a Button to Advance the Mode","text":""},{"location":"challenges/#calculate-the-power-draw-of-different-colors","title":"Calculate the Power Draw of Different Colors","text":"<p>Get a USB power meter from the instructor.  Measure the current draw for each of the different colors.  Calculate the time for a 2,500-milliamp-hour battery pack for various patterns.</p>"},{"location":"challenges/#connect-an-oled-display-that-shows-the-pattern-color-and-brightness-of-the-led-strip","title":"Connect an OLED display that shows the pattern, color and brightness of the LED strip.","text":""},{"location":"challenges/#add-buttons-to-change-the-parameters-with-the-oled","title":"Add Buttons to Change the Parameters with the OLED","text":""},{"location":"challenges/#add-a-sound","title":"Add a Sound","text":"<p>Add a speaker or buzzer to play a sound when a button is pressed.</p>"},{"location":"challenges/#simon-game","title":"Simon Game","text":"<p>Display a pattern on four pixels of the LED strip and have the user repeat the pattern using four buttons.  Play different tones for each pixel.</p>"},{"location":"challenges/#zone-game","title":"Zone Game","text":"<p>Draw a zone of a different color in the center of the strip.  Move a pixel down and strip and give a player a point if they press the button in the strip.  Use sound and pixel colors to show the points score.  Make the zone smaller and the speed faster as the game progresses.</p>"},{"location":"challenges/#random-zone","title":"Random Zone","text":"<p>Add randomization to your Zone game to make the zone move in random directions.</p>"},{"location":"challenges/#clock","title":"Clock","text":"<p>Turn your LED strip into a clock.  You can display each digit using a binary structure.</p>"},{"location":"challenges/#wireless-labs","title":"Wireless Labs","text":""},{"location":"challenges/#web-page-color-control","title":"Web Page Color Control","text":"<p>Create a web page that changes the color of the LED strip.</p>"},{"location":"challenges/#create-a-web-page-to-change-the-pattern","title":"Create a Web Page to Change the Pattern","text":"<p>Create a web page that changes the pattern</p>"},{"location":"challenges/#pattern-brightness-and-speed","title":"Pattern, Brightness and Speed","text":"<p>Create a web page that changes the pattern, brightness and speed of a pattern.</p>"},{"location":"challenges/#display-the-weather-forecast","title":"Display the Weather Forecast","text":"<p>Use a web service to get the weather forecast for the current day. Change the color of the display:</p> <ol> <li>Yellow for Sunny</li> <li>Gray for Cloudy</li> <li>Red for Rain</li> <li>White for Snow</li> </ol> <p>You can use this example to get started.</p>"},{"location":"glossary/","title":"Moving Glossary of Terms","text":""},{"location":"glossary/#abstraction","title":"Abstraction","text":"<p>The practice of focusing on essential details while hiding unnecessary complexity.</p> <p>Example: Using a <code>wheel()</code> function to generate colors without needing to understand the underlying RGB math.</p>"},{"location":"glossary/#adc","title":"ADC","text":"<p>Analog-to-Digital Converter; a circuit that converts continuous voltage signals into digital numbers a microcontroller can process.</p> <p>Example: The Raspberry Pi Pico uses an ADC to read the voltage from a potentiometer and control LED brightness.</p>"},{"location":"glossary/#addressable-led","title":"Addressable LED","text":"<p>A light-emitting diode that can be individually controlled through programming, unlike traditional LEDs that turn on and off together.</p> <p>Example: Each pixel in a NeoPixel strip is an addressable LED that can display a different color.</p>"},{"location":"glossary/#algorithm","title":"Algorithm","text":"<p>A step-by-step procedure for solving a problem or completing a task.</p> <p>Example: The rainbow cycle algorithm calculates color values, assigns them to pixels, and repeats to create a moving rainbow effect.</p>"},{"location":"glossary/#animation","title":"Animation","text":"<p>A visual pattern that changes over time by updating LED colors and positions.</p> <p>Example: The comet tail animation creates the appearance of movement by fading pixels behind a bright leading pixel.</p>"},{"location":"glossary/#anode","title":"Anode","text":"<p>The positive terminal of an electronic component where electrical current enters.</p> <p>Example: Connect the longer leg of an LED (the anode) to the positive voltage supply.</p>"},{"location":"glossary/#arm-cortex-m0","title":"ARM Cortex M0+","text":"<p>A type of processor designed for low-power microcontrollers.</p> <p>Example: The Raspberry Pi Pico uses two ARM Cortex M0+ processors running at 133 MHz.</p>"},{"location":"glossary/#array","title":"Array","text":"<p>An ordered collection of values stored under a single variable name and accessed by position number.</p> <p>Example: The colors array <code>(red, orange, yellow, green, blue, indigo, violet)</code> stores seven rainbow color values.</p>"},{"location":"glossary/#assignment","title":"Assignment","text":"<p>The operation of storing a value in a variable using the equals sign.</p> <p>Example: The statement <code>counter = 0</code> assigns the value zero to the variable named counter.</p>"},{"location":"glossary/#autocomplete","title":"Autocomplete","text":"<p>A feature in programming software that suggests code as you type.</p> <p>Example: Thonny's autocomplete shows available functions when you type <code>strip.</code> after creating a NeoPixel object.</p>"},{"location":"glossary/#base","title":"Base","text":"<p>The control terminal of a transistor that allows a small current to control a larger current flow.</p> <p>Example: Connecting a GPIO pin through a resistor to the base of an NPN transistor allows the microcontroller to switch LED noodles on and off.</p>"},{"location":"glossary/#base-current","title":"Base Current","text":"<p>The small electrical current flowing into the base terminal of a transistor.</p> <p>Example: A base current of 0.5 mA can control a collector current of 50 mA in a transistor with a gain of 100.</p>"},{"location":"glossary/#battery","title":"Battery","text":"<p>A device that stores electrical energy chemically and releases it as electrical current.</p> <p>Example: A 3.7-volt LiPo battery can power a Raspberry Pi Pico and LED strip for portable projects.</p>"},{"location":"glossary/#battery-capacity","title":"Battery Capacity","text":"<p>The total amount of electrical energy a battery can store, measured in milliamp hours.</p> <p>Example: A 2000 mAh battery can theoretically supply 2000 milliamps for one hour or 200 milliamps for ten hours.</p>"},{"location":"glossary/#battery-charger","title":"Battery Charger","text":"<p>An electronic circuit that safely refills a rechargeable battery with electrical energy.</p> <p>Example: The TC4056 chip is a battery charger that can charge a LiPo battery at up to 1 amp.</p>"},{"location":"glossary/#battery-life","title":"Battery Life","text":"<p>The duration a battery can power a device before requiring recharge or replacement.</p> <p>Example: Calculate battery life by dividing battery capacity (2000 mAh) by current draw (200 mA) to get 10 hours.</p>"},{"location":"glossary/#bench-power-supply","title":"Bench Power Supply","text":"<p>An adjustable laboratory device that provides controlled voltage and current for testing circuits.</p> <p>Example: Set the bench power supply to 5 volts and 500 mA to safely test your LED strip circuit.</p>"},{"location":"glossary/#bias-current","title":"Bias Current","text":"<p>A small control current that sets the operating point of an electronic component.</p> <p>Example: The bias current flowing into a transistor base determines whether the transistor is on or off.</p>"},{"location":"glossary/#binary-data","title":"Binary Data","text":"<p>Information represented using only two symbols, typically 0 and 1.</p> <p>Example: The color value 255 is represented in binary data as 11111111.</p>"},{"location":"glossary/#binary-encoding","title":"Binary Encoding","text":"<p>The process of representing information using combinations of 0s and 1s.</p> <p>Example: Use binary encoding to display numbers on an 8x8 matrix by treating each row as an 8-bit binary number.</p>"},{"location":"glossary/#bit","title":"Bit","text":"<p>The smallest unit of digital information, having a value of either 0 or 1.</p> <p>Example: An 8-bit color value uses eight bits to represent 256 different brightness levels from 0 to 255.</p>"},{"location":"glossary/#blink","title":"Blink","text":"<p>A pattern where LEDs turn on and off repeatedly at regular intervals.</p> <p>Example: The first lesson creates a simple blink pattern by turning the first pixel red for one second, then off for one second.</p>"},{"location":"glossary/#boolean","title":"Boolean","text":"<p>A data type with only two possible values: True or False.</p> <p>Example: The boolean expression <code>counter &gt; 10</code> evaluates to True when the counter variable exceeds 10.</p>"},{"location":"glossary/#bootsel-button","title":"BOOTSEL Button","text":"<p>A button on the Raspberry Pi Pico that enters USB mass storage mode when held during power-up.</p> <p>Example: Hold the BOOTSEL button while connecting USB to program the Pico by dragging a UF2 file.</p>"},{"location":"glossary/#bootloader","title":"Bootloader","text":"<p>A small program that runs when a device powers on and loads the main operating system or firmware.</p> <p>Example: The Pico's bootloader allows you to program it by copying files when in BOOTSEL mode.</p>"},{"location":"glossary/#branch","title":"Branch","text":"<p>A separate version of code in a repository that allows changes without affecting the main version.</p> <p>Example: Create a new branch in GitHub to experiment with a new animation pattern before merging it into the main code.</p>"},{"location":"glossary/#breadboard","title":"Breadboard","text":"<p>A plastic board with interconnected holes for building temporary electronic circuits without soldering.</p> <p>Example: Insert the Pico into a breadboard to easily connect it to buttons and LED strips with jumper wires.</p>"},{"location":"glossary/#brightness","title":"Brightness","text":"<p>The intensity of light emitted by an LED, typically controlled by the magnitude of color values.</p> <p>Example: Reduce brightness by scaling all RGB values by 0.5, changing (255, 0, 0) to (128, 0, 0).</p>"},{"location":"glossary/#buck-converter","title":"Buck Converter","text":"<p>An electronic circuit that efficiently reduces voltage while maintaining power.</p> <p>Example: A buck converter converts 5 volts from USB to 3.3 volts for the microcontroller more efficiently than a resistor.</p>"},{"location":"glossary/#candle-flicker","title":"Candle Flicker","text":"<p>An animation pattern that simulates a flame by randomly varying orange and yellow colors.</p> <p>Example: The candle flicker function randomly sets pixels to yellow or red-orange values to create a realistic fire effect.</p>"},{"location":"glossary/#castellated-module","title":"Castellated Module","text":"<p>A circuit board with half-circle holes along the edges for surface-mount soldering.</p> <p>Example: The RP2040-Zero is a castellated module that can be soldered directly onto a larger board.</p>"},{"location":"glossary/#cathode","title":"Cathode","text":"<p>The negative terminal of an electronic component where electrical current exits.</p> <p>Example: The shorter leg of an LED is the cathode and should be connected to ground.</p>"},{"location":"glossary/#charging-current","title":"Charging Current","text":"<p>The electrical current flowing into a battery during the charging process.</p> <p>Example: The IP2312 charger supplies a charging current of up to 3 amps to quickly recharge LiPo batteries.</p>"},{"location":"glossary/#charging-efficiency","title":"Charging Efficiency","text":"<p>The percentage of electrical energy that successfully enters a battery versus what is lost as heat.</p> <p>Example: A charging efficiency of 85% means 15% of the power is wasted as heat during charging.</p>"},{"location":"glossary/#circuit","title":"Circuit","text":"<p>A complete path through which electrical current can flow from positive to negative terminals.</p> <p>Example: A basic LED circuit includes a power source, current-limiting resistor, LED, and connection back to ground.</p>"},{"location":"glossary/#clock-speed","title":"Clock Speed","text":"<p>The rate at which a processor executes instructions, measured in megahertz or gigahertz.</p> <p>Example: The RP2040 runs at a clock speed of 133 MHz, executing 133 million operations per second.</p>"},{"location":"glossary/#clone","title":"Clone","text":"<p>The action of creating a complete local copy of a remote code repository.</p> <p>Example: Clone the Moving Rainbow repository from GitHub to download all lessons and example code to your computer.</p>"},{"location":"glossary/#collector","title":"Collector","text":"<p>The output terminal of an NPN transistor where controlled current flows to the load.</p> <p>Example: Connect the LED noodle string to the collector of the transistor to switch them on and off.</p>"},{"location":"glossary/#collector-current","title":"Collector Current","text":"<p>The electrical current flowing through the collector terminal of a transistor.</p> <p>Example: If the collector current is 50 mA and the LED noodles are at 3 volts, they consume 150 milliwatts of power.</p>"},{"location":"glossary/#color-value","title":"Color Value","text":"<p>A number from 0 to 255 representing the intensity of a single color component.</p> <p>Example: In the RGB tuple (255, 128, 0), the red color value is 255 (maximum), green is 128 (medium), and blue is 0 (off).</p>"},{"location":"glossary/#color-wheel","title":"Color Wheel","text":"<p>A circular arrangement of colors showing smooth transitions through the visible spectrum.</p> <p>Example: The <code>wheel()</code> function takes a number from 0 to 255 and returns an RGB color from the color wheel.</p>"},{"location":"glossary/#color-wipe","title":"Color Wipe","text":"<p>An animation that fills the LED strip with a single color, one pixel at a time.</p> <p>Example: The color wipe function uses a for loop to set each pixel to red sequentially with a short delay between them.</p>"},{"location":"glossary/#comet-tail","title":"Comet Tail","text":"<p>An animation pattern featuring a bright leading pixel followed by progressively dimmer pixels creating a trailing effect.</p> <p>Example: The comet tail animation uses brightness levels (255, 128, 64, 32, 16, 8, 4, 2, 1) to create a fading trail behind the moving pixel.</p>"},{"location":"glossary/#comment","title":"Comment","text":"<p>Text in code that is ignored by the computer but helps humans understand what the code does.</p> <p>Example: The line <code># turn the first pixel on</code> is a comment explaining the next line of code.</p>"},{"location":"glossary/#commit","title":"Commit","text":"<p>A saved set of changes to code with a description of what was modified.</p> <p>Example: After fixing a bug in the rainbow function, create a commit with the message \"Fixed rainbow color calculation\".</p>"},{"location":"glossary/#comparison","title":"Comparison","text":"<p>An operation that checks the relationship between two values, such as equal to, greater than, or less than.</p> <p>Example: The comparison <code>counter &lt; NUMBER_PIXELS</code> returns True when the counter is less than the total number of pixels.</p>"},{"location":"glossary/#computational-thinking","title":"Computational Thinking","text":"<p>A problem-solving approach that uses concepts from computer science to break down and solve problems.</p> <p>Example: Use computational thinking to design a new LED pattern by decomposing it into smaller steps, recognizing color patterns, and creating an algorithm.</p>"},{"location":"glossary/#concept-cards","title":"Concept Cards","text":"<p>Single-topic educational cards that teach one specific concept or skill.</p> <p>Example: Each lesson in Moving Rainbow acts like a concept card, focusing on one animation technique such as moving pixels or color wheels.</p>"},{"location":"glossary/#conditional","title":"Conditional","text":"<p>A programming construct that executes different code based on whether a condition is true or false.</p> <p>Example: Use a conditional <code>if mode == 0:</code> to run the rainbow animation only when mode equals zero.</p>"},{"location":"glossary/#constant-current","title":"Constant Current","text":"<p>A power supply mode that maintains a fixed current regardless of voltage changes.</p> <p>Example: A battery charger runs in constant current mode to safely charge a battery at 500 mA.</p>"},{"location":"glossary/#constant-voltage","title":"Constant Voltage","text":"<p>A power supply mode that maintains a fixed voltage regardless of current draw.</p> <p>Example: USB provides constant voltage at 5 volts whether you draw 100 mA or 500 mA.</p>"},{"location":"glossary/#current","title":"Current","text":"<p>The flow of electrical charge through a conductor, measured in amperes.</p> <p>Example: An LED strip drawing 300 milliamps requires a current of 0.3 amperes from the battery.</p>"},{"location":"glossary/#current-draw","title":"Current Draw","text":"<p>The amount of electrical current a device consumes during operation.</p> <p>Example: Calculate total current draw by multiplying the number of pixels (30) by the current per pixel (60 mA) to get 1800 mA.</p>"},{"location":"glossary/#current-gain","title":"Current Gain","text":"<p>The ratio of output current to input current in a transistor, also called beta.</p> <p>Example: A transistor with current gain of 100 allows a 1 mA base current to control a 100 mA collector current.</p>"},{"location":"glossary/#current-limiting-resistor","title":"Current Limiting Resistor","text":"<p>A resistor placed in series with a component to prevent excessive current flow.</p> <p>Example: Place a 220-ohm current limiting resistor between a GPIO pin and LED to prevent damage.</p>"},{"location":"glossary/#current-monitor","title":"Current Monitor","text":"<p>A device or circuit that measures the electrical current flowing through a conductor.</p> <p>Example: Use a current monitor to verify that your LED strip is drawing the expected 1.8 amps.</p>"},{"location":"glossary/#curriculum","title":"Curriculum","text":"<p>A structured plan of educational content organized by topic and difficulty.</p> <p>Example: The Moving Rainbow curriculum progresses from simple blink patterns to complex multi-mode animations.</p>"},{"location":"glossary/#data-line","title":"Data Line","text":"<p>A wire or connection that carries information signals rather than just power.</p> <p>Example: The middle wire of the JST connector is the data line that sends color commands to the NeoPixel strip.</p>"},{"location":"glossary/#data-signal","title":"Data Signal","text":"<p>An electrical signal that carries information encoded as voltage changes.</p> <p>Example: The Pico sends a data signal to the LED strip containing color values for each pixel.</p>"},{"location":"glossary/#data-transmission","title":"Data Transmission","text":"<p>The process of sending information from one device to another.</p> <p>Example: Data transmission from the Pico to the LED strip happens serially, one bit at a time at high speed.</p>"},{"location":"glossary/#data-type","title":"Data Type","text":"<p>A category that defines what kind of information a variable can store.</p> <p>Example: Common data types include integers for whole numbers, floats for decimals, and strings for text.</p>"},{"location":"glossary/#dc-voltage","title":"DC Voltage","text":"<p>Direct Current voltage that flows in only one direction with constant polarity.</p> <p>Example: Batteries provide DC voltage, unlike household outlets which provide alternating current.</p>"},{"location":"glossary/#debugging","title":"Debugging","text":"<p>The process of finding and fixing errors in code or circuits.</p> <p>Example: Use print statements for debugging to see which values variables contain when your animation doesn't work correctly.</p>"},{"location":"glossary/#decrement","title":"Decrement","text":"<p>The operation of reducing a variable's value by one or a specified amount.</p> <p>Example: The statement <code>mode -= 1</code> decrements the mode variable by one when button 2 is pressed.</p>"},{"location":"glossary/#deep-linking","title":"Deep Linking","text":"<p>A URL that points to a specific section within a webpage rather than just the page itself.</p> <p>Example: Use deep linking to share the exact location in the documentation where the rainbow cycle function is explained.</p>"},{"location":"glossary/#delay","title":"Delay","text":"<p>A pause in program execution for a specified duration.</p> <p>Example: Add a delay of 0.05 seconds between pixel updates to control animation speed.</p>"},{"location":"glossary/#device-id","title":"Device ID","text":"<p>A unique number that identifies a specific piece of hardware.</p> <p>Example: Each USB device has a device ID that helps the computer recognize what type of device is connected.</p>"},{"location":"glossary/#diode","title":"Diode","text":"<p>An electronic component that allows electrical current to flow in only one direction.</p> <p>Example: The 1N4007 diode prevents reverse current from damaging the circuit if battery polarity is reversed.</p>"},{"location":"glossary/#drag-and-drop-programming","title":"Drag-and-Drop Programming","text":"<p>A method of programming by copying a file to a device appearing as a USB drive.</p> <p>Example: Program the Pico using drag-and-drop programming by copying a UF2 file to the RPI-RP2 drive.</p>"},{"location":"glossary/#dual-core","title":"Dual-Core","text":"<p>A processor containing two independent processing units that can run tasks simultaneously.</p> <p>Example: The RP2040 is dual-core, allowing it to run two programs at the same time.</p>"},{"location":"glossary/#duty-cycle","title":"Duty Cycle","text":"<p>The percentage of time a signal is in the \"on\" state during a cycle.</p> <p>Example: A PWM signal with 75% duty cycle is on for three-quarters of each cycle, creating bright LED output.</p>"},{"location":"glossary/#edge-pinout","title":"Edge Pinout","text":"<p>The arrangement of connection pins along the edges of a circuit board.</p> <p>Example: The Pico's edge pinout has 20 pins on each side, labeled with their GPIO numbers.</p>"},{"location":"glossary/#emitter","title":"Emitter","text":"<p>The ground-connected terminal of an NPN transistor.</p> <p>Example: Connect the emitter of the transistor to the circuit ground for proper operation.</p>"},{"location":"glossary/#externally-powered","title":"Externally Powered","text":"<p>A device receiving electrical power from a wall adapter rather than a computer or battery.</p> <p>Example: Use an externally powered USB hub when connecting multiple LED strips to avoid overloading your computer's USB ports.</p>"},{"location":"glossary/#fade","title":"Fade","text":"<p>A gradual change in LED brightness, either increasing or decreasing over time.</p> <p>Example: The heartbeat pattern uses a fade to smoothly transition from dim to bright and back.</p>"},{"location":"glossary/#fairy-lights","title":"Fairy Lights","text":"<p>Lightweight LED strings commonly used for costumes and decorations.</p> <p>Example: Sew fairy lights into Halloween costumes because they are flexible and battery-powered.</p>"},{"location":"glossary/#file-system","title":"File System","text":"<p>The organizational structure for storing and retrieving files on a storage device.</p> <p>Example: The Pico's file system stores your Python programs and config.py file in flash memory.</p>"},{"location":"glossary/#firmware","title":"Firmware","text":"<p>Software that is permanently programmed into a hardware device to control its basic functions.</p> <p>Example: Update the Pico's firmware to the latest version of MicroPython to access new features.</p>"},{"location":"glossary/#flash-memory","title":"Flash Memory","text":"<p>Non-volatile storage that retains data when power is removed.</p> <p>Example: The Pico has 2 MB of flash memory to store your Python programs permanently.</p>"},{"location":"glossary/#floating-point","title":"Floating Point","text":"<p>A data type for representing decimal numbers with fractional parts.</p> <p>Example: The floating point value 0.05 represents a 50 millisecond delay when used with the sleep function.</p>"},{"location":"glossary/#for-loop","title":"For Loop","text":"<p>A programming loop that repeats code a specific number of times, often counting through a range.</p> <p>Example: Use a for loop <code>for i in range(30):</code> to set colors for all 30 pixels in the strip.</p>"},{"location":"glossary/#fork","title":"Fork","text":"<p>Creating a personal copy of someone else's repository on GitHub that you can modify.</p> <p>Example: Fork the Moving Rainbow repository to create your own version where you can add custom animations.</p>"},{"location":"glossary/#forward-voltage-drop","title":"Forward Voltage Drop","text":"<p>The voltage consumed by a component when current flows through it in the correct direction.</p> <p>Example: A diode has a forward voltage drop of about 0.7 volts, reducing the voltage available to other components.</p>"},{"location":"glossary/#function","title":"Function","text":"<p>A named block of code that performs a specific task and can be reused multiple times.</p> <p>Example: Define a function <code>def move_dot(counter, color, delay):</code> to encapsulate the moving dot animation code.</p>"},{"location":"glossary/#gamma-correction","title":"Gamma Correction","text":"<p>An adjustment to brightness values that compensates for non-linear human perception of light.</p> <p>Example: Apply gamma correction using a lookup table so brightness changes appear smooth to the human eye.</p>"},{"location":"glossary/#gamma-table","title":"Gamma Table","text":"<p>A predefined list of adjusted brightness values used for gamma correction.</p> <p>Example: A gamma table maps linear values 0-255 to corrected values that appear evenly spaced to human vision.</p>"},{"location":"glossary/#github","title":"GitHub","text":"<p>An online platform for storing, sharing, and collaborating on code projects.</p> <p>Example: The Moving Rainbow project is hosted on GitHub at http://github.com/dmccreary/moving-rainbow.</p>"},{"location":"glossary/#github-pages","title":"GitHub Pages","text":"<p>A free website hosting service provided by GitHub for project documentation.</p> <p>Example: The Moving Rainbow documentation website is published using GitHub Pages at http://dmccreary.github.io/moving-rainbow.</p>"},{"location":"glossary/#global-variable","title":"Global Variable","text":"<p>A variable that can be accessed and modified from anywhere in a program.</p> <p>Example: Declare <code>global mode</code> inside a function to modify the mode variable defined outside the function.</p>"},{"location":"glossary/#gpio","title":"GPIO","text":"<p>General Purpose Input/Output; programmable pins on a microcontroller that can send or receive electrical signals.</p> <p>Example: GPIO pin 0 on the Pico is commonly used as the data output for NeoPixel strips.</p>"},{"location":"glossary/#ground","title":"Ground","text":"<p>The reference point in a circuit for voltage measurements, typically the negative terminal.</p> <p>Example: Connect all black wires to ground (GND) to complete the electrical circuit.</p>"},{"location":"glossary/#header-pins","title":"Header Pins","text":"<p>Metal pins extending from a circuit board used for making electrical connections.</p> <p>Example: Solder header pins to the Pico so it can be inserted into a breadboard.</p>"},{"location":"glossary/#heat-dissipation","title":"Heat Dissipation","text":"<p>The process of transferring excess heat away from a component to prevent overheating.</p> <p>Example: The TC4056 charger chip requires heat dissipation when charging at high current, which is why it gets warm.</p>"},{"location":"glossary/#heat-sink","title":"Heat Sink","text":"<p>A metal component attached to electronics to improve heat dissipation.</p> <p>Example: Attach a heat sink to the voltage regulator if it gets too hot when running many LEDs.</p>"},{"location":"glossary/#heartbeat","title":"Heartbeat","text":"<p>An animation pattern that pulses LEDs brighter and dimmer to simulate a beating heart.</p> <p>Example: The heartbeat function uses a fade in and fade out cycle with a brief pause between beats.</p>"},{"location":"glossary/#hue","title":"Hue","text":"<p>A pure color without considering brightness or saturation.</p> <p>Example: Red, green, and blue are different hues, while pink and dark red are the same hue with different brightness and saturation.</p>"},{"location":"glossary/#i2c","title":"I2C","text":"<p>Inter-Integrated Circuit; a communication protocol allowing multiple devices to communicate using two wires.</p> <p>Example: Use the I2C protocol to connect multiple sensors to the Pico using only two GPIO pins.</p>"},{"location":"glossary/#ide","title":"IDE","text":"<p>Integrated Development Environment; software that provides tools for writing, testing, and debugging code.</p> <p>Example: Thonny is a free IDE designed for Python programming with features like syntax highlighting and autocomplete.</p>"},{"location":"glossary/#if-statement","title":"If Statement","text":"<p>A conditional programming construct that executes code only when a specified condition is true.</p> <p>Example: The if statement <code>if counter &gt; 15:</code> runs the following code only when counter exceeds 15.</p>"},{"location":"glossary/#import","title":"Import","text":"<p>A command that loads external code libraries or modules into a program.</p> <p>Example: The statement <code>import config</code> loads the hardware configuration values from the config.py file.</p>"},{"location":"glossary/#increment","title":"Increment","text":"<p>The operation of increasing a variable's value by one or a specified amount.</p> <p>Example: The statement <code>counter += 1</code> increments the counter variable by one on each loop iteration.</p>"},{"location":"glossary/#index","title":"Index","text":"<p>A number indicating the position of an item in a list or array, starting from zero.</p> <p>Example: Access the first pixel using index 0 with <code>strip[0] = (255, 0, 0)</code>.</p>"},{"location":"glossary/#ingress-protection","title":"Ingress Protection","text":"<p>A standardized rating system for water and dust resistance using IP codes.</p> <p>Example: An IP67 rating means the LED strip is protected against dust and can be temporarily submerged in water.</p>"},{"location":"glossary/#integer","title":"Integer","text":"<p>A data type for whole numbers without decimal points.</p> <p>Example: The integer value 30 represents the total number of pixels in the LED strip.</p>"},{"location":"glossary/#interpreter","title":"Interpreter","text":"<p>Software that reads and executes code one line at a time.</p> <p>Example: The MicroPython interpreter running on the Pico translates your Python code into actions the processor can perform.</p>"},{"location":"glossary/#ip20","title":"IP20","text":"<p>An ingress protection rating indicating no water resistance.</p> <p>Example: Indoor LED strips are often IP20, suitable only for dry environments.</p>"},{"location":"glossary/#ip65","title":"IP65","text":"<p>An ingress protection rating indicating water resistance from spray but not submersion.</p> <p>Example: IP65 LED strips with silicon coating can be used outdoors but should not be submerged.</p>"},{"location":"glossary/#ip67","title":"IP67","text":"<p>An ingress protection rating indicating waterproof protection allowing temporary submersion.</p> <p>Example: IP67 LED strips in silicon tubes can be used underwater in fountains or pools.</p>"},{"location":"glossary/#iteration","title":"Iteration","text":"<p>A single execution of code within a loop, or the process of repeating.</p> <p>Example: Each iteration of the while loop updates the LED pattern and increments the counter.</p>"},{"location":"glossary/#jst-connector","title":"JST Connector","text":"<p>A standardized 3-pin connector commonly used for LED strips with positive, data, and ground wires.</p> <p>Example: Plug the JST connector from the LED strip into the matching socket on your controller board.</p>"},{"location":"glossary/#kilohm","title":"Kilohm","text":"<p>A unit of electrical resistance equal to 1,000 ohms.</p> <p>Example: Use a 10 kilohm (10k\u03a9) potentiometer to adjust brightness or speed by varying resistance.</p>"},{"location":"glossary/#larson-scanner","title":"Larson Scanner","text":"<p>An animation pattern where a bright LED sweeps back and forth with a fading tail.</p> <p>Example: The Larson Scanner effect, inspired by the Knight Rider TV show, creates a dramatic sweeping light pattern.</p>"},{"location":"glossary/#led-noodle","title":"LED Noodle","text":"<p>A flexible filament LED designed for wearable projects, typically requiring 3 volts.</p> <p>Example: LED noodles are ideal for Halloween costumes because they are lightweight and flexible.</p>"},{"location":"glossary/#led-strip","title":"LED Strip","text":"<p>A flexible strip containing multiple LEDs connected in series.</p> <p>Example: A 30-pixel LED strip allows you to create animations by controlling each pixel individually.</p>"},{"location":"glossary/#library","title":"Library","text":"<p>A collection of pre-written code that provides specific functionality.</p> <p>Example: Import the neopixel library to access functions for controlling addressable LED strips.</p>"},{"location":"glossary/#linear-charger","title":"Linear Charger","text":"<p>A battery charging circuit that regulates voltage using resistive elements, generating heat.</p> <p>Example: A linear charger is simpler but less efficient than a buck converter for charging batteries.</p>"},{"location":"glossary/#linear-dimmer","title":"Linear Dimmer","text":"<p>A brightness control method that directly scales LED values proportionally.</p> <p>Example: A linear dimmer reduces (255, 0, 0) to (128, 0, 0) by multiplying by 0.5, though this doesn't appear half as bright to human eyes.</p>"},{"location":"glossary/#lipo-battery","title":"LiPo Battery","text":"<p>Lithium Polymer rechargeable battery known for high energy density and light weight.</p> <p>Example: A 3.7-volt LiPo battery provides portable power for wearable LED projects.</p>"},{"location":"glossary/#list","title":"List","text":"<p>Python's data structure for storing ordered collections of values that can be modified.</p> <p>Example: Create a list of colors with <code>colors = [red, orange, yellow, green, blue]</code> to cycle through rainbow colors.</p>"},{"location":"glossary/#local-variable","title":"Local Variable","text":"<p>A variable that exists only within a specific function and cannot be accessed elsewhere.</p> <p>Example: A local variable defined inside the <code>move_dot()</code> function is not accessible in other functions.</p>"},{"location":"glossary/#loop","title":"Loop","text":"<p>A programming construct that repeats a section of code multiple times.</p> <p>Example: The main loop <code>while True:</code> runs continuously, updating the LED animation until the program is stopped.</p>"},{"location":"glossary/#markdown","title":"Markdown","text":"<p>A simple text formatting language using symbols to create headers, lists, and emphasis.</p> <p>Example: Write documentation in Markdown using <code>####</code> for headers and <code>**bold**</code> for bold text.</p>"},{"location":"glossary/#maximum-current","title":"Maximum Current","text":"<p>The highest electrical current a component can safely handle without damage.</p> <p>Example: The GPIO pins have a maximum current of 16 mA, requiring transistors to control higher current loads.</p>"},{"location":"glossary/#micro-usb","title":"Micro-USB","text":"<p>A small USB connector type commonly used for charging and programming.</p> <p>Example: Connect the Pico to your computer using a micro-USB cable to upload programs and provide power.</p>"},{"location":"glossary/#microcontroller","title":"Microcontroller","text":"<p>A small computer on a single chip designed to control electronic devices.</p> <p>Example: The Raspberry Pi Pico is a microcontroller that runs your Python programs to control LED animations.</p>"},{"location":"glossary/#micropython","title":"MicroPython","text":"<p>A version of Python optimized to run on microcontrollers with limited memory and processing power.</p> <p>Example: MicroPython on the Pico lets you write LED control programs in Python instead of C++.</p>"},{"location":"glossary/#microsecond","title":"Microsecond","text":"<p>A unit of time equal to one-millionth of a second.</p> <p>Example: NeoPixel timing uses microseconds to precisely control the data signals sent to each LED.</p>"},{"location":"glossary/#millisecond","title":"Millisecond","text":"<p>A unit of time equal to one-thousandth of a second.</p> <p>Example: Set a delay of 50 milliseconds (0.05 seconds) between animation frames for smooth motion.</p>"},{"location":"glossary/#milliamp","title":"Milliamp","text":"<p>A unit of electrical current equal to one-thousandth of an ampere.</p> <p>Example: Each NeoPixel draws up to 60 milliamps when displaying bright white.</p>"},{"location":"glossary/#milliamp-hours","title":"Milliamp Hours","text":"<p>A unit of battery capacity indicating total charge storage.</p> <p>Example: A 2000 milliamp hour battery can supply 1000 mA for 2 hours or 200 mA for 10 hours.</p>"},{"location":"glossary/#milliwatt","title":"Milliwatt","text":"<p>A unit of power equal to one-thousandth of a watt.</p> <p>Example: A single LED pixel at full brightness might consume 180 milliwatts of power.</p>"},{"location":"glossary/#mkdocs","title":"MkDocs","text":"<p>A static website generator that creates documentation websites from Markdown files.</p> <p>Example: The Moving Rainbow documentation is built using MkDocs and published to GitHub Pages.</p>"},{"location":"glossary/#mode","title":"Mode","text":"<p>A distinct operating state or pattern in a program, typically switched by user input.</p> <p>Example: Press button 1 to increment the mode variable and switch from rainbow mode to comet tail mode.</p>"},{"location":"glossary/#module","title":"Module","text":"<p>A file containing Python code that can be imported into other programs.</p> <p>Example: The config module contains hardware pin assignments used by all lesson programs.</p>"},{"location":"glossary/#modulo-function","title":"Modulo Function","text":"<p>A mathematical operation that returns the remainder after division.</p> <p>Example: Use the modulo function <code>counter % 30</code> to wrap the counter from 29 back to 0 for continuous animation.</p>"},{"location":"glossary/#momentary-push-button","title":"Momentary Push Button","text":"<p>A button that makes electrical contact only while being pressed, returning to open when released.</p> <p>Example: Wire a momentary push button between a GPIO pin and ground to create interactive controls.</p>"},{"location":"glossary/#moving-rainbow","title":"Moving Rainbow","text":"<p>An animation pattern where a rainbow-colored band travels along the LED strip.</p> <p>Example: The moving rainbow effect displays seven rainbow colors that shift position on each loop iteration.</p>"},{"location":"glossary/#neopixel","title":"NeoPixel","text":"<p>Adafruit's brand name for addressable RGB LED strips using WS2812B chips.</p> <p>Example: Import the neopixel library to control NeoPixel strips with simple Python commands.</p>"},{"location":"glossary/#normalized-value","title":"Normalized Value","text":"<p>A number scaled to fit within the range 0 to 1.</p> <p>Example: Convert a brightness percentage to a normalized value by dividing by 100, so 75% becomes 0.75.</p>"},{"location":"glossary/#npn-transistor","title":"NPN Transistor","text":"<p>A type of transistor where a small positive current at the base controls larger current flow from collector to emitter.</p> <p>Example: Use an NPN transistor like the 2N2222 to allow a GPIO pin to switch high-current LED loads.</p>"},{"location":"glossary/#operator","title":"Operator","text":"<p>A symbol representing a mathematical or logical operation.</p> <p>Example: The operator <code>+</code> adds numbers, while <code>*</code> multiplies them, as in <code>total = pixels * 60</code>.</p>"},{"location":"glossary/#overcurrent-protection","title":"Overcurrent Protection","text":"<p>A safety circuit that automatically limits or stops current flow when it exceeds safe levels.</p> <p>Example: USB ports have overcurrent protection that shuts off power if you try to draw more than 500 mA.</p>"},{"location":"glossary/#overcharge-protection","title":"Overcharge Protection","text":"<p>A safety circuit that prevents battery damage by stopping charging when the battery is full.</p> <p>Example: The TC4056 charger has overcharge protection that stops at 4.2 volts to extend LiPo battery life.</p>"},{"location":"glossary/#parallel-circuit","title":"Parallel Circuit","text":"<p>An electrical circuit where components are connected across the same voltage with multiple current paths.</p> <p>Example: In a parallel circuit, each LED branch receives the full battery voltage independently.</p>"},{"location":"glossary/#parameter","title":"Parameter","text":"<p>A value passed into a function to customize its behavior.</p> <p>Example: The function <code>move_dot(counter, color, delay)</code> accepts three parameters: position, color, and timing.</p>"},{"location":"glossary/#pattern","title":"Pattern","text":"<p>A repeating design or sequence in an animation.</p> <p>Example: The theater chase pattern creates a marquee effect by turning on every third LED and shifting the pattern.</p>"},{"location":"glossary/#pattern-recognition","title":"Pattern Recognition","text":"<p>The ability to identify similarities and recurring elements in problems or data.</p> <p>Example: Use pattern recognition to notice that many animations follow the same structure: update pixels, write to strip, delay, repeat.</p>"},{"location":"glossary/#photo-sensor","title":"Photo-Sensor","text":"<p>A device that detects the presence or intensity of light.</p> <p>Example: Connect a photo-sensor to an analog pin to make LEDs automatically brighten when room lighting dims.</p>"},{"location":"glossary/#photoresistor","title":"Photoresistor","text":"<p>A component whose electrical resistance changes based on the amount of light hitting it.</p> <p>Example: Use a photoresistor in a voltage divider to create a nightlight that turns on in darkness.</p>"},{"location":"glossary/#pio","title":"PIO","text":"<p>Programmable Input/Output; specialized hardware on the RP2040 for creating custom timing-critical protocols.</p> <p>Example: The NeoPixel library uses PIO state machines to generate precisely-timed data signals.</p>"},{"location":"glossary/#pixel","title":"Pixel","text":"<p>An individual controllable LED unit in an addressable LED strip.</p> <p>Example: Set pixel 5 to blue with the command <code>strip[5] = (0, 0, 255)</code>.</p>"},{"location":"glossary/#potentiometer","title":"Potentiometer","text":"<p>A variable resistor with an adjustable knob used to control electrical resistance.</p> <p>Example: Connect a 10k\u03a9 potentiometer to an analog pin to create a manual brightness control for your LED strip.</p>"},{"location":"glossary/#power-consumption","title":"Power Consumption","text":"<p>The amount of electrical energy a device uses per unit of time.</p> <p>Example: Calculate power consumption by multiplying voltage (5V) by current (1.8A) to get 9 watts.</p>"},{"location":"glossary/#power-dissipation","title":"Power Dissipation","text":"<p>The conversion of electrical energy into heat within a component.</p> <p>Example: A current-limiting resistor has power dissipation calculated by squaring the current and multiplying by resistance.</p>"},{"location":"glossary/#power-rating","title":"Power Rating","text":"<p>The maximum amount of power a component can safely handle.</p> <p>Example: Check the power rating of resistors to ensure they can handle the expected power dissipation without overheating.</p>"},{"location":"glossary/#power-supply","title":"Power Supply","text":"<p>A device that provides electrical energy to other components.</p> <p>Example: Connect a 5-volt power supply capable of 2 amps to safely power a 30-pixel LED strip at full brightness.</p>"},{"location":"glossary/#preamble","title":"Preamble","text":"<p>The beginning section of a program containing import statements and initial setup code.</p> <p>Example: The preamble of most lessons imports the machine, neopixel, and config modules.</p>"},{"location":"glossary/#product-id","title":"Product ID","text":"<p>A number that identifies the specific model or type of a device.</p> <p>Example: The Raspberry Pi Pico has a unique product ID that helps your computer recognize it as a MicroPython device.</p>"},{"location":"glossary/#pull","title":"Pull","text":"<p>The action of downloading the latest changes from a remote repository.</p> <p>Example: Pull updates from the Moving Rainbow repository to get new lessons and bug fixes.</p>"},{"location":"glossary/#push","title":"Push","text":"<p>The action of uploading your local code changes to a remote repository.</p> <p>Example: After adding a new animation, push your changes to GitHub to share them with others.</p>"},{"location":"glossary/#pwm","title":"PWM","text":"<p>Pulse Width Modulation; a technique for controlling power by rapidly switching between on and off states.</p> <p>Example: Use PWM to dim non-addressable LEDs by varying the duty cycle from 0% (off) to 100% (full brightness).</p>"},{"location":"glossary/#python","title":"Python","text":"<p>A high-level programming language known for readability and ease of learning.</p> <p>Example: MicroPython is a compact version of Python designed to run on microcontrollers.</p>"},{"location":"glossary/#rainbow-cycle","title":"Rainbow Cycle","text":"<p>An animation displaying all rainbow colors across the strip that rotates through the color spectrum.</p> <p>Example: The rainbow cycle function uses the wheel function to assign different colors to each pixel based on position.</p>"},{"location":"glossary/#range","title":"Range","text":"<p>A sequence of numbers generated for use in loops.</p> <p>Example: The range <code>range(0, 30)</code> generates numbers from 0 to 29 for iterating through all pixels.</p>"},{"location":"glossary/#raspberry-pi-foundation","title":"Raspberry Pi Foundation","text":"<p>A British educational charity that creates affordable computing devices for learning.</p> <p>Example: The Raspberry Pi Foundation designed the Raspberry Pi Pico to teach physical computing.</p>"},{"location":"glossary/#raspberry-pi-pico","title":"Raspberry Pi Pico","text":"<p>A low-cost microcontroller board featuring the RP2040 chip and 26 GPIO pins.</p> <p>Example: The Raspberry Pi Pico costs about $4 and is perfect for learning to control LEDs with MicroPython.</p>"},{"location":"glossary/#recursive","title":"Recursive","text":"<p>A programming technique where a function calls itself to solve a problem.</p> <p>Example: A recursive function can count down by calling itself with a decreased value until reaching zero.</p>"},{"location":"glossary/#refresh-rate","title":"Refresh Rate","text":"<p>The frequency at which a display updates its content.</p> <p>Example: Update the LED strip at a refresh rate of 20 times per second (50 ms delay) for smooth animations.</p>"},{"location":"glossary/#repository","title":"Repository","text":"<p>A storage location for code and related files, typically on GitHub.</p> <p>Example: Clone the Moving Rainbow repository to access all lesson code and documentation.</p>"},{"location":"glossary/#resistance","title":"Resistance","text":"<p>Opposition to electrical current flow through a material, measured in ohms.</p> <p>Example: A 220-ohm resistance limits current flow to safe levels for an LED.</p>"},{"location":"glossary/#resistor","title":"Resistor","text":"<p>An electronic component that impedes current flow by a specified resistance.</p> <p>Example: Connect a 220-ohm resistor in series with an LED to prevent excessive current.</p>"},{"location":"glossary/#return-value","title":"Return Value","text":"<p>Data sent back from a function after it completes its task.</p> <p>Example: The wheel function's return value is an RGB color tuple based on the input position.</p>"},{"location":"glossary/#reverse-flow","title":"Reverse Flow","text":"<p>Electrical current moving in the opposite direction from normal operation.</p> <p>Example: A diode blocks reverse flow, protecting the circuit if battery polarity is accidentally reversed.</p>"},{"location":"glossary/#rgb","title":"RGB","text":"<p>Red, Green, Blue; a color model mixing these three primary colors to create any visible color.</p> <p>Example: Set a pixel to purple using RGB values (255, 0, 255) for maximum red and blue with no green.</p>"},{"location":"glossary/#rgb-led","title":"RGB LED","text":"<p>A light-emitting diode containing separate red, green, and blue elements that can mix to produce any color.</p> <p>Example: Each NeoPixel contains an RGB LED and control chip in a single 5mm square package.</p>"},{"location":"glossary/#rhizomatic-learning","title":"Rhizomatic Learning","text":"<p>A non-linear educational approach where learners explore connections between topics in a network rather than following a fixed path.</p> <p>Example: The Moving Rainbow project supports rhizomatic learning by allowing students to jump between lessons based on interest.</p>"},{"location":"glossary/#ripple","title":"Ripple","text":"<p>An animation pattern creating expanding waves of color, like a stone dropped in water.</p> <p>Example: The ripple effect starts at a center point and expands outward with fading brightness.</p>"},{"location":"glossary/#rp2040","title":"RP2040","text":"<p>The dual-core ARM Cortex M0+ microcontroller chip designed by Raspberry Pi Foundation.</p> <p>Example: The RP2040 chip inside the Pico runs at 133 MHz and has 264KB of RAM.</p>"},{"location":"glossary/#rp2040-zero","title":"RP2040-Zero","text":"<p>A compact development board featuring the RP2040 in a smaller form factor with castellated edges.</p> <p>Example: The RP2040-Zero is half the size of a Pico, making it ideal for small wearable projects.</p>"},{"location":"glossary/#runtime-library","title":"Runtime Library","text":"<p>Essential code that must be present for programs to execute properly.</p> <p>Example: The MicroPython runtime library provides fundamental functions like print() and sleep().</p>"},{"location":"glossary/#saturation","title":"Saturation","text":"<p>The intensity or purity of a color, from gray (low saturation) to vivid (high saturation).</p> <p>Example: Pure red (255, 0, 0) has maximum saturation, while pink (255, 128, 128) has lower saturation.</p>"},{"location":"glossary/#schematic","title":"Schematic","text":"<p>A diagram showing electrical connections using standardized symbols for components.</p> <p>Example: Refer to the schematic to see which GPIO pin connects to the LED strip data line.</p>"},{"location":"glossary/#scope","title":"Scope","text":"<p>The region of code where a variable can be accessed.</p> <p>Example: A variable defined inside a function has local scope and cannot be used outside that function.</p>"},{"location":"glossary/#screw-headers","title":"Screw Headers","text":"<p>Terminal blocks with screws for securing wires without soldering.</p> <p>Example: Use screw headers to make removable connections between the Pico and LED strip wires.</p>"},{"location":"glossary/#serial-console","title":"Serial Console","text":"<p>A text-based communication interface for interacting with a microcontroller.</p> <p>Example: View print statement output in the serial console at the bottom of Thonny.</p>"},{"location":"glossary/#serial-data","title":"Serial Data","text":"<p>Information transmitted one bit at a time over a single wire.</p> <p>Example: NeoPixels receive serial data containing color information at 800,000 bits per second.</p>"},{"location":"glossary/#series-circuit","title":"Series Circuit","text":"<p>An electrical circuit where components are connected end-to-end in a single path.</p> <p>Example: In a series circuit, current must flow through each component sequentially.</p>"},{"location":"glossary/#short-circuit","title":"Short Circuit","text":"<p>An unintended connection creating a very low resistance path for current.</p> <p>Example: Prevent short circuits by ensuring positive and negative wires never touch directly.</p>"},{"location":"glossary/#signal-processing","title":"Signal Processing","text":"<p>The analysis and manipulation of electrical signals carrying information.</p> <p>Example: The WS2812B chip performs signal processing to decode color data from the timing of voltage pulses.</p>"},{"location":"glossary/#sleep","title":"Sleep","text":"<p>A function that pauses program execution for a specified duration.</p> <p>Example: The command <code>sleep(0.1)</code> pauses for one-tenth of a second between animation frames.</p>"},{"location":"glossary/#solar-panel","title":"Solar Panel","text":"<p>A device that converts light energy into electrical energy.</p> <p>Example: Connect a 6-volt solar panel to a battery charger circuit to create a self-powered nightlight.</p>"},{"location":"glossary/#solderless-breadboard","title":"Solderless Breadboard","text":"<p>Another term for breadboard, emphasizing that no soldering is required.</p> <p>Example: Build prototype circuits quickly on a solderless breadboard before creating a permanent version.</p>"},{"location":"glossary/#spi","title":"SPI","text":"<p>Serial Peripheral Interface; a synchronous communication protocol using separate clock and data lines.</p> <p>Example: Some LED matrices use the SPI protocol for faster data transmission than basic serial.</p>"},{"location":"glossary/#spectrum","title":"Spectrum","text":"<p>The range of all possible colors in order of wavelength.</p> <p>Example: The rainbow displays the visible spectrum from red through violet.</p>"},{"location":"glossary/#sram","title":"SRAM","text":"<p>Static Random-Access Memory; fast temporary storage that retains data while powered.</p> <p>Example: The RP2040 has 264KB of SRAM for storing variables while programs run.</p>"},{"location":"glossary/#state-machine","title":"State Machine","text":"<p>A programmable logic system that changes outputs based on inputs and current state.</p> <p>Example: The PIO state machines in the RP2040 generate precise NeoPixel timing signals.</p>"},{"location":"glossary/#string","title":"String","text":"<p>A data type representing text as a sequence of characters.</p> <p>Example: Use a string like <code>\"rainbow mode\"</code> to display the current animation name.</p>"},{"location":"glossary/#strip","title":"Strip","text":"<p>The variable name commonly used to represent a NeoPixel LED strip object.</p> <p>Example: Initialize the strip with <code>strip = NeoPixel(Pin(0), 30)</code> to create a 30-pixel strip on GPIO pin 0.</p>"},{"location":"glossary/#sushi-cards","title":"Sushi Cards","text":"<p>Bite-sized educational cards teaching single concepts, named after the CoderDojo project.</p> <p>Example: Create sushi cards for each lesson showing the key concept and code snippet.</p>"},{"location":"glossary/#syntax","title":"Syntax","text":"<p>The grammar rules that define how code must be written for a programming language.</p> <p>Example: Python syntax requires consistent indentation and colons after if statements.</p>"},{"location":"glossary/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Automatic color-coding of different parts of code to improve readability.</p> <p>Example: Thonny's syntax highlighting shows keywords in orange, strings in green, and comments in gray.</p>"},{"location":"glossary/#tactile-switch","title":"Tactile Switch","text":"<p>Another term for a momentary push button with tactile feedback when pressed.</p> <p>Example: Wire tactile switches to GPIO pins 14 and 15 for interactive mode control.</p>"},{"location":"glossary/#temperature-sensor","title":"Temperature Sensor","text":"<p>A device that measures heat and converts it to an electrical signal.</p> <p>Example: The RP2040 includes a built-in temperature sensor you can read to monitor chip temperature.</p>"},{"location":"glossary/#theater-chase","title":"Theater Chase","text":"<p>An animation pattern resembling marquee lights, with groups of LEDs moving along the strip.</p> <p>Example: The theater chase function lights every third pixel and shifts the pattern to create a chasing effect.</p>"},{"location":"glossary/#thermal-feedback","title":"Thermal Feedback","text":"<p>Automatic adjustment of operation based on temperature measurements.</p> <p>Example: Battery chargers use thermal feedback to reduce charging current if the chip gets too hot.</p>"},{"location":"glossary/#thonny","title":"Thonny","text":"<p>A free Python IDE designed for beginners with simple interface and built-in debugging tools.</p> <p>Example: Use Thonny to write MicroPython programs and upload them to the Pico.</p>"},{"location":"glossary/#tie-points","title":"Tie Points","text":"<p>The individual connection holes in a breadboard that are electrically connected in groups.</p> <p>Example: A half-size breadboard typically has 400 tie points arranged in rows of 5 connected holes.</p>"},{"location":"glossary/#transistor","title":"Transistor","text":"<p>A semiconductor component that acts as an electronic switch or amplifier.</p> <p>Example: Use a transistor to let a low-current GPIO pin control high-current LED noodles.</p>"},{"location":"glossary/#trickle-charge","title":"Trickle Charge","text":"<p>A very small charging current used to maintain a battery without overcharging.</p> <p>Example: After a battery is full, the charger switches to trickle charge mode to keep it topped off.</p>"},{"location":"glossary/#tuple","title":"Tuple","text":"<p>An ordered, immutable collection of values in Python.</p> <p>Example: RGB colors are stored as tuples like <code>(255, 0, 0)</code> where the values cannot be changed individually.</p>"},{"location":"glossary/#twinkle","title":"Twinkle","text":"<p>An animation pattern with random pixels blinking on and off to simulate stars.</p> <p>Example: The twinkle effect randomly selects pixels and sets them to white before fading them out.</p>"},{"location":"glossary/#uart","title":"UART","text":"<p>Universal Asynchronous Receiver-Transmitter; a protocol for serial communication between devices.</p> <p>Example: The Pico uses UART protocol to send print statement output to your computer via USB.</p>"},{"location":"glossary/#uf2-format","title":"UF2 Format","text":"<p>USB Flashing Format; a file type for programming microcontrollers by copying to a USB drive.</p> <p>Example: Download the MicroPython UF2 file and drag it to the RPI-RP2 drive to program the Pico.</p>"},{"location":"glossary/#usb-connector","title":"USB Connector","text":"<p>A standardized plug for connecting devices, providing both power and data communication.</p> <p>Example: Plug a USB connector into your computer to program the Pico and power the LED strip.</p>"},{"location":"glossary/#usb-device","title":"USB Device","text":"<p>Any hardware that connects to a computer through a USB port.</p> <p>Example: The Pico appears as a USB device when connected, allowing file transfer and serial communication.</p>"},{"location":"glossary/#usb-hub","title":"USB Hub","text":"<p>A device that expands one USB port into multiple ports.</p> <p>Example: Use an externally powered USB hub to connect multiple LED projects without overloading your computer's USB ports.</p>"},{"location":"glossary/#usb-power-pack","title":"USB Power Pack","text":"<p>A portable battery with USB output for charging devices.</p> <p>Example: A 10,000 mAh USB power pack can run a 30-pixel LED strip for several hours.</p>"},{"location":"glossary/#usb-c","title":"USB-C","text":"<p>The newest reversible USB connector type supporting higher power and data rates.</p> <p>Example: Some newer development boards use USB-C instead of micro-USB for more reliable connections.</p>"},{"location":"glossary/#variable","title":"Variable","text":"<p>A named storage location in a program that holds a value which can change.</p> <p>Example: Create a variable <code>counter = 0</code> to keep track of the current pixel position in an animation.</p>"},{"location":"glossary/#vendor-id","title":"Vendor ID","text":"<p>A unique number assigned to each manufacturer of USB devices.</p> <p>Example: All Raspberry Pi products share the same vendor ID, helping computers recognize them.</p>"},{"location":"glossary/#voltage","title":"Voltage","text":"<p>The electrical potential difference between two points, measured in volts.</p> <p>Example: The Pico operates at 3.3 volts for logic signals while most LED strips require 5 volts.</p>"},{"location":"glossary/#voltage-regulator","title":"Voltage Regulator","text":"<p>A circuit that maintains constant output voltage despite changes in input voltage or current draw.</p> <p>Example: A voltage regulator converts 5V from USB down to 3.3V for the Pico's processor.</p>"},{"location":"glossary/#watt","title":"Watt","text":"<p>A unit of electrical power equal to one joule per second.</p> <p>Example: A 30-pixel LED strip at full brightness consumes approximately 1.8 watts of power.</p>"},{"location":"glossary/#waterproofing","title":"Waterproofing","text":"<p>Protection that prevents water from entering or damaging electronics.</p> <p>Example: Choose waterproofing level based on use: IP20 for indoors, IP65 for outdoor, IP67 for underwater.</p>"},{"location":"glossary/#wheel-function","title":"Wheel Function","text":"<p>A function that converts a number from 0-255 into an RGB color, cycling through the spectrum.</p> <p>Example: Call <code>wheel(128)</code> to get a cyan color halfway through the color wheel.</p>"},{"location":"glossary/#while-loop","title":"While Loop","text":"<p>A loop that continues executing as long as a specified condition remains true.</p> <p>Example: The main animation loop <code>while True:</code> runs forever because the condition True never becomes false.</p>"},{"location":"glossary/#wiring-diagram","title":"Wiring Diagram","text":"<p>A simplified drawing showing physical connections between components.</p> <p>Example: Follow the wiring diagram to connect the LED strip's red wire to 5V, black to ground, and green to GPIO pin 0.</p>"},{"location":"glossary/#write","title":"Write","text":"<p>The command that sends color data from the program to the physical LED strip.</p> <p>Example: After setting pixel colors, call <code>strip.write()</code> to make the changes visible on the strip.</p>"},{"location":"glossary/#ws2812b","title":"WS2812B","text":"<p>The specific integrated circuit chip standard used in addressable RGB LEDs.</p> <p>WS2812B are also known as NeoPixels.</p> <p>Example: WS2812B chips contain an RGB LED and control circuitry in a single 5mm package, allowing individual addressing of each pixel.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#basic-requirements","title":"Basic Requirements","text":"<ol> <li>Hosting the site must be free using GitHub Pages</li> <li>We need to document the Python sample code</li> <li>We want professional-quality code highlighting</li> <li>We wanted the site to have a strong search function</li> <li>We wanted to make it easy to generate the HTML from easy-to-edit Markdown files</li> <li>We wanted to make it easy for an instructor to copy the link from any section of any lesson plan directly into a Zoom/Chat window so students can just click on the link to get the right lesson.  This is called Deep Linking</li> <li>We wanted to make it easy to build user interfaces that are consistent with our other projects including:<ol> <li>Beginning Python</li> <li>Beginning Electronics</li> <li>MicroPython for Kids</li> <li>Robot Faces</li> <li>Clocks and Watches</li> <li>Robot Day</li> <li>STEM Robots</li> <li>MicroSims for Education</li> <li>Digital Electronics</li> </ol> </li> <li>We wanted to make it easy for other schools and organizations to just \"fork\" this repository to put their own school logo and colors on the site.</li> <li>We wanted to leverage existing GitHub tools for reporting bugs, organizing projects and tasks and automating the build process.</li> <li>We wanted to make sure we would support consistent build and release management so we could add new features without disrupting existing sites. (branches, tagging and release).</li> <li>We wanted to paste a link on a social media site or a chat like Zoom or Slack and have a nice \"Social Media\" card to display information about that lesson.</li> </ol>"},{"location":"how-we-built-this-site/#why-python-mkdocs","title":"Why Python Mkdocs","text":"<p>The goal of this site is to teach computational thinking  in the coolest hands-on way we can think of. We also do this by using AI to help us find the lowest-cost parts.</p> <p>We also leverage open-source MicroPython, and it is natural to want to use a website builder that also uses Python. Python is language of data science and AI.  So we wanted to create a site that could be familiar to Python developers.</p> <p>But we also wanted to make it easy for non-programmers to update the site.  Let's review some of these design decisions and explain how you can \"fork\" this site (duplicate it) and put your school or organization's brand and logo on the pages</p> <p>We will also touch a little bit on how we are using Google Analytics to track site usage and how this can be added with just a few new lines in the configuration file for this site.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#enable-edit-icon","title":"Enable Edit Icon","text":"<p>To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area.</p> <pre><code>edit_uri: edit/master/docs/\n</code></pre> <pre><code>    theme:\n        features:\n            - content.action.edit\n</code></pre> <p>See the Mkdocs Material documentation.</p>"},{"location":"how-we-built-this-site/#github-action-to-deploy-after-edit","title":"GitHub Action to Deploy After Edit","text":"<p>We want to allow non-technical staff to click the \"Edit\" button on the pages and just click the \"Save\".  This should trigger the Markdown to HTML conversion and rebuild the site.</p> <p>GitHub Action for Mkdocs Deply</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"resources/","title":"Moving Rainbow Resources","text":""},{"location":"resources/#micropython-documentation-on-neopixels","title":"MicroPython Documentation on NeoPixels","text":"<ul> <li>MicroPython NeoPixel Tutorial - note this is in the esp8266 area but it will run on the Raspberry Pi Pico without change.</li> <li>MicroPython NeoPixel Library - note, that there are errors in this documentation.  You do not need to reference the machine type.</li> </ul>"},{"location":"resources/#references","title":"References","text":"<ol> <li>CodeSavvy</li> <li>CoderDojo International</li> <li>CoderDojo Twin Cities (now part of the Code Savvy Explorer Program)</li> </ol>"},{"location":"getting-started/","title":"Getting Started with Moving Rainbow","text":"<p>Welcome to the Moving Rainbow project! This section will guide you through everything you need to  know to start creating colorful LED animations with programmable microcontrollers.</p>"},{"location":"getting-started/#what-is-moving-rainbow","title":"What is Moving Rainbow?","text":"<p>Moving Rainbow is an educational system designed to teach computational thinking and  Python programming using colorful LED strips and low-cost microcontrollers.  The project emphasizes hands-on learning with bright, engaging visuals that students love to create and share.</p> <p>Why Moving Rainbow?</p> <ol> <li>Colorful &amp; Fun - Kids love working with bright, moving LED patterns</li> <li>Easy to Start - Simple USB connection and beginner-friendly Python programming</li> <li>Affordable - Complete kits cost under $10</li> <li>Take-Home Projects - Students can build wearables and decorations to show friends and family</li> <li>Proven Results - Refined through years of classroom testing and student feedback</li> </ol>"},{"location":"getting-started/#quick-start-path","title":"Quick Start Path","text":"<p>Follow these guides in order to get up and running:</p>"},{"location":"getting-started/#1-about-moving-rainbow","title":"1. About Moving Rainbow","text":"<p>Learn about the project's background, educational philosophy, and why we use LED strips to teach programming. Discover how this curriculum evolved from Arduino to MicroPython and the principles that make it effective for students.</p> <p>What You'll Learn: - History and evolution of the project - Why color and motion are powerful learning tools - Licensing and how to contribute</p>"},{"location":"getting-started/#2-standard-kits","title":"2. Standard Kits","text":"<p>Explore the pre-configured kits designed for classroom use. These kits include everything you need to get started with minimal setup time.</p> <p>What's Included: - Raspberry Pi Pico microcontroller ($4-6) - 1/2-size breadboard with 400 tie points - 30-LED addressable RGB strip (WS2812B) - Two momentary push buttons - Screw terminal headers (optional) - Jumper wires</p> <p>Kit Variations: - LED fairy lights for costumes - NeoPixel rings and matrices - Waterproof options (IP65, IP67)</p>"},{"location":"getting-started/#3-purchasing-your-own-parts","title":"3. Purchasing Your Own Parts","text":"<p>If you want to build your own kit at home, this guide shows you where to buy parts online and what to look for.</p> <p>Topics Covered: - Finding WS2812B LED strips on eBay and Amazon - Understanding waterproofing ratings (IP20, IP65, IP67) - Cost comparison and buying tips - Recommended sellers and specifications</p> <p>Waterproofing Guide: - IP20 - Indoor classroom use ($3/meter) - IP65 - Silicon coating for costumes and outdoor use - IP67 - PVC tube for underwater applications</p>"},{"location":"getting-started/#4-development-boards","title":"4. Development Boards","text":"<p>Learn about the microcontrollers compatible with Moving Rainbow lessons, including detailed pinout diagrams.</p> <p>Supported Boards: - Raspberry Pi Pico - Standard $4 board with 26 GPIO pins - Raspberry Pi Pico W - $6 version with WiFi capability - RP2040-Zero - Compact version with USB-C connector - Detailed pinout diagrams for all boards</p> <p>Key Features: - Dual-core ARM Cortex M0+ processor @ 133 MHz - 264KB SRAM, 2MB flash memory - Drag-and-drop programming via USB - Temperature sensor and multiple I/O options</p>"},{"location":"getting-started/#5-desktop-setup","title":"5. Desktop Setup","text":"<p>Set up the free Thonny IDE on your computer (Windows, Mac, or Linux) and configure it for MicroPython development.</p> <p>Installation Steps: 1. Download and install Thonny 2. Configure MicroPython firmware on your Pico 3. Verify interpreter settings 4. Test your first program</p> <p>What You'll Install: - Thonny Python IDE (free, open-source) - MicroPython firmware for Raspberry Pi Pico - USB drivers (automatic on most systems)</p>"},{"location":"getting-started/#6-updating-firmware","title":"6. Updating Firmware","text":"<p>Learn how to update the MicroPython firmware on your Raspberry Pi Pico when new versions are released.</p> <p>Quick Process: 1. Download latest firmware from micropython.org 2. Hold BOOTSEL button while connecting USB 3. Drag firmware file to RPI-RP2 drive 4. Wait 10 seconds - done!</p> <p>When to Update: - Getting started with a new Pico - New features are released - Bug fixes are available - Compatibility issues arise</p>"},{"location":"getting-started/#7-electrical-connections","title":"7. Electrical Connections","text":"<p>Understand the simple three-wire hookup for LED strips and how to connect components to your breadboard.</p> <p>Basic Connections: - GND (Black) - Ground/negative wire to Pico GND pin - +5V (Red) - Power wire to Pico VBUS pin - Data (Yellow/Green) - Signal wire to GPIO pin 0</p> <p>Breadboard Layout: - Pico placement in center - Button connections on GPIO pins 14 and 15 - LED strip screw terminal connections</p>"},{"location":"getting-started/#8-batteries","title":"8. Batteries","text":"<p>Choose the right battery for portable LED projects, from small coin cells to large USB power packs.</p> <p>Battery Options: - Coin Cells - Tiny projects (200-250 mAh) - AA Batteries - Beginner-friendly (2000-3000 mAh) - USB Power Packs - Best for most projects (2000-20000 mAh) - LiPo Batteries - Professional wearables (500-2000 mAh, requires care) - 18650 Cells - High-power applications (2000-3500 mAh)</p> <p>Safety Levels: - \u2705 Safe for Kids: Coin cells, AA/AAA, USB power packs, 9V - \u26a0\ufe0f Adult Supervision: LiPo batteries, 18650 cells</p>"},{"location":"getting-started/#9-github-summary","title":"9. GitHub Summary","text":"<p>Learn the six essential Git commands needed to download lesson code and optionally contribute improvements back to the project.</p> <p>Essential Commands: - <code>git clone</code> - Download the repository - <code>git pull</code> - Get latest updates - <code>git add</code> - Stage your changes - <code>git commit</code> - Save changes with description - <code>git push</code> - Upload to GitHub - <code>git status</code> - Check current state</p> <p>What You Can Access: - All lesson code and examples - Documentation source files - MicroSim interactive tools - Kit assembly instructions</p>"},{"location":"getting-started/#whats-next","title":"What's Next?","text":"<p>After completing this Getting Started section, you'll be ready to:</p> <ol> <li>Start the Lessons - Begin with simple blink patterns and progress to complex animations</li> <li>Explore Kits - Build specialized projects like nightlights and holiday decorations</li> <li>Try MicroSims - Use interactive web tools to understand concepts</li> <li>Review the Teachers Guide - Learn pedagogical approaches for teaching with Moving Rainbow</li> </ol>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<p>If you have questions:</p> <ul> <li>Check the Glossary for term definitions</li> <li>Review the Resources page for additional learning materials</li> <li>Contact Dan McCreary via LinkedIn</li> <li>Report issues on the GitHub repository</li> </ul>"},{"location":"getting-started/#license","title":"License","text":"<p>All Moving Rainbow curricula are licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0. You're free to use and modify materials for educational purposes, as long as you don't resell them for profit.</p> <p>Ready to begin? Start with About Moving Rainbow to learn the story behind the project, or jump straight to Standard Kits if you're ready to see what you need!</p>"},{"location":"getting-started/about/","title":"About Moving Rainbow","text":"<p>What is the lowest-cost and most fun way to learn coding and computational thinking?  This is the question that has been the driving force behind the Moving Rainbow project.</p> <p>We think the answer is our Moving Rainbow system.</p> <ol> <li>It is a bright colorful display of LEDs and motion that kids love</li> <li>It easy to hook up to any computer with a USB connector</li> <li>It is easy to program with the popular Python language</li> <li>It teaches the power of computational thinking</li> <li>The Moving Rainbow kits can cost under $10!</li> </ol> <p>Let us tell you why we think you will also love the Moving Rainbow system.</p>"},{"location":"getting-started/about/#background-of-the-moving-rainbow","title":"Background of the Moving Rainbow","text":"<p>In 2014 the IoT Hackday program in Minnesota was looking for a way to introduce new students to the Internet of Things and to teach computer programming with microcontrollers.  Dan McCreary developed a series of projects and tried them on in classrooms.  He quickly learned that kids loved working with LEDs and making colorful patterns with rows of LEDs.</p> <p>However, these projects required lots of individual components (LEDs, resistors, Arduino etc.).  Eventually, Dan discovered a new type of LEDs that came in long strips and each pixel contained an individually addressable red, green and blue pixel.  These projects were easy to hook up and the students could focus on programming the patterns on the LED strips.</p> <p>Dan's first \"kits\" contained an Arduino Nano and only 12 pixels.  But he could provide the kits to teachers, mentors, and students for under $25.  Since then the cost of both the microcontrollers and the LED strips have come down.  And since 2021 the curriculum has shifted from C on Arduino to Python on Picos and similar powerful but low-cost microcontrollers.</p> <p>Today, the Moving Rainbow systems include kits, instructions for building your own kits and extensive lesson plans on both the Pico and the Pico \"W\" (wireless).</p>"},{"location":"getting-started/about/#color-motion-fun-and-design","title":"Color, Motion, Fun and Design","text":"<p>So why pick this specific design?  At the center of this design is hundreds of hours of careful observation of students actually using these devices.  With each iteration, we continue to build, test, observe and change our design to meet the needs of our students.  Here is what we have learned:</p> <ol> <li>Kids love color</li> <li>Kids love motion</li> <li>Kids love to have their OWN devices to show their friends and family.  </li> </ol> <p>If they can take them home and show them off they take ownership of the skills they need to continually create and expand the features of these little devices.</p> <p>These principles are simple, but they are well-tested and we think they will persist even as technology progresses.  We expect to have more powerful devices and bigger and better displays.  But the stepping stones will remain.</p>"},{"location":"getting-started/about/#licenses","title":"Licenses","text":"<p>All Moving Rainbow curricula are licensed under Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0).  This means you can use and modify the materials in your classroom as long as you don't resell the content for profit.</p>"},{"location":"getting-started/about/#contact","title":"Contact","text":"<p>If you have further questions about the Moving Rainbow Project by contacting Dan on his LinkedIn page.  We are continually looking for schools, teachers, mentors and students that would like to promote computational thinking in our classrooms and at home.</p>"},{"location":"getting-started/batteries/","title":"Batteries for Potable LED Costumes","text":"<p>Although we start teaching how to program LED strips using a USB power source, after you master a few patterns it is time to go portable!  This guide will help you understand the tradeoffs of using different types of batteries on your projects.</p>"},{"location":"getting-started/batteries/#terminology","title":"Terminology","text":"<p>When we compare batteries, one of the first concepts to understand is how much energy a battery can hold. In this section we will use the concept of milliamp hours or mAh.  Although you don't need to know the details now, you should know that the bigger the number, the longer the battery will last.  A battery that stores 250 mAh is a small battery and will run out of power quickly. A battery pack that stores 10,000 mAh will power a large set of LED lights for many hours.</p>"},{"location":"getting-started/batteries/#types-of-batteries","title":"Types of Batteries","text":"<p>In this section we will learn about the seven major types of batteries we use to power our LED creations.</p> <p>Here are the types:</p> <ol> <li>Coin cell batteries (CR2052)</li> <li>Flat LiPo batteries</li> <li>AA AAA alkaline batters</li> <li>9-volt batteries</li> <li>Large LiPo Batteries in 18650 cells</li> <li>USB Battery Packs (various sizes)</li> </ol>"},{"location":"getting-started/batteries/#coin-cell-batteries","title":"Coin Cell Batteries","text":"<p>Coin cell batteries (like the CR2032) are small, round, flat batteries about the size of a nickel or quarter. They look like silver coins, which is how they got their name. These batteries are commonly found in watches, calculators, and small LED decorations.</p> <p>Key Features: - Capacity: Very small, typically 200-250 mAh - Voltage: 3 volts - Size: About 20mm diameter, very thin - Cost: $1-2 each</p> <p>When to Use Them: Coin cell batteries work well for very small LED projects with just 1-3 LED noodles or a single NeoPixel that you want to run for a few hours. They're great for simple blinking badges or small decorations where you need something tiny and lightweight.</p> <p>Limitations: - Not rechargeable - you throw them away when they're dead - Very limited power - can only light a few small LEDs - Only last 2-4 hours with LEDs running - Can't handle high-power LED strips</p> <p>Safety: These batteries are relatively safe, but keep them away from small children who might swallow them.</p>"},{"location":"getting-started/batteries/#flat-lipo-batteries","title":"Flat LiPo Batteries","text":"<p> This image shows a rechargeable LiPo battery that holds about 1,500 milliamp hours.</p>"},{"location":"getting-started/batteries/#aa-and-aaa-batteries","title":"AA and AAA Batteries","text":"<p>AA and AAA batteries are the most common batteries you'll find at any store. They're the cylindrical batteries used in TV remotes, flashlights, and toys. AA batteries are larger than AAA batteries, so they hold more energy.</p> <p>Key Features: - Capacity:   - AA: 2000-3000 mAh   - AAA: 800-1200 mAh - Voltage: 1.5 volts each (use 3 together for 4.5V to power 5V projects) - Cost: $0.50-2 per battery depending on type</p> <p>When to Use Them: AA and AAA batteries are excellent for LED costumes because: - Easy to find at any store - Safe for kids to handle - Battery packs are inexpensive (3-AA holders cost about $1) - Can power medium-sized LED strips for several hours - Available in rechargeable versions (NiMH)</p> <p>Testing</p> <p></p> <p>Testing AA battery packs is simple.  You can purchase a small battery tester on eBay for a few dollars. You can also use a volt-meter to check in the voltage is close to 1.5 volts.  A voltage of under 1.2 volts means the battery is low on power.</p> <p>Battery Pack Configuration: To power a 5-volt LED strip, use three AA batteries in a holder. Three batteries \u00d7 1.5V = 4.5V, which is close enough to 5V to work perfectly with NeoPixel strips.</p> <p>Limitations: - Bulkier and heavier than flat LiPo batteries - Battery holders can be awkward to attach to costumes - Non-rechargeable alkaline batteries create waste - Voltage drops as they drain (projects may get dimmer over time)</p> <p>Safety: Very safe - the most beginner-friendly battery option.</p>"},{"location":"getting-started/batteries/#usb-power-packs","title":"USB Power Packs","text":"<p>USB power packs (also called portable chargers or power banks) are the rechargeable battery packs used to charge phones on the go. They have USB ports that output 5 volts - perfect for LED projects!</p> <p>Key Features: - Capacity: Varies widely from 2,000 mAh (small) to 20,000+ mAh (large) - Voltage: 5 volts (exactly what NeoPixels need!) - Weight: Ranges from 2 oz (small) to 12 oz (large) - Cost: $10-30 depending on capacity</p> <p>When to Use Them: USB power packs are ideal for larger LED projects: - Perfect for 30-144 pixel LED strips - Can power your project for many hours (even all night) - Rechargeable via any USB charger - Easy to connect with a USB cable - Built-in safety circuits prevent overcharging and short circuits</p> <p>Choosing the Right Size: - Small (5,000 mAh): Powers 30 LEDs for 4-6 hours - Medium (10,000 mAh): Powers 60 LEDs for 6-8 hours - Large (20,000 mAh): Powers 144 LEDs all night long</p> <p>Limitations: - Heavier than other options (can feel heavy in pockets) - More expensive initially (but saves money over time) - Size can be bulky for small costumes - Some auto-shutoff if current draw is too low</p> <p>Safety: Very safe - includes multiple protection circuits. Great for beginners and advanced users.</p>"},{"location":"getting-started/batteries/#lipo-batteries","title":"LiPo Batteries","text":"<p>Warning</p> <p>LiPo batteries are much more dangerous than traditional alkaline batteries. If not handled properly they may catch on fire. Although LiPo batteries can hold far more power, they should not be used with small children without adult supervision.</p> <p>LiPo (Lithium Polymer) batteries are rechargeable flat batteries commonly used in drones, RC cars, and professional electronics. They pack a lot of energy into a thin, lightweight package.</p> <p>Key Features: - Capacity: Typically 500-2000 mAh for costume use - Voltage: 3.7 volts (one cell) - Weight: Very light - much lighter than AA batteries for the same capacity - Cost: $5-15 depending on capacity - Shape: Flat rectangular pouches that fit nicely in costumes</p> <p>When to Use Them: LiPo batteries are excellent when you need: - Lightweight power for wearable projects - Thin profile to hide in costume seams - Good capacity without bulk - Professional-looking installations</p> <p>Important Safety Rules:</p> <ol> <li>Never puncture or cut a LiPo battery - it can catch fire</li> <li>Don't overcharge - use proper LiPo chargers only (see charging section below)</li> <li>Don't over-discharge - never drain below 3.0V per cell</li> <li>Watch for puffing - if battery swells up, stop using immediately</li> <li>Store safely - keep at room temperature, away from metal objects</li> <li>Use protection circuits - always use a charging/protection board</li> </ol> <p>Limitations: - Requires special handling and charging circuits - Can be dangerous if mishandled - Need protection circuits to prevent damage - More expensive than alkaline batteries - Require adult supervision for young students</p> <p>Safety: Medium to high risk - requires knowledge and care. Only use with adult supervision and proper charging equipment.</p>"},{"location":"getting-started/batteries/#9-volt-batteries","title":"9-Volt Batteries","text":"<p>9-volt batteries are rectangular batteries with two snap connectors on top. You'll recognize them from smoke detectors and guitar effects pedals.</p> <p>Key Features: - Capacity: 400-600 mAh (relatively small) - Voltage: 9 volts (too high for NeoPixels without a voltage regulator) - Size: Small rectangular shape - Cost: $3-5 per battery</p> <p>When to Use Them: 9-volt batteries are not ideal for LED strips because: - The 9V output is too high - you need a voltage regulator to step down to 5V - Relatively low capacity means short run time - More expensive per mAh than other options - Not commonly used in modern LED projects</p> <p>Better Alternatives: Instead of 9V batteries, consider: - Three AA batteries (4.5V, much higher capacity) - USB power packs (5V, rechargeable) - LiPo batteries with proper circuits (3.7V, lightweight)</p> <p>Limitations: - Requires voltage regulator (adds cost and complexity) - Poor capacity compared to alternatives - Inefficient for LED applications - Battery snaps can come loose easily</p> <p>When They Make Sense: The only time to use a 9V battery is if you already have one and need a quick temporary test. For any real project, choose a different battery type.</p> <p>Safety: Safe to handle like AA batteries.</p>"},{"location":"getting-started/batteries/#18650-cells","title":"18650 Cells","text":"<p>18650 cells are cylindrical rechargeable lithium batteries that look like oversized AA batteries. The name \"18650\" comes from their size: 18mm diameter and 65mm long. These are the same batteries used in laptop battery packs and electric cars.</p> <p>Key Features: - Capacity: 2000-3500 mAh per cell - Voltage: 3.7 volts per cell - Size: About the size of two AA batteries - Cost: $5-10 per cell - Lifespan: Can be recharged 500-1000 times</p> <p>When to Use Them: 18650 cells are great for advanced projects: - Very high capacity in a small size - Excellent for projects needing long runtime - Used in multi-cell packs (2S = 7.4V, 3S = 11.1V) - Professional-grade power solution - Can handle high current draw</p> <p>Important Notes: - Must be purchased with protection circuits built in - Need a special charger or charging module - Multiple cells should be matched (same capacity and age) - Require battery holders or spot-welding to connect</p> <p>Safety Considerations: - Similar safety concerns to LiPo batteries - Must use cells with protection circuits - Never use damaged cells - Requires proper charging equipment - Adult supervision recommended</p> <p>Limitations: - More advanced option requiring electronics knowledge - Need special chargers or charging circuits - Cylindrical shape harder to hide in costumes - Requires proper battery holders - Can be dangerous if not handled properly</p> <p>When They Make Sense: Use 18650 cells for: - High-power LED installations - Long-runtime projects (all-night events) - Projects where you're already using them (existing battery packs) - When you need maximum capacity in a small space</p> <p>Safety: Medium to high risk - similar to LiPo batteries. Requires knowledge and adult supervision.</p>"},{"location":"getting-started/batteries/#comparison-table","title":"Comparison Table","text":"Battery Type Capacity (mAh) Voltage Rechargeable Danger Level Best For Cost Coin Cell (CR2032) 200-250 3V No Low Tiny 1-3 LED projects, badges $1-2 each AA Batteries (3\u00d7) 2000-3000 4.5V Optional* Low Beginner costumes, medium LED strips $1.50-6 for 3 AAA Batteries (3\u00d7) 800-1200 4.5V Optional* Low Small lightweight projects $1-4 for 3 USB Power Pack 2000-20000+ 5V Yes Low Large LED strips, all-night events $10-30 Flat LiPo 500-2000 3.7V Yes Medium-High Professional wearables, thin profile $5-15 9-Volt 400-600 9V** Optional* Low Not recommended for LEDs $3-5 18650 Cells 2000-3500 3.7V Yes Medium-High High-power, long-runtime projects $5-10 each <p>* Rechargeable NiMH versions available ** Requires voltage regulator for LED use</p>"},{"location":"getting-started/batteries/#quick-selection-guide","title":"Quick Selection Guide","text":"<p>For Beginners (Ages 8-12): - Start with 3 AA batteries - safest and easiest option - Upgrade to USB power pack when comfortable</p> <p>For Intermediate Students (Ages 13+): - Use USB power packs for most projects - Try flat LiPo batteries with adult supervision for wearables</p> <p>For Advanced Projects: - Flat LiPo with protection circuits for professional wearables - 18650 cells for maximum capacity in compact size - Always use proper charging circuits and adult supervision</p>"},{"location":"getting-started/batteries/#battery-life-calculator","title":"Battery Life Calculator","text":"<p>Battery Life Calculator</p>"},{"location":"getting-started/batteries/#lipo-battery-charging-modules","title":"LiPo Battery Charging Modules","text":"<p>Many of our projects use rechargeable LiPo batteries.  However, we can't just plug these into a 5v source to recharge them.  We need a small circuit that will do two things:</p> <ol> <li>Limit the current that goes into the batter when charging</li> <li>Cut off the battery when it is draining to make sure that it does not fully drain the battery.  Draining a LiPo battery fully can reduce it's recharging potential</li> </ol> <p>There are two main types of battery charing boards that we use in our projects.  They have different power ratings. They both cost around $1 on eBay.</p> <p></p>"},{"location":"getting-started/batteries/#tc4056-1-amp-lipo-battery-charger","title":"TC4056 1 Amp LiPo Battery Charger","text":"<p>This is the most common and is fine for most projects that don't need high current for fast recharging. It is called a \"linear charger\"</p> <p>Search for \"TC4056\" on eBay</p>"},{"location":"getting-started/batteries/#ip2312-3-amp-lipo-battery-charger","title":"IP2312 3 Amp LiPo Battery Charger","text":"<p>The IP2312 is a higher power version of the charger. It is used when you have larger batteries and want faster charging.</p> <p>Search for \"IP2312\" on eBay</p> <p>IP2312 Polymer Ternary Lithium Fast Charging Board Type-C USB Input IP2312 Chip</p> <p>I'd be happy to compare the TC4056 and IP2312 LiPo battery management boards for powering LED strips. Let me search for the most up-to-date information about these boards to give you an accurate comparison.</p>"},{"location":"getting-started/batteries/#tc4056-vs-ip2312-lipo-battery-management-boards-comparison","title":"TC4056 vs IP2312 LiPo Battery Management Boards Comparison","text":"<p>Based on my research, here's a detailed comparison of the TC4056 and IP2312 LiPo battery management boards for powering LED strips:</p>"},{"location":"getting-started/batteries/#tc4056-overview","title":"TC4056 Overview","text":"<p>The TC4056 (also known as TP4056) is a widely used linear charging controller IC for single-cell lithium-ion/LiPo batteries with the following characteristics:</p> <ul> <li>Uses constant-current/constant-voltage (CC/CV) charging method</li> <li>Maximum charging current of 1A, programmable through an external resistor (Rprog)</li> <li>Fixed charging voltage of 4.2V</li> <li>Thermal feedback to automatically adjust charging current to limit chip temperature</li> <li>Input voltage range of 4V-8V, making it compatible with USB power</li> </ul> <p>Protection features (when paired with protection circuits like DW01A): - Overcharge protection (safely charges to 4.2V) - Overcurrent and short-circuit protection - Trickle charge for battery reconditioning</p>"},{"location":"getting-started/batteries/#ip2312-overview","title":"IP2312 Overview","text":"<p>The IP2312 is a newer alternative battery management IC with key differences:</p> <ul> <li>Uses synchronous switch step-down (buck converter) charging architecture</li> <li>Maximum charging current of 3A (three times that of TC4056)</li> <li>Very high charging efficiency of 94% at 3.7V/2A</li> <li>Integrates all protection features in a single IC</li> <li>Operating frequency of 750KHz</li> <li>Supports intelligent current adjustment to prevent pulling on adapters</li> </ul>"},{"location":"getting-started/batteries/#key-differences","title":"Key Differences","text":""},{"location":"getting-started/batteries/#1-charging-efficiency-and-heat-dissipation","title":"1. Charging Efficiency and Heat Dissipation","text":"<ul> <li> <p>TC4056: Uses linear voltage regulation which dissipates excess energy as heat, making it less efficient. This leads to significant heat generation during charging, particularly at higher currents.</p> </li> <li> <p>IP2312: Uses a buck converter architecture rather than linear regulation, achieving 94% conversion efficiency. This results in very little heat production even when charging at full potential.</p> </li> </ul>"},{"location":"getting-started/batteries/#2-maximum-charging-current","title":"2. Maximum Charging Current","text":"<ul> <li> <p>TC4056: Limited to 1A maximum charging current.</p> </li> <li> <p>IP2312: Supports up to 3A charging current, making it suitable for larger capacity batteries or faster charging.</p> </li> </ul>"},{"location":"getting-started/batteries/#3-integration","title":"3. Integration","text":"<ul> <li> <p>TC4056: Typically requires additional ICs (like DW01A and 8205A) for complete battery protection.</p> </li> <li> <p>IP2312: Has all protection features integrated in a single IC, simplifying board design and reducing component count.</p> </li> </ul>"},{"location":"getting-started/batteries/#4-real-world-performance","title":"4. Real-world Performance","text":"<p>In direct comparisons: - The IP2312 produces much less heat than the TC4056 when charging at comparable currents - The IP2312's charging current gradually reduces as battery voltage increases, starting at maximum when the battery is fully discharged and then reducing to a nominal value of 1.5-1A</p>"},{"location":"getting-started/batteries/#pros-and-cons-for-led-strip-power-applications","title":"Pros and Cons for LED Strip Power Applications","text":""},{"location":"getting-started/batteries/#tc4056","title":"TC4056","text":"<p>Pros: - Widely available and very inexpensive - Simple circuit design - Well-documented with extensive community support - Adequate for smaller LED strips with lower power requirements - Works well with USB power sources</p> <p>Cons: - Significant heat generation limits practical charging current - Lower efficiency means wasted power - May require heat sinks for sustained operation - Not ideal for high-power LED strips due to current limitations - Should not be used to simultaneously charge a battery and power a load</p>"},{"location":"getting-started/batteries/#ip2312","title":"IP2312","text":"<p>Pros: - Much higher efficiency (94%) means less wasted power - Minimal heat generation even at high currents - Higher charging current (up to 3A) supports larger batteries - All-in-one solution with integrated protection - Better suited for high-power LED strip applications</p> <p>Cons: - Less widely available than TC4056 - Typically more expensive - Less community documentation and support - More complex implementation</p>"},{"location":"getting-started/batteries/#tradeoffs-for-powering-led-strips","title":"Tradeoffs for Powering LED Strips","text":"<p>When powering LED strips from LiPo batteries, these tradeoffs are important to consider:</p> <ol> <li> <p>Power Requirements: For high-power LED strips (&gt;1A), the IP2312 is clearly superior due to its higher current capability and efficiency.</p> </li> <li> <p>Heat Management: The TC4056's heat generation can be problematic in enclosed spaces or when powering LED strips for extended periods, while the IP2312's higher efficiency results in cooler operation.</p> </li> <li> <p>Battery Life: The IP2312's higher efficiency translates to less energy wasted during charging, potentially extending battery life and providing more power to your LED strips.</p> </li> <li> <p>Cost vs Performance: The TC4056 is adequate and cost-effective for smaller, lower-power LED strips, while the IP2312 is worth the additional cost for high-power applications or where efficiency is critical.</p> </li> <li> <p>Simultaneous Operation: If you need to power LED strips while charging the battery, the IP2312 is better suited due to its design, although proper circuit design is still important.</p> </li> </ol> <p>In conclusion, for powering LED strips, the IP2312 offers superior performance, particularly for high-brightness or extended use cases, while the TC4056 remains a viable economical option for lower-power applications where maximum efficiency isn't critical.</p>"},{"location":"getting-started/batteries/#references","title":"References","text":"<p>Components 101: TP4056A Li-ion Battery Charging/Discharging Module</p>"},{"location":"getting-started/connections/","title":"Circuit Connections","text":"<p>Because this guide is focused on teaching computational thinking, we don't spend much time on circuits and wiring diagrams.  We try to keep the circuits and wiring diagrams as simple as possible.</p> <p>For the basic NeoPixel strip are only three wires you need to connect only three wired for the basic project.</p> <ol> <li>The LED strip GND </li> <li>The LED strip power (+5)</li> <li>The LED strip data</li> </ol> <p></p>"},{"location":"getting-started/desktop-setup/","title":"Desktop Setup","text":"<p>In this lesson, we will review the steps to get your PC or Mac setup to use the free open source Thonny Python Integrated Development Environment (IDE).  We will assume you are using either the Raspberry Pi Pico or the Raspberry Pi Pico \"W\" for thee lessons.</p>"},{"location":"getting-started/desktop-setup/#about-thonny","title":"About Thonny","text":"<p>Thonny is an ideal tool for writing MicroPython code for students just getting started.  It is free, simple to use, and it runs on PCs running Windows, Macs and Linux systems such as the Raspberry Pi.</p>"},{"location":"getting-started/desktop-setup/#step-1-install-thonny","title":"Step 1: Install Thonny","text":"<p>The installation of Thonny will vary depending on the type of computer you are using.  For both Windows and Mac, you must first download an installer program. The links to these downloads are on the main Thonny page:</p> <p></p> <p>For all the versions of Linux, you can open the command shell and type in the correct installation command.  For people using the Raspberry Pi operating system, Thonny may already be included in your software.</p>"},{"location":"getting-started/desktop-setup/#thonny-versions","title":"Thonny Versions","text":"<p>These screen images were done with Thonny Version 4.0.4.  We also tested the steps on Thonny version 4.1.2 and the seem to work fine.</p>"},{"location":"getting-started/desktop-setup/#step-2-configure-the-micropython-firmware","title":"Step 2: Configure the MicroPython Firmware","text":"<p>After you first plug in a Raspberry Pi Pico, you will need to install the correct runtime library for the Pico.  This just takes a minute and you will only have to do it once for each microcontroller.</p> <p>Since version 4.0.0 Thonny can detect the microcontroller you are using and download the firmware.</p>"},{"location":"getting-started/desktop-setup/#manually-downloading-the-firmware","title":"Manually Downloading the Firmware","text":"<p>There are occasions when the automatic firmware download in Thonny may not work.  In this case, you will need to manually download the firmware from the MicroPython website.</p> <p>Here are the links to the Pico Firmware (called RP2-pico):</p> <p>Raspberry Pi Pico Firmware</p> <p></p>"},{"location":"getting-started/desktop-setup/#step-3-configure-interpreter","title":"Step 3: Configure Interpreter","text":"<p>Thonny is designed to automatically detect the correct device and configure the right interpreter.  You can verify this by using the Thonny Tools -&gt; Options menu and move to the Interperter tab.</p> <p></p> <p>Note that the MicroPython (Raspberry Pi Pico) is selected.</p>"},{"location":"getting-started/desktop-setup/#thonny-firmware-list","title":"Thonny Firmware List","text":"<p>You can also get a list of all the different versions of firmware by going directly to the MicroPython site.  Here is what that list will look like:</p> <p></p> <p>After you select a runtime version, Thonny will give you the details about this version.</p> <p></p> <p></p> <p>After Thonny installs the new firmware on the Pico it instructs the Pico to \"restart\" using the new firmware.  This makes the USB drive appear to be removed without a disconnect and results in an error.  This is normal so don't worry.</p> <p></p> <p></p>"},{"location":"getting-started/desktop-setup/#debugging-tips","title":"Debugging Tips","text":"<p>When debugging your Thonny installation, it is important to understand the steps that happen when you plug your Raspberry Pi Pico into the computer.</p> <p>Step 1: Plugging the USB Device The Pico appears as a USB device on your computer when you plug it in.  The operating system should send a request to the USB device asking it for its ID.</p> <p>Step 2: Probing for the USB ID The Pico will respond with a device ID number.  This number reflects two items: the company that made the device (Vendor ID) and the device product type (Product ID).  If you are using a power-only USB cable this number will never get to the operating system.  This means that the data wires are not present in your USB cable or one of the wires is broken or not connecting.</p> <p>Step 3: Looking Up the USB Driver The operating system will take this USB ID and then look-up the right software and then run that software.  In UNIX and Mac systems this will amount to making the USB device appear in the <code>/dev/cu*</code> area.  On Windows it will be a COM port.</p> <pre><code>ls -l /dev/cu.usb*\n\ncrw-rw-rw-  1 root  wheel  0x9000001 Dec 25 08:41 /dev/cu.usbmodem101\n</code></pre> <p>Note that the exact port name might change.  The example above is <code>cu.usbmodem101</code>.</p> <p>If this device does not immediately appear, then you should double-check your cable and make sure the operating system registers the USB device.</p> <p>If you know your cable works fine by testing it on other devices then you may have to reboot your computer.</p>"},{"location":"getting-started/desktop-setup/#automatic-power-draw-shutoff","title":"Automatic Power Draw Shutoff","text":"<p>If your USB port is drawing too much power, then many computers will disable the port.  This can happen if you are trying to display too many LEDs or a motor.  You will see a message such as \"USB Port Disabled\". </p> <p>Your computer manufacturer will tell you what the maximum current each USB port allows.  This is typically about 1 amp, but it varies based on your computer and what other devices are connected to your computer.</p> <p>The best way to debug this is to purchase a low-cost USB current monitor and monitor how much current your project is using.  If you are using an LED-strip then make sure you test the current with all the pixels fully on (255,255,255).</p> <p>USB Current Monitor Search on eBay</p> <p>In general, each NeoPixel at full brightness will draw up to 20 milliamps and the Pico will also draw about 20  milliamps.</p> <p>For projects that require more than about 500 milliamps, it is strongly recommended that you use an externally powered USB hub.</p>"},{"location":"getting-started/desktop-setup/#debugging-the-usb-port","title":"Debugging the USB Port","text":""},{"location":"getting-started/desktop-setup/#mac-system-profiler","title":"Mac System Profiler","text":"<p>On MacOS we can use the <code>system_profiler</code> command:</p> <pre><code>system_profiler SPUSBDataType\n\nUSB:\n\n    USB 3.1 Bus:\n\n      Host Controller Driver: AppleT8112USBXHCI\n\n    USB 3.1 Bus:\n\n      Host Controller Driver: AppleT8112USBXHCI\n\n        Board in FS mode:\n\n          Product ID: 0x0005\n          Vendor ID: 0x2e8a\n          Version: 1.00\n          Serial Number: e66141040396962a\n          Speed: Up to 12 Mb/s\n          Manufacturer: MicroPython\n          Location ID: 0x00100000 / 1\n          Current Available (mA): 500\n          Current Required (mA): 250\n          Extra Operating Current (mA): 0\n</code></pre> <p>Note that you can see both the Product ID, Vendor ID Manufacturer (MicroPython) and the mode (File System mode) that the device was connected.  The current available and current required are also listed, although these numbers might be somewhat conservative.  They are used for the estimation of current only.</p>"},{"location":"getting-started/desktop-setup/#checking-out-the-moving-rainbow-code-from-github","title":"Checking out the Moving Rainbow Code from GitHub","text":"<p>You don't need to copy and paste the code samples one-by-one into your local file system.  GitHub allows you to download all the code on the Moving Rainbow site by running the following command:</p> <pre><code># create a projects area to checkout your code\nmkdir ~/projects\ncd projects\n# make a copy of the repo on your local hard drive\ngit clone https://github.com/dmccreary/moving-rainbow\ncd moving-rainbow\n# open the files in your file manager\nopen .\n</code></pre> <p>You can now go directly to the source for the LED strip labs that have two buttons:</p> <pre><code>cd src/led-strip-two-buttons\n</code></pre> <p>Once you have done this step you can make the top Files region of Thonny point to the source area and then click the upper right corner that has the \"Upload to /\" menu.  Make sure the bottom area is set to the root, not the /lib area.</p> <p>The following video shows these steps:</p>"},{"location":"getting-started/desktop-setup/#understanding-thonny-and-file-systems","title":"Understanding Thonny and File Systems","text":"<p>To understand how Thonny works, we want to have a clear visual picture of the two parallel file systems that Thonny uses.</p> <ol> <li>Thonny is launched from your desktop or laptop computer.  The Files window at the top will always be open to that file system.</li> <li>Thonny also displays the file system on the microcontroller on the bottom window.  It displays this window after you successfully connect through the correct port.</li> </ol> <p>You can run a program in Thonny from either file system.  But there is one strict rule.  If you don't save your code on your personal GitHub site and verify that the code is there you may not have saved your code.</p>"},{"location":"getting-started/dev-boards/","title":"Moving Rainbow Development Boards","text":""},{"location":"getting-started/dev-boards/#raspberry-pi-pico","title":"Raspberry Pi Pico","text":"<p>Raspberry Pi Pico webpage</p> <p></p> <p>Raspberry Pi Pico Pinout</p>"},{"location":"getting-started/dev-boards/#rp2040-zero","title":"RP2040-Zero","text":"<p>Waveshare.com Web Page</p> <ul> <li>RP2040 microcontroller chip designed by Raspberry Pi in the United Kingdom.</li> <li>Dual-core Arm Cortex M0+ processor, flexible clock running up to 133 MHz.</li> <li>264KB of SRAM, and 2MB of on-board Flash memory.</li> <li>USB-C connector, keeps it up to date, easier to use.</li> <li>The castellated module allows soldering direct to carrier boards.</li> <li>USB 1.1 with device and host support.</li> <li>Low-power sleep and dormant modes.</li> <li>Drag-and-drop programming using mass storage over USB.</li> <li>29 \u00d7 multi-function GPIO pins (20\u00d7 via edge pinout, others via solder points).</li> <li>2 \u00d7 SPI, 2 \u00d7 I2C, 2 \u00d7 UART, 4 \u00d7 12-bit ADC, 16 \u00d7 controllable PWM channels.</li> <li>Accurate clock and timer on-chip.</li> <li>Temperature sensor.</li> <li>Accelerated floating-point libraries on-chip.</li> <li>8 \u00d7 Programmable I/O (PIO) state machines for custom peripheral support.</li> </ul> <p></p>"},{"location":"getting-started/github-summary/","title":"Moving Rainbow GitHub Summary","text":"<p>We like to keep things simple, or at least as simple as possible.  To allow our participants to get our source code and then make changes that are added, there are only six git commands that we need:</p> <ol> <li>clone - used to pull down the repo to your local computer</li> <li>pull - used to get updates from the GitHub repository</li> <li>add - add individual files to a local update package</li> <li>commit - wrap adds into a transaction package with a comment</li> <li>push - push your package up to the server</li> <li>status - get status on your local repository status</li> </ol>"},{"location":"getting-started/github-summary/#installing-git","title":"Installing Git","text":"<p>Before you begin, you will need to make sure that the git command line tools are working on your computer. You can find detailed installation instructions at the Git Book Chapter on Getting Started Installing Git.</p> <p>Note</p> <p>On a Mac you will get the following message the first time you try to run git for the first time.  This is normal.</p> <p>~</p>"},{"location":"getting-started/github-summary/#git-clone","title":"Git Clone","text":"<p>This command copies the latest version of our GitHub repository to your local file system.  Let's pull all our GitHub repositories together in a folder called \"projects\" off of our home directory.  This is called the tilde or \"~\" directory.</p> <p>Here is a sample shell script you can run</p> <pre><code># create a projects area to checkout your code\nmkdir ~/projects\ncd projects\n# make a copy of the repo on your local hard drive\ngit clone https://github.com/dmccreary/moving-rainbow\ncd moving-rainbow\n# open the files in your file manager\nopen .\n</code></pre>"},{"location":"getting-started/github-summary/#git-pull","title":"Git Pull","text":"<p>If you have been away from the project for a while, you will want to refresh your local code.  You can also do this if a co-worker has just made a change you wnat to include.</p> <pre><code>cd ~/projects/moving-rainbow\ngit pull\n</code></pre>"},{"location":"getting-started/github-summary/#git-add","title":"Git Add","text":"<p>After you have made local changes to the Moving Rainbow source code or documentation, you might want to set up a \"change set\" and share it with others.  You can create your own directory under the moving-rainbow/src area and add your new programs there.  Once you have done that you can run the following example:</p> <pre><code>cd ~/projects/moving-rainbow\nmkdir src/mycode\n# copy your new code to the src/mycode directory\ngit add src/mycode/*\n</code></pre> <p>You can keep doing this until your code is all tested.  Now you are read to commit the changes as a transaction.</p>"},{"location":"getting-started/github-summary/#git-commit","title":"Git Commit","text":"<p>In the last git add command we were just adding code without any comments.  Now we want to wrap all these changes up in a package and tell others why we are adding the code or making changes.  Here is that command:</p> <pre><code>git commit -m \"Adding my new sample patters\"\n</code></pre> <p>This command creates a package with a commit message. Your message should indicate why you are making the change. Git has great tools to tell you what lines changed, but it does not know why a change was made.  This is your job.</p> <p>Note that these changes are all collected locally.  The GitHub server has not yet been changed.</p>"},{"location":"getting-started/github-summary/#git-push","title":"Git Push","text":"<p>The final step is to push your package up to the central GitHub server.  This is done with a simple command:</p> <pre><code>git push\n</code></pre> <p>This should generate a dialog such as the following:</p> <pre><code>Enumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (4/4), 404 bytes | 404.00 KiB/s, done.\nTotal 4 (delta 2), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo https://github.com/dmccreary/moving-rainbow.git\n   efad633..68fdeae  master -&gt; master\n</code></pre> <p>If you have hundreds of large files or documentation with large images this step can take a few minutes.  It depends on how busy the servers are, what your ISP upload speed is and other factors such as network congestion.</p>"},{"location":"getting-started/github-summary/#checking-your-status","title":"Checking Your Status","text":"<p>After you are done, you can check your git status:</p> <pre><code>git status\n</code></pre> <p>This will return a text message such as:</p> <pre><code>On branch master\nYour branch is up to date with 'origin/master'.\n</code></pre>"},{"location":"getting-started/kits/","title":"Moving Rainbow Kits","text":"<p>These lesson plans are designed to be used with a Raspberry Pi Pico and an addressable LED strip.  The total parts cost is typically under $10</p> <p></p>"},{"location":"getting-started/kits/#standard-parts","title":"Standard Parts","text":"<p>Our standard kit contains the following parts:</p> <ol> <li>Microcontroller - A Raspberry Pi Pico (\\(4) or \"W\" (\\)6).  We often solder our own headers in, but if you are not familiar with soldering you can purchase them with header pins soldered in place.</li> <li>Breadboard - A 1/2-size solderless breadboard (400 ties) ($2)</li> <li>LED Strip - A 60-LED/meter addressable RGB LED strip (WS2812B) ($4).  We purchase 1-meter strips and cut them in half and solder connectors on the ends.  You can also purchase NeoPixel rings, arrays and fairy lights.  Fairy lights are ideal for costumes but the thin wires are easily damaged.</li> <li>Headers - 3 terminal screw headers (optional) - This makes it easier to connect and disconnect the LED strip connections without soldering.</li> <li>Buttons - Two momentary push buttons.  We purchase these in packages of 100 to keep the per-button cost down.</li> <li>Wire - 22 gauge insulated wires.  We get red, black wire for power and ground and other colors for data.  We use yellow wire for the data connections.</li> <li>LED Strip Connectors - Many of the LED strips come with a somewhat standardized 3-pin connector.  This is often called a 3-pin SM JST connector.  It is designed so the users can't plug in the LED strip incorrectly.  Only about 1/2 of our current kits use these connectors.</li> </ol>"},{"location":"getting-started/kits/#optional-parts","title":"Optional Parts","text":""},{"location":"getting-started/kits/#usb-connectors","title":"USB Connectors","text":"<p>Most of our classrooms will also have the right USB cables for these boards.  If you have a PC or a Mac you will need a USB-A-to-micro-USB or for a Mac, you will need USB-C-to-micro-USB connector.</p>"},{"location":"getting-started/kits/#batteries-and-battery-packs","title":"Batteries and Battery Packs","text":"<p>If you are using these kits to make a costume, you can also purchase a battery pack that holds 3 AA batteries or a USB power pack used to recharge phones.  We find that even the small 2,500 milliamp hour packs will power a costume of 60 LEDs for many hours (depending on the brightness of the pattern)</p>"},{"location":"getting-started/kits/#led-strip-and-rings","title":"LED Strip and Rings","text":"<p>There are hundreds of variations of WS2812B LED strips and fairy lights.  We usually purchase them in 1-meter strips with 60 pixels per meter.  Since 2020 there are now very lightweight fairy lights that are ideal for lighting up costumes.</p> <p>EBay Search for SW2812B</p> <p>If you are creating costumes that might get wet in the rain, we suggest getting the versions that are encased in a waterproof silicon tube or in a waterproof silicon coating.</p>"},{"location":"getting-started/kits/#led-fairy-lights","title":"LED Fairy Lights","text":""},{"location":"getting-started/parts/","title":"Purchasing Moving Rainbow Strip Parts","text":"<p>In many school-based programs and coding clubs, the parts used in these lessons will be purchased for you.  Very often they will be pre-assembled and all the software preloaded before the classes begin.  This guide is for mentors, parents and students who would like to build personal systems at home.</p> <p>You can easily create personal projects based on the Moving Rainbow kits and software.  You can do this by purchasing parts on online sites such as eBay or Amazon.  Here is an eBay search for \"WS2812b led strip\":</p> <p>Search eBay for WS2812b LED strip</p> <p>Note that the term \"WS2812b\" is technically the name of the integrated </p> <p>If you are a good planner you can purchase parts from China that take longer to arrive,  but they can cost significantly less than parts that ship overnight on Amazon. This guide provides sample links to both eBay and Amazon, but be aware that these sites change frequently.</p>"},{"location":"getting-started/parts/#ws-2812b-led-strip","title":"WS-2812B LED Strip","text":"<p>You can purchase the LED strips for around $3.00 per meter if you shop around on eBay. The above was from seller btflightingcom. We use the 60 pixels/meter type without waterproofing for our indoor classes.  People who create costumes use waterproof varieties.</p>"},{"location":"getting-started/parts/#ip-waterproofing-ratings","title":"IP Waterproofing Ratings","text":"<p>IP stands for \"Ingress Protection\" or how the strips will hold up in costumes or different outdoor environments.</p> <p>In general, there are three varieties of waterproofing we find when purchasing LED strips.</p> <ol> <li>IP20 - Not Waterproof - least expensive and good for general indoor classroom use when the LED strips can be attached to a plastic strip to avoid bending</li> <li>IP65 - Waterproof (Silicon Coating) - ideal for take-home projects and costumes</li> <li>IP67 - Waterproof (PVC Tube) - perfect for outdoor applications</li> </ol> <p>The IP ratings you mentioned for WS2812B LED strips refer to their level of waterproofing and dust resistance. Each rating is defined as follows:</p>"},{"location":"getting-started/parts/#ip20","title":"IP20:","text":"<p>The first digit (2) indicates the level of protection against solid objects, including body parts like fingers and objects such as tools and wires. A rating of 2 means that the object is protected against solid objects larger than 12.5mm (such as fingers).</p> <p>The second digit (0) indicates the level of protection against liquids. A rating of 0 means there is no protection against liquids.</p> <p>Summary: IP20 means that the LED strip is not waterproof and has minimal protection against solid objects. It's suitable for indoor use where it won't be exposed to water.</p>"},{"location":"getting-started/parts/#ip65","title":"IP65:","text":"<p>The first digit (6) indicates a high level of protection against solid objects, including dust. This means it's completely dust-tight. The second digit (5) refers to protection against water jets. This means the LED strip is protected against low-pressure water jets from any direction.</p> <p>Summary: IP65 means the LED strip is dust-tight and can withstand low-pressure water jets, making it suitable for outdoor use or in environments where it might get wet, like kitchens or bathrooms.</p>"},{"location":"getting-started/parts/#ip67","title":"IP67","text":"<p>The first digit (6) is the same as in IP65, indicating complete protection against dust. The second digit (7) indicates a higher level of water protection. It means the LED strip can be submerged in water up to 1 meter in depth for up to 30 minutes.</p> <p>Summary: IP67 means the LED strip is both dust-tight and can handle temporary immersion in water. This makes it ideal for outdoor applications and environments where the strip might be submerged briefly, such as around pools or in certain landscape lighting scenarios.</p> <p>Note, some of these parts are also called \"NeoPixels\".</p> <p></p> <p>NeoPixels are parts that contain three LEDs and logic to process an incoming data stream.  Each NeoPixel will look at the incoming data and extract the 8-bit values for its own red, green and blue LED brightness.  It then sends the data signal on to the next NeoPixel.</p> <p></p>"},{"location":"getting-started/parts/#soldering","title":"Soldering","text":"<p>Many of the parts you purchase online might require some soldering to make them easy to use.  We recommend that you get a soldering iron and solder and watch a YouTube video on how to solder.  Kids should always have adult supervision and you should check with your school or classroom policy before you bring a soldering iron to school.</p>"},{"location":"getting-started/parts/#headers","title":"Headers","text":"<p>Many of the Pico's don't come with headers.  You can purchase 100 40-pin breakaway headers for about $10 dollars on e-Bay.</p> <p>Part Description: 40-Pin Male Header 0.1\" 2.54mm Connectors</p>"},{"location":"getting-started/parts/#microcontrollers","title":"MicroControllers","text":""},{"location":"getting-started/parts/#raspberry-pi-pico","title":"Raspberry Pi Pico","text":"<p>We use the Raspberry Pi Pico (far left) because it only costs about $4.</p> <p></p> <p>It also mounts directly on the breadboard after we add the header pins.</p>"},{"location":"getting-started/parts/#neopixels","title":"NeoPixels","text":""},{"location":"getting-started/parts/#header-pins","title":"Header Pins","text":"<p>If your Microcontrollers do not come with header pins, you can purchase about 100 of them on e-Bay for about $11.</p> <p>100pcs Pitch 1x40 Pins 2.54mm Male Single Row Male Pin Header Strip</p>"},{"location":"getting-started/parts/#breadboards","title":"Breadboards","text":"<p>We use 400-tie 1/2 size breadboards.  You can purchase them on E-Bay for around $1.50 each in quantity 10.</p> <p></p>"},{"location":"getting-started/parts/#momentary-push-buttons","title":"Momentary Push Buttons","text":"<p>Tactile Switches</p> <p></p> <p>We use these buttons </p> <p>Part Description: 100PCS B3F-4055 12127.3 Tactile Switch 12x12x7.3mm</p> <p></p> <p>The caps are 140PCS Round Tactile Button Cap Kits 9.585.1mm for 1212*7.3mm Tact Switch on eBay</p> <p></p>"},{"location":"getting-started/parts/#screw-headers","title":"Screw Headers","text":"<p>We attach screw headers to the plexiglass base that we put the kits on.  This allows us to change the LED strip or ring for each project with just a screwdriver.  This is key because many classrooms don't allow soldering irons in the classrooms.</p> <p> </p> <p>We purchase screw headers on eBay</p>"},{"location":"getting-started/parts/#led-strip-3-pin-sm-jst-connectors","title":"LED Strip 3-Pin SM JST Connectors","text":"<p>We purchase our LED strips in 1-meter lengths of 60 pixels per meter.  When they arrive, they have both a male and a female 3-pin SM JST connector on the ends. This allows these LED strips to be connected end-to-end for strips that are longer than 1 meter.</p> <p>LED Strip 3-Pin SM JST Part Listing on eBay</p>"},{"location":"getting-started/parts/#boxes","title":"Boxes","text":"<p>Our students love to put their projects into clear boxes so they can simply throw them in their backpacks and show their friends.  We use clear boxes that you can purchase at The Container Store</p> <p>Shallow Narrow Stackable Rectangle Clear 8-1/4\" x 3-1/2\" x 1-1/2\" h $3.99 SKU:10051084</p> <p>These boxes have a clear detachable lid that shows off the interior wiring of their kits.</p>"},{"location":"getting-started/parts/#micropython-site","title":"MicroPython Site","text":"<p>For more parts, see the CoderDojoTC MicroPython website.</p>"},{"location":"getting-started/updating-firmware/","title":"How to Update Firmware on the Raspberry Pi Pico","text":"<p>Both the Raspberry Pi Foundation and the MicroPython development teams keep improving the software we use in our classrooms. These changes are usually small and don't impact our classrooms. However, occasionally there are \"breaking changes\" that we need to adapt our devices and code examples.</p> <p>When this happens we need to update the firmware on our classroom Raspberry Pi Pico.  This is easy to do.  It takes under five minutes to do your first one and the process can be streamlined for subsequent devices.</p>"},{"location":"getting-started/updating-firmware/#steps","title":"Steps","text":"<p>Here are the key steps:</p> <ol> <li>Download the new firmware from here: https://micropython.org/download/RPI_PICO/</li> <li>Hold down the BOOTSEL button while you turn on the Pico (that is the key step)</li> <li>Drag the new file into the folder that pops up.  It should take under 10 seconds to download.</li> </ol> <p>Let's now review these three steps in detail.</p>"},{"location":"getting-started/updating-firmware/#step-1-downloading-the-new-firmware-image","title":"Step 1: Downloading the new firmware image","text":"<p>The firmware that we use for the Raspberry Pi Pico (not the W) is stored here:</p> <p>https://micropython.org/download/RPI_PICO/</p> <p>When you go to this page, you will see a list of the latest releases.  It will look like this:</p> <p></p> <p>Note that the top line is in red color but has the black label \"(latest)\" next to it.  That is the one we use almost all the time.  We only go back to a prior if there is a bug in the latest release or our code is incompatible with the latest release.</p> <p>To do the download, you need to click on this first line.  The text is in red and is in the first part of the line.  The second part of the line is a link to the release notes.</p> <p>After I click on this link the download should automatically start up. The file is about 640K bytes (under 1 megabyte) and it should finish in under five seconds.</p> <p></p> <p>On most computers, the new file will now appear in your \"Downloads\" folder. You can identify it because it has the extension \"UF2\" for \"USB Flashing Format\". The \"2\" is for the two \"Fs\" and the fact that the extension \"UFF\" was already taken.</p> <p></p>"},{"location":"getting-started/updating-firmware/#sidebar-what-is-the-uf2-format","title":"Sidebar: What is the UF2 format?","text":"<p>The extension \".uf2\" stands for \"USB Flashing Format\". It is used primarily for microcontrollers, like the Raspberry Pi Pico, in the context of firmware updates or software uploads. This format is particularly designed to make it easy to flash a device over USB without needing a special flashing tool or software. The UF2 file contains the firmware that is to be uploaded to the microcontroller. When connected to a computer, the Raspberry Pi Pico can appear as a USB storage device, and the UF2 file can be dragged and dropped onto it to update the firmware or load new software. This simplicity and convenience are significant advantages, especially for educational purposes or for hobbyists who might not have extensive experience with programming microcontrollers.</p>"},{"location":"getting-started/updating-firmware/#step-2-press-the-bootsel-button-during-power-up","title":"Step 2: Press the BOOTSEL Button During Power-Up","text":"<p>Our next step is to locate the BOOTSEL button on the Pico.  It is a small white oval button on the top of the Pico.  Now hear is the tricky part.  You must hold this button down when you boot up the Pico.  This process makes the Pico look like a USB hard drive.  Your PC or MAC will then open it up as a folder on your desktop.</p> <p>I usually hold the BOOTSEL with one hand and then plug the Pico USB cable into a PC or laptop with the other hand.  This can be a bit tricky if the laptop is on a slippery surface.  After you do this a folder called RPI-RP2 should automatically appear on your desktop.</p>"},{"location":"getting-started/updating-firmware/#step-3-drag-the-firmware-to-the-folder","title":"Step 3: Drag the Firmware to the Folder","text":"<p>You are now all set to copy the new firmware to the Raspberry Pi folder. One way to do this is by dragging the new .uf2 file over the  Since the fill is small, this should take under 10 seconds.</p> <p>You can also select the .uf2 file and select the \"copy\" menu.  Then select the new RPI-RP2 folder and do a \"paste\".</p> <p>After the file is copied you will get a \"Disk Not Ejected Properly\" warning like this:  This is normal.  You can just close the warning panel.</p>"},{"location":"getting-started/updating-firmware/#verifying-the-upgrade-worked","title":"Verifying the Upgrade Worked","text":"<p>After this step is done, you can open your Thonny IDE and verify that the firmware matches the version you just uploaded to the Pico.</p> <p>You can do this by pressing the STOP/Restart Backend button and look at the prompt in the Shell window.</p> <p>Example before firmware upgrade:  Note that the version is now v1.20.0</p> <p>Example after firmware upgrade:  Note that the version is now v1.22.1</p>"},{"location":"getting-started/updating-firmware/#side-note-on-boot-select-files","title":"Side Note on Boot Select Files","text":"<p>After you hold the BOOTSEL down and power up you will see the RPI-RP2 folder. If you open the Folder RPI-RP2 you you will see the following.</p> <p></p> <p>This has two very small files.  If you click on the index.htm file your browser will go to the Raspberry Pi documentation website.</p> <p>The other info.text</p> <pre><code>UF2 Bootloader v1.0\nModel: Raspberry Pi RP2\nBoard-ID: RPI-RP2\n</code></pre> <p>This shows you that the Raspberry Pi</p>"},{"location":"getting-started/updating-firmware/#alternative-methods","title":"Alternative Methods","text":"<p>If you have problems finding the BOOTSEL button or holding it down when you plug in the USB cable, you can also use a command line tool to perform the firmware update.</p> <p>You can also use Thonny to perform the update.</p> <p>These methods are covered in the Raspberry Pi Pico Documentation Getting Started Guide.</p>"},{"location":"getting-started/updating-firmware/#neopixel-update","title":"NeoPixel Update","text":"<p>One of the key changes that was done to the firmware in 2021 was the inclusion of the NeoPixel library into the MicroPython firmware.  The key change is that the syntax of how we set pixel values changes from a function call in an external library to directly writing to the NeoPixel array.  The new syntax is:</p> <pre><code>strip[i] = (red, green, blue)\nstrip.write()\n</code></pre> <p>If you have old code that used the strip.set(i, red, green, blue) format you can either change the syntax (strongly recommended) or load the old neopixel library and use it.</p> <p>We don't suggest using the library because it is one more complicated step and makes our examples less portable.  If we use the built-in NeoPixel library our code will be consistent with the other examples on the internet.</p>"},{"location":"getting-started/updating-firmware/#framebuffer-drawing-update","title":"Framebuffer Drawing Update","text":"<p>One other change that happened was when the MicroPython firmware library extended the framebuffer drawing library to include both ellipse and polygon drawing functions. Before this update, each display driver needed to include their own individual functions for drawing shapes beyond the basic rectangular drawing functions.  After this update, all our drawing libraries that used framebuffers could call functions directly in firmware.  This made the functions uniform across all our libraries.</p>"},{"location":"holidays/4th-of-july/","title":"4th of July Hat","text":"<pre><code># moving rainbow\nfrom machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep, ticks_ms\nfrom urandom import randint\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 30\nRAINBOW_LENGTH = 7\nPERCENT_SMALL_COLOR_WHEEL = round(255/RAINBOW_LENGTH)\nPERCENT_COLOR_WHEEL = round(255/NUMBER_PIXELS)\n\nstrip = NeoPixel(Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\nBUTTON_PIN_1 = 15\nBUTTON_PIN_2 = 14\n\nbutton_presses = 0 # the count of times the button has been pressed\nlast_time = 0 # the last time we pressed the button\n\nbuiltin_led = machine.Pin(25, Pin.OUT)\n# The lower left corner of the Pico has a wire that goes through the buttons upper left and the lower right goes to the 3.3 rail\n\nbutton1 = machine.Pin(BUTTON_PIN_1, machine.Pin.IN, machine.Pin.PULL_DOWN)\nbutton2 = machine.Pin(BUTTON_PIN_2, machine.Pin.IN, machine.Pin.PULL_DOWN)\n\nred = (255, 0, 0)\nred_med = (32, 0, 0)\nred_light = (8, 0, 0)\noff = (0, 0, 0)\norange = (140, 60, 0)\nyellow = (255, 255, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\ncyan = (0, 255, 255)\nindigo = (75, 0, 130)\nviolet = (138, 43, 226)\nwhite = (128, 128, 128)\ncolors = (red, orange, yellow, green, blue, cyan, indigo, violet)\ncolor_count = len(colors)\nlevels = [255, 128, 64, 32, 16, 8, 4, 2, 1]\nlevel_count = len(levels)\n\nmode_list = ['moving rainbow', 'moving red dot', 'moving blue dot', 'moving green dot',\n             'red commet', 'blue commet', 'green commet', 'candle flicker', 'random dots', 'bounce',\n             'running lights', 'rainbow cycle', 'cylon scanner']\nmode_count = 16 # len(mode_list)\n\n# This function gets called every time the button is pressed.  The parameter \"pin\" is used to tell\n# which pin is used\ndef button_pressed_handler(pin):\n    global mode, last_time\n    new_time = ticks_ms()\n    # if it has been more that 1/5 of a second since the last event, we have a new event\n    if (new_time - last_time) &gt; 200:\n        # print(pin)\n        # this is a hack but I can't get the pin ID parameter without vars() or attr()\n        pin_num = int(str(pin)[4:6])\n        # this works as long as one of the buttons is this one\n        if pin_num == BUTTON_PIN_1:\n            mode +=1\n        else:\n            mode -=1\n        # wrap around if we get too high\n        mode = mode % mode_count\n        last_time = new_time\n\n# now we register the handler function when the button is pressed\nbutton1.irq(trigger=machine.Pin.IRQ_FALLING, handler = button_pressed_handler)\nbutton2.irq(trigger=machine.Pin.IRQ_FALLING, handler = button_pressed_handler)\n\ndef wheel(pos):\n    # Input a value 0 to 255 to get a color value.\n    # The colors are a transition r - g - b - back to r.\n    if pos &lt; 0 or pos &gt; 255:\n        return (0, 0, 0)\n    if pos &lt; 85:\n        return (255 - pos * 3, pos * 3, 0)\n    if pos &lt; 170:\n        pos -= 85\n        return (0, 255 - pos * 3, pos * 3)\n    pos -= 170\n    return (pos * 3, 0, 255 - pos * 3)    \n\n# erase the entire strip\ndef erase():\n    for i in range(0, NUMBER_PIXELS):\n        strip[i] = (0,0,0)\n        strip.write()\n\ndef move_dot(counter, color, delay):\n    strip[counter] = color\n    strip.write()\n    sleep(delay)\n    strip[counter] = (0,0,0)\n\ndef comet_tail(counter, color, delay):\n    for i in range(0, color_count):\n        # we start to draw at the head of the commet N levels away from the counter\n        target = ((level_count - i - 1) + counter) % NUMBER_PIXELS\n        # number to scale by\n        scale = (levels[i] / 255)\n        strip[target] = (int(color[0]*scale), int(color[1]*scale), int(color[2]*scale))\n        # erase the tail\n        if counter &gt; 0:\n            strip[counter-1] = (0,0,0)\n        if counter == NUMBER_PIXELS-1:\n            strip[counter] = (0,0,0)\n        strip.write()\n        sleep(delay)\n\ndef moving_rainbow(counter, delay):\n    for i in range(0, RAINBOW_LENGTH-1):\n        color_index = round(i*PERCENT_SMALL_COLOR_WHEEL)\n        color = wheel(color_index)\n        # print(color_index, color)\n        # start at the end and subtract to go backwards and add the counter for offset\n        index = RAINBOW_LENGTH-1 - i  + counter\n        # print(index)\n        if index &lt; NUMBER_PIXELS:\n            strip[index] = color    \n        strip.write()\n    # erase the tail if we are not at the start\n    if counter &gt; 0:\n        strip[counter-1] = (0,0,0)\n        strip.write()\n    # turn off the last pixel at the top\n    if counter == NUMBER_PIXELS-1:\n        strip[counter] = (0,0,0)\n    sleep(delay)\n\ndef candle(delay):\n     green = 50 + randint(0,155)\n     red = green + randint(0,50)\n     strip[randint(0,NUMBER_PIXELS - 1)] = (red, green, 0)\n     strip.write()\n     sleep(delay)\n\ndef random_color(delay):\n    random_offset = randint(0, NUMBER_PIXELS-1)\n    random_color = randint(0, 255)\n    strip[random_offset] = wheel(random_color)\n    strip.write()\n    sleep(delay)\n\ndef random_red_white_blue(delay):\n    for i in range(0,10):\n        random_offset = randint(0, NUMBER_PIXELS-1)\n        random_color = randint(0, 3)\n        if random_color &lt; 1:\n            strip[random_offset] = red\n        elif random_color &lt; 2:\n            strip[random_offset] = white\n        elif random_color &lt; 3:\n            strip[random_offset] = blue\n        strip.write()\n        sleep(delay)\n\nHALF_LENGTH = round(NUMBER_PIXELS/2)\ndef bounce(counter, color, delay):\n    if counter &lt; HALF_LENGTH:\n        strip[counter] = color\n        strip[NUMBER_PIXELS-1 - counter] = color\n        strip.write()\n        strip[counter] = (0,0,0)\n        strip[NUMBER_PIXELS-1 - counter] = (0,0,0)\n        sleep(delay)\n    else:\n        half_counter = counter - HALF_LENGTH\n        strip[HALF_LENGTH - half_counter] = color\n        strip[HALF_LENGTH + half_counter] = color\n        strip.write()\n        strip[HALF_LENGTH - half_counter] = (0,0,0)\n        strip[HALF_LENGTH + half_counter] = (0,0,0)\n        sleep(delay)\n\ndef running_lights(counter, color, spacing, delay):\n    for i in range(0, NUMBER_PIXELS):\n        if (counter+i) % spacing:\n            strip[i] = (0,0,0)\n        else:\n            strip[i] = color\n    strip.write()\n    sleep(delay)\n\ndef rainbow_cycle(counter, delay):\n    for i in range(0, NUMBER_PIXELS):\n        color_index = round(i*PERCENT_COLOR_WHEEL)\n        color = wheel(color_index)\n        # print(color_index, color)\n        strip[(i + counter) % NUMBER_PIXELS] = color\n        strip.write()\n    sleep(delay)\n\n# 0=fwd, 1=rev\nstate = 0\ndef cylon_scanner(delay):\n    global counter, state\n    if state == 0:\n        #print('going forward', counter)\n        strip[counter] = red_light\n        strip[counter+1] = red_med\n        strip[counter+2] = red\n        strip[counter+3] = red_med\n        strip[counter+4] = red_light\n        # erase the tail\n        if counter &gt; 0: strip[counter-1] = off\n        strip.write()\n        sleep(delay)\n        # reverse direction\n        if counter == NUMBER_PIXELS-5:\n            state = 1\n            counter = 0\n            #print('go to reverse', state)\n            return\n    else:\n        i = NUMBER_PIXELS-counter - 5\n        #print('in reverse c=', counter, 'i=', i)\n        strip[i] = red_light\n        strip[i+1] = red_med\n        strip[i+2] = red\n        strip[i+3] = red_med\n        strip[i+4] = red_light\n        strip.write()\n        sleep(delay)\n        # turn off as we move in reverse\n        if i &lt; NUMBER_PIXELS-2:\n            strip[i+4] = off\n        if i == NUMBER_PIXELS - 6:\n            strip[NUMBER_PIXELS-1] = off\n        if i == 0:\n            state = 0\n            counter = 0\n            #print('switching to forward', counter)\n# Global variables\nmode = 0\ncounter = 0\nlast_mode = 1\ndelay = .05\nwhile True:\n    # print only on change\n    if mode != last_mode:\n        # print('mode=', mode, 'running program', mode_list[mode])\n        last_mode = mode\n    if mode == 0:\n        moving_rainbow(counter, delay)\n    elif mode == 1:\n        move_dot(counter, red, delay)\n    elif mode == 2:\n        move_dot(counter, white, delay)\n    elif mode == 3:\n        move_dot(counter, blue, delay)\n    elif mode == 4:  \n        comet_tail(counter, red, .005)\n    elif mode == 5:  \n        comet_tail(counter, white, .005)\n    elif mode == 6:  \n        comet_tail(counter, blue, .005)\n    elif mode == 8:  \n        random_red_white_blue(.01)\n    elif mode == 9:  \n        bounce(counter, red, .10)\n    elif mode == 10:  \n        bounce(counter, white, .10)\n    elif mode == 11:  \n        bounce(counter, blue, .10)\n    elif mode == 12: \n        running_lights(counter, red, 4, .2)\n    elif mode == 13: \n        running_lights(counter, white, 4, .2)\n    elif mode == 14: \n        running_lights(counter, blue, 4, .2)\n    elif mode == 15: \n        rainbow_cycle(counter, .05)\n    elif mode == 16: \n        cylon_scanner(.05)\n    else:\n        print('mode', mode, 'not configured')\n\n    counter += 1\n    # wrap the counter using modulo\n    if counter == NUMBER_PIXELS:\n        counter = counter % NUMBER_PIXELS\n        mode += 1\n    if mode == 16:\n        mode = 0\n</code></pre>"},{"location":"kits/8x8-neopixel-matrix/","title":"8x8 NeoPixel Matrix Project","text":""},{"location":"kits/halloween/","title":"Halloween Party NeoPixel Patterns \ud83c\udf83\ud83d\udc7b - Power Limited Edition","text":""},{"location":"kits/halloween/#overview","title":"Overview","text":"<p>This Halloween-themed NeoPixel pattern collection creates spooky lighting effects using orange and purple colors - perfect for your Halloween party! </p> <p>Power Limited Design: This version limits the number of lit pixels to 1/3 of your strip (maximum 10 pixels for a 30-pixel strip), making it safe for USB power and preventing overdraw issues.</p>"},{"location":"kits/halloween/#power-safety-features","title":"Power Safety Features","text":"<ul> <li>Maximum 1/3 pixels lit: Automatically calculates and enforces a limit based on your strip length</li> <li>USB-safe: Can be safely powered from USB without external power supply</li> <li>Optimized patterns: All effects redesigned to look great within power constraints</li> <li>No brightness reduction needed: Pixels can run at full brightness without risk</li> </ul>"},{"location":"kits/halloween/#pattern-descriptions","title":"Pattern Descriptions","text":""},{"location":"kits/halloween/#mode-0-auto-cycle","title":"Mode 0: Auto Cycle","text":"<p>Automatically cycles through all patterns every 5 seconds for a dynamic party atmosphere.</p>"},{"location":"kits/halloween/#mode-1-pumpkin-pulse","title":"Mode 1: Pumpkin Pulse \ud83c\udf83","text":"<p>A warm orange pulsing effect on every 3rd pixel, creating a flickering jack-o'-lantern effect with power efficiency.</p>"},{"location":"kits/halloween/#mode-2-witch-chase","title":"Mode 2: Witch Chase \ud83e\uddd9\u200d\u2640\ufe0f","text":"<p>Purple and orange comet tails (3 pixels each) chase each other around the strip in opposite directions.</p>"},{"location":"kits/halloween/#mode-3-ghost-fade","title":"Mode 3: Ghost Fade \ud83d\udc7b","text":"<p>A sparse ghostly white-to-purple fade that sweeps across the strip with strategic pixel spacing.</p>"},{"location":"kits/halloween/#mode-4-candy-corn-wave","title":"Mode 4: Candy Corn Wave \ud83c\udf6c","text":"<p>Moving dots of orange, yellow, and white that create a candy corn pattern with efficient spacing.</p>"},{"location":"kits/halloween/#mode-5-spooky-sparkle","title":"Mode 5: Spooky Sparkle \u2728","text":"<p>Random orange and purple sparkles limited to safe power levels - creates a magical firefly effect.</p>"},{"location":"kits/halloween/#mode-6-monster-eyes","title":"Mode 6: Monster Eyes \ud83d\udc40","text":"<p>Multiple pairs of glowing eyes that blink in orange and purple - automatically spaced for power limits.</p>"},{"location":"kits/halloween/#mode-7-halloween-rainbow","title":"Mode 7: Halloween Rainbow \ud83c\udf08","text":"<p>A sparse rainbow effect using Halloween colors with strategic pixel selection for power efficiency.</p>"},{"location":"kits/halloween/#mode-8-creeping-shadows","title":"Mode 8: Creeping Shadows \ud83c\udf11","text":"<p>A moving window of shadows with bright orange and purple centers creating an eerie effect.</p>"},{"location":"kits/halloween/#mode-9-potion-bubbles","title":"Mode 9: Potion Bubbles \ud83e\uddea","text":"<p>Controlled bubbling effect with purple and green \"bubbles\" rising up the strip - limits active bubbles.</p>"},{"location":"kits/halloween/#installation","title":"Installation","text":"<ol> <li>Make sure your <code>config.py</code> file is properly configured with:</li> <li><code>NEOPIXEL_PIN = 0</code> (or your pin number)</li> <li><code>NUMBER_PIXELS = 30</code> (or your strip length)</li> <li><code>BUTTON_PIN_1 = 15</code></li> <li> <p><code>BUTTON_PIN_2 = 14</code></p> </li> <li> <p>Upload <code>halloween-party.py</code> to your Raspberry Pi Pico</p> </li> <li> <p>Connect your NeoPixel strip to the configured pin</p> </li> <li> <p>Optional: Connect buttons to pins 14 and 15 for mode switching</p> </li> </ol>"},{"location":"kits/halloween/#usage","title":"Usage","text":"<ul> <li>Button 1 (Pin 15): Cycle forward through patterns</li> <li>Button 2 (Pin 14): Cycle backward through patterns</li> <li>No buttons: Starts in auto-cycle mode</li> </ul>"},{"location":"kits/halloween/#color-palette","title":"Color Palette","text":"<p>The patterns use a Halloween-themed color palette: - Orange variations: Bright pumpkin orange, dim orange, dark orange - Purple variations: Bright purple, dim purple, dark purple - Accent colors: Spooky green, blood red, ghostly white</p>"},{"location":"kits/halloween/#customization-tips","title":"Customization Tips","text":"<p>You can easily customize the patterns by:</p> <ol> <li>Adjusting speeds: Change the <code>sleep()</code> values in each pattern function</li> <li>Modifying colors: Edit the color tuples at the top of the file</li> <li>Changing auto-cycle duration: Modify <code>PATTERN_DURATION</code> (currently 5000ms)</li> <li>Adding new patterns: Create a new function and add it to the mode list</li> </ol>"},{"location":"kits/halloween/#power-considerations","title":"Power Considerations","text":""},{"location":"kits/halloween/#power-limited-design-benefits","title":"Power-Limited Design Benefits","text":"<ul> <li>Safe for USB power: No external power supply needed for strips up to 60 pixels</li> <li>Automatic limiting: Code automatically calculates safe pixel count (1/3 of total)</li> <li>No overheating: Prevents power regulator stress on Raspberry Pi Pico</li> <li>Full brightness: Pixels that are lit can run at full brightness safely</li> </ul>"},{"location":"kits/halloween/#power-usage-examples","title":"Power Usage Examples","text":"<ul> <li>30-pixel strip: Maximum 10 pixels lit (approx. 600mA at full white)</li> <li>60-pixel strip: Maximum 20 pixels lit (approx. 1.2A at full white)</li> <li>120-pixel strip: Maximum 40 pixels lit (approx. 2.4A at full white)</li> </ul>"},{"location":"kits/halloween/#if-you-need-more-brightness","title":"If You Need More Brightness","text":"<p>To increase the number of lit pixels: 1. Add an external 5V power supply rated for your needs 2. Modify the <code>MAX_LIT_PIXELS</code> calculation in the code 3. Consider using a level shifter for better signal integrity with longer strips</p>"},{"location":"kits/halloween/#party-setup-ideas","title":"Party Setup Ideas","text":"<ul> <li>Entrance: Use \"Ghost Fade\" or \"Creeping Shadows\" for a spooky welcome</li> <li>Dance floor: \"Halloween Rainbow\" or \"Auto Cycle\" for dynamic effects  </li> <li>Refreshment table: \"Potion Bubbles\" near the punch bowl</li> <li>Dark corners: \"Monster Eyes\" for surprise scares</li> <li>Jack-o'-lanterns: Place strips inside with \"Pumpkin Pulse\" mode</li> </ul> <p>Enjoy your spooky Halloween party! \ud83c\udf83\ud83d\udc7b\ud83e\udd87</p>"},{"location":"kits/led-fire/","title":"LED Fire Kit","text":"<p>This \\(10 kit uses a NeoPixel ring to simulate a small tabletop fire.  It uses a NeoPixel ring (\\)5), a low-cost (4) Raspberry Pi Pico, a breadboard, some wires and a power supply.  The power supply can be a battery pack with 3 AA batteries or a 5v USB wall adapter.</p> <p>If you don't have a breadboard you can solder the components together on a perfboard.</p>"},{"location":"kits/led-nightlight/","title":"LED Nightlight","text":""},{"location":"kits/led-nightlight/#calculating-the-base-limiting-resistor","title":"Calculating The Base-Limiting Resistor","text":"Resistor (K Ohms) Current (milliamps) 4.6 150 6.0 120 9.9 75 20.9 32 27.7 25 31 20 <p>Prompt</p> <p>Please generate a new p5.js MicroSim using the standard-rules.md file as your guide.</p> <p>This MicroSim draws a chart with resistance on the X axis and current on the Y axis. This MicroSim has a single slider that allows the user to change the value of ancurrent limiting resistor.  It then will predict the current going through the LED.  Here are some of the points the chart we want you to display:</p> Resistor (K Ohms) Current (milliamps) 4.6 150 6.0 120 9.9 75 20.9 32 27.7 25 31 20 <p>For the input slider, the resistence value must range from 3 to 50. </p> <p>The microsim will display the points in the table above with small red dots but then have a blue line go through the points using a least-square-fit calculated slope and intercept. The chart should display the value of the resistor and the current. The chart should label the axis.</p> <p>The title is \"LED Current for Base Limiting Resistor\"</p>"},{"location":"kits/solar-powered-led-nightlight/","title":"Solar Powered Nightlight","text":""},{"location":"kits/solar-powered-led-nightlight/how-it-works/","title":"How The Solar-Powered Nightlight Works","text":"<p>Prompt</p> <p>Please create a detailed explanation of how the solar-powered nightlight works.  Give a description of how each component plays a role in the circuit.</p> <p>Below is a conceptual \"walk\u2010through\" of the circuit, describing how each part contributes to turning the lamp off when there is sunlight (so the battery can charge) and on at night (when it is dark, and the solar panel is no longer generating voltage).</p>"},{"location":"kits/solar-powered-led-nightlight/how-it-works/#overall-function","title":"Overall Function","text":""},{"location":"kits/solar-powered-led-nightlight/how-it-works/#during-the-day","title":"During the day:","text":"<pre><code>-   The **solar panel** produces a voltage higher than the battery voltage.\n-   Current flows from the panel, through the diode, into the battery to **charge** it.\n-   At the same time, the transistor is held in the *off* state (details below), which prevents current from flowing through the lamp.\n-   The lamp remains **off**, saving battery power.\n</code></pre> <ol> <li> <p>At night:</p> <ul> <li>The solar panel no longer generates sufficient voltage to keep the transistor turned off.</li> <li>The transistor goes into on (saturation) state, allowing the battery to drive current through the lamp.</li> <li>The lamp turns on, powered by the battery.</li> </ul> </li> </ol>"},{"location":"kits/solar-powered-led-nightlight/how-it-works/#role-of-each-component","title":"Role of Each Component","text":""},{"location":"kits/solar-powered-led-nightlight/how-it-works/#1-solar-panel","title":"1.  Solar Panel","text":"<pre><code>-   Generates a DC voltage when exposed to light (daytime).\n-   Feeds current into the battery through the diode, thus recharging it.\n-   Its voltage also provides a reference that helps turn the transistor *off* during daylight. When panel voltage is high, it effectively prevents the transistor from conducting (or sets the transistor's bias so that the lamp remains off).\n</code></pre>"},{"location":"kits/solar-powered-led-nightlight/how-it-works/#2-diode-1n4007","title":"2.  Diode (1N4007)","text":"<pre><code>-   Placed in series from the solar\u2010panel positive to the battery positive.\n-   **Allows current flow** from the panel to the battery to charge it.\n-   **Prevents reverse flow** at night (keeps the battery from discharging backward through the solar panel).\n-   Typical forward drop of ~0.7\u202fV, so the solar panel voltage must exceed battery voltage + 0.7\u202fV for current to flow.\n</code></pre>"},{"location":"kits/solar-powered-led-nightlight/how-it-works/#3-transistor-bc547","title":"3.  Transistor (BC547)","text":"<pre><code>-   **NPN transistor** acting as a switch that controls whether the lamp is powered.\n\n-   **Collector**: connected to the lamp, which in turn goes to battery +.\n\n-   **Emitter**: connected to battery - (circuit ground).\n\n-   **Base**: receives a bias signal (through the 1\u202fk\u202f\u03a9 resistor, and influenced by panel voltage) that determines on/off state.\n\n-   **On (saturation) at night**: With the panel voltage near zero, nothing holds the transistor's base low, so a small current from the battery into the base can turn the transistor on. Once on, it completes the path for current to flow from the battery \u2192 lamp \u2192 transistor \u2192 battery negative. The lamp lights.\n\n-   **Off during the day**: The presence of the solar\u2010panel voltage biases or pulls the transistor's base in a way that it does not conduct (or conducts negligibly). Current through the lamp is essentially cut off.\n</code></pre>"},{"location":"kits/solar-powered-led-nightlight/how-it-works/#4-resistor-1-k","title":"4.  Resistor (1\u202fk\u202f\u03a9)","text":"<pre><code>-   This resistor often serves two purposes:\n    1.  **Limits base current** into the transistor, protecting the transistor from excessive drive current and setting the turn\u2010on point.\n    2.  Along with the solar panel voltage (and possibly a small internal reference from the battery), it sets the bias condition on the transistor so that in daylight there is insufficient voltage/current at the transistor's base to turn it on.\n</code></pre>"},{"location":"kits/solar-powered-led-nightlight/how-it-works/#5-battery-37-v","title":"5.  Battery (3.7\u202fV)","text":"<pre><code>-   A rechargeable cell (often a Li\u2010Ion or LiPo type) which gets charged from the solar panel through the diode.\n-   Powers the lamp at night once the transistor switch turns on.\n-   Nominal 3.7\u202fV battery is close enough to drive the \"4\u202fV\" lamp with an acceptable brightness.\n</code></pre>"},{"location":"kits/solar-powered-led-nightlight/how-it-works/#6-lamp-4-v-rating","title":"6.  Lamp (4\u202fV rating)","text":"<pre><code>-   The load that produces visible light at night.\n-   Connected from battery positive to the transistor's collector, so that when the transistor is on, current flows and the lamp lights up.\n</code></pre>"},{"location":"kits/solar-powered-led-nightlight/how-it-works/#putting-it-all-together","title":"Putting It All Together","text":""},{"location":"kits/solar-powered-led-nightlight/how-it-works/#1-daytime","title":"1.  Daytime:","text":"<pre><code>-   Sunlight on the solar panel \u2192 panel voltage &gt; battery voltage.\n-   Current flows through the **1N4007 diode** to **charge** the battery.\n-   The panel's voltage, through the **1\u202fk\u202f\u03a9 resistor**, biases the transistor **off**, so **no current** goes through the lamp.\n</code></pre>"},{"location":"kits/solar-powered-led-nightlight/how-it-works/#2-nighttime","title":"2.  Nighttime:","text":"<pre><code>-   Solar panel voltage collapses to nearly zero (darkness).\n-   No longer enough voltage to hold the transistor off, so the transistor **switches on** under the battery's bias current.\n-   Current flows battery\u202f\u2192\u202flamp\u202f\u2192\u202ftransistor\u202f\u2192\u202fbattery negative, causing the lamp to **glow**.\n</code></pre> <p>Hence, with just a handful of components, the circuit provides a self\u2010regulating solar\u2010powered nightlight:</p> <ul> <li>Charges by day,</li> <li>Lights automatically at night.</li> </ul>"},{"location":"kits/solar-powered-led-nightlight/microsim/","title":"MicroSim of Solar Powered Nightlight","text":"<p>V3 v2</p>"},{"location":"kits/solar-powered-led-nightlight/prompt/","title":"Prompt","text":"<p>Prompt</p> <p>Given this sketch of a solar powered nightlight, create a LaTeX Circuititz file that represents the circuit.</p> <p></p> <p>Result</p> <pre><code>\\documentclass[border=2pt]{standalone}\n\\usepackage[american]{circuitikz}\n\n\\begin{document}\n\\begin{circuitikz}[scale=1, transform shape]\n    %--- Place the lamp at top-left\n    \\node[lamp, label=above:4V Light] (lamp) at (0,3) {};\n\n    %--- Place an NPN transistor below the lamp\n    \\node[npn, label=left:BC547] (Q1) at (0,1.5) {};\n\n    %--- Connect the lamp to the transistor collector\n    \\draw (lamp.base) -- (Q1.collector);\n\n    %--- Battery in the middle\n    \\node[battery1, rotate=270,\n          label={[shift={(0,0.3)}]above:3.7V Battery}] (Bat) at (2,2) {};\n\n    %--- Transistor emitter to battery negative\n    \\coordinate (neg) at (0,0);\n    \\draw (Q1.emitter) -- (neg);\n    \\draw (Bat.negative) -- ++(-0.5,0) |- (neg);\n\n    %--- Battery positive to lamp\n    \\draw (Bat.positive) -- ++(0.5,0) |- (lamp.top);\n\n    %--- Solar panel on the right (just drawn as a rectangle)\n    \\draw (4,3) rectangle (6,0);\n    % Label inside the rectangle\n    \\node at (5,1.5) {Solar Panel};\n\n    % Mark the + and - leads on left edge of panel\n    \\draw (4,3) node[left] {$+$};\n    \\draw (4,0) node[left] {$-$};\n\n    %--- Connect battery + to solar panel +\n    \\draw (Bat.positive) -- (4,3);\n\n    %--- Diode and resistor from solar panel \u2013 to battery negative\n    \\draw (4,0)\n       to [D, l^=1N4007] (5.5,0)\n       to [R, l^=1k$\\Omega$] (neg);\n\n\\end{circuitikz}\n\\end{document}\n</code></pre> <p>Explanation of the main pieces:</p> <ul> <li>The lamp (<code>lamp</code>) is placed at the top left.</li> <li>The BC547 transistor (<code>npn</code>) is placed below the lamp.</li> <li>The battery is drawn with <code>\\node[battery1, rotate=270]{}</code> so that its positive terminal is up and negative is down.</li> <li>The solar panel is simply a rectangle labeled \"Solar Panel\" with its + and -- terminals on the left edge.</li> <li>A diode (1N4007) in series with a 1\u202fk\u202f\u03a9 resistor connects from the panel's negative side back to the circuit negative (transistor emitter and battery negative).</li> </ul>"},{"location":"led-noodles/","title":"LED Noodles","text":"<p>LED Noodles or \"filament\" LEDs are 3-volt flexible LEDs that are perfect for costumes and other wearable items.  They come in multiple colors and typically draw about 100 milliamps.  Our STEM students love to work with them because of their combination of brightness and flexibility.</p> <p>These lesson plans begin with simple static battery circuits with a current limiting resistor.  After that, we proceed to dynamic circuits that are controlled by a Raspberry Pi Pico running MicroPython.</p>"},{"location":"led-noodles/#static-circuits","title":"Static Circuits","text":"<p>Our first section gives you recipes for simple LED Noodle circuits using a variety of battery packs and USB power packs.  The circuits are simple and just are turned on and off or are controlled by a dimmer or photo-sensor.  They are ideal for beginner projects that focus on how the LEDs are used with flexible fabric and clothing.</p> <p>Static Circuits</p>"},{"location":"led-noodles/#led-noodle-dimmer","title":"LED Noodle Dimmer","text":"<p>Our LED Noodles can get very bright in a dark room. Many of our users want to control how bright they are on a costume.  To do this we created a simple LED dimmer circuit using a potentiometer and transistor.</p> <p>LED Noodle Dimmer Circuit</p>"},{"location":"led-noodles/#led-noodle-nightlight","title":"LED Noodle Nightlight","text":"<p>This fun project makes our LED Noodle only turn on when it is dark.  The circuit is perfect for a nightlight. We use a photo-sensor and a transistor to turn on the LED.</p> <p>LED Noodle Nightlight</p>"},{"location":"led-noodles/#calculating-battery-life","title":"Calculating Battery Life","text":"<p>So your LED costume is the hit of your Halloween party. But will your costume work all night?  This lab and MicroSim will help you find out!</p> <p>Calculating Battery Life</p>"},{"location":"led-noodles/#dynamic-circuits","title":"Dynamic Circuits","text":"<p>Once we are familiar with how LED Noodles are controlled, we can take the next step and power them by microcontrollers like the Raspberry Pi Pico and MicroPython.  These projects allow us to not only control the brightness of a single LED Noodle but also allow the LED Noodles to sequently light up in waves.</p> <p>Dynamic Projects</p>"},{"location":"led-noodles/#voltage-current-curve","title":"Voltage Current Curve","text":"<p>For a given voltage across the LED, how can we calculate the amount of current that will be sent through the LED Noodle?  The answer is not as simple as you might expect.</p> <p>Voltage Current Curve</p>"},{"location":"led-noodles/#other-project-ideas","title":"Other Project Ideas","text":"<p>Project Ideas</p>"},{"location":"led-noodles/calculating-battery-life/","title":"Calculating LED Noodle Battery Life","text":"<p>So your LED costume is the hit of your Halloween party. But will your costume work all night?  This lab and the attach MicroSim will help you find out!</p>"},{"location":"led-noodles/calculating-battery-life/#introduction","title":"Introduction","text":"<p>In this lesson, students will learn how to calculate the battery life of their Halloween costumes that use LED Noodles. Understanding battery capacity and power consumption is essential for ensuring that costumes stay illuminated throughout Halloween festivities.</p>"},{"location":"led-noodles/calculating-battery-life/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this lesson we will be able to </p> <p>By the end of this lesson, students will be able to:</p> <ul> <li>Understand the concept of milliamp hours (mAh) and how it relates to battery capacity.</li> <li>Calculate the total current draw of their LED Noodle costumes.</li> <li>Determine the estimated battery life based on different battery types and configurations.</li> <li>Make informed decisions about battery choices for their costumes.</li> <li>Use and understand a simple webpage to calculate battery life.</li> </ul> <p></p>"},{"location":"led-noodles/calculating-battery-life/#materials-needed","title":"Materials Needed","text":"<ul> <li>LED Noodles (1 to 5 per student)</li> <li>Dimmer knobs</li> <li>Various batteries (2, 3, or 4 AA batteries, 9-volt batteries, USB power packs)</li> <li>Calculators</li> <li>Worksheets for practice problems</li> <li>Whiteboard and markers</li> <li>(optional) Current meter</li> </ul>"},{"location":"led-noodles/calculating-battery-life/#background-knowledge","title":"Background Knowledge","text":"<p>Students should have a basic understanding of:</p> <ul> <li>Electrical current (measured in amperes or milliamperes)</li> <li>Basic arithmetic operations to calculate the total capacity of a set of batteries</li> </ul>"},{"location":"led-noodles/calculating-battery-life/#lesson-steps","title":"Lesson Steps","text":""},{"location":"led-noodles/calculating-battery-life/#step-1-introduction-to-milliamp-hours-mah","title":"Step 1: Introduction to Milliamp Hours (mAh)","text":"<ul> <li>Explain: Milliamp hours (mAh) measure a battery's energy capacity. It indicates how much current a battery can supply over one hour.</li> <li>Example: A battery rated at 2000 mAh can deliver 200 milliamps for ten hours or 1000 milliamps for two hours.</li> </ul>"},{"location":"led-noodles/calculating-battery-life/#step-2-understanding-battery-capacities","title":"Step 2: Understanding Battery Capacities","text":"<ul> <li> <p>Discuss the typical capacities of different batteries:</p> </li> <li> <p>AA Batteries: Approximately 2000--3000 mAh each</p> </li> <li>9-Volt Batteries: Around 500--600 mAh</li> <li>USB Power Packs: Varies widely (e.g., 5000 mAh, 10000 mAh)</li> <li>Note: Using multiple AA batteries in series increases voltage but not capacity. Parallel configurations increase capacity but are not typical for AA batteries in standard holders.</li> </ul>"},{"location":"led-noodles/calculating-battery-life/#step-3-calculating-total-current-draw","title":"Step 3: Calculating Total Current Draw","text":"<ul> <li>Explain how to determine the total current draw:</li> <li>Per LED Noodle: Up to 100 milliamps (mA) at full brightness</li> <li>Dimmer Setting: Adjusts brightness and reduces current draw proportionally</li> <li>Sample Formula:</li> </ul> <p>Total Current Draw (mA) = Number of LED Noodles \u00d7 Current per Noodle (mA) \u00d7 Brightness Factor</p> <p>Brightness Factor: Percentage of maximum brightness (e.g., 50% brightness = 0.5)</p> <p>Example:</p> <ul> <li>3 LED Noodles at 75% brightness:</li> </ul> <p>Total Current Draw = 3 \u00d7 100 mA \u00d7 0.75 = 225 mA</p>"},{"location":"led-noodles/calculating-battery-life/#step-4-calculating-battery-life","title":"Step 4: Calculating Battery Life","text":"<ul> <li>Introduce the formula for battery life:</li> </ul> <p>Battery Life (hours) = Battery Capacity (mAh) \u00f7 Total Current Draw (mA)</p> <ul> <li>Considerations:</li> <li>Real-world battery life may be less due to factors like battery age and efficiency.</li> <li> <p>Battery capacity remains the same in series configurations but voltage increases.</p> </li> <li> <p>Example:</p> </li> <li> <p>Using a USB power pack of 5,000 mAh with a total current draw of 225 mA:</p> </li> </ul> <p>Battery Life = 5000 mAh \u00f7 225 mA \u2248 22.22 hours</p>"},{"location":"led-noodles/calculating-battery-life/#step-5-practice-problems","title":"Step 5: Practice Problems","text":"<ul> <li> <p>Provide scenarios for students to calculate:</p> </li> <li> <p>Scenario: A costume uses 5 LED Noodles at full brightness with a 9-volt battery (600 mAh).</p> </li> <li> <p>Calculate Total Current Draw:</p> </li> </ul> <p>Total Current Draw = 5 \u00d7 100 mA \u00d7 1.0 = 500 mA             ` Calculate Battery Life:</p> <p>Battery Life = 600 mAh \u00f7 500 mA = 1.2 hours             ` 2.  Scenario: A student uses 2 AA batteries (total capacity of one AA battery is 2500 mAh) with 2 LED Noodles at 50% brightness. - Note: Capacity remains 2500 mAh; voltage increases with batteries in series. - Calculate Total Current Draw:</p> <p>Total Current Draw = 2 \u00d7 100 mA \u00d7 0.5 = 100 mA             ` - Calculate Battery Life:</p> <p>Battery Life = 2500 mAh \u00f7 100 mA = 25 hours</p>"},{"location":"led-noodles/calculating-battery-life/#step-6-discuss-real-world-factors","title":"Step 6: Discuss Real-World Factors","text":"<ul> <li>Explain that actual battery life may vary due to:</li> <li>Battery quality and age</li> <li>Ambient temperature</li> <li>Variations in LED efficiency</li> <li>Encourage students to consider these factors in their planning.</li> </ul>"},{"location":"led-noodles/calculating-battery-life/#conclusion","title":"Conclusion","text":"<ul> <li>Recap the importance of calculating battery life.</li> <li>Emphasize making informed choices to ensure costumes remain illuminated.</li> </ul>"},{"location":"led-noodles/calculating-battery-life/#assessment","title":"Assessment","text":"<ul> <li>Worksheet Completion: Collect and review practice problem worksheets.</li> <li>Group Discussion: Share calculations and discuss any differences.</li> </ul>"},{"location":"led-noodles/calculating-battery-life/#additional-resources","title":"Additional Resources","text":"<ul> <li>Battery Life Calculator</li> </ul>"},{"location":"led-noodles/calculating-battery-life/#sample-chatgpt-prompt-for-generating-a-lesson-plan","title":"Sample ChatGPT Prompt for Generating a Lesson Plan","text":"<pre><code>I am working with a class of [9th] grade students that are\nusing LED Noodles that consume up to 100 milliamps when fully bright.\nThey are used in Halloween costumes.\n\nWe use a variety of power sources including 2, 3 or 4, AA batteries,\n9-volt batteries and a variety of USB power packs.\nThe costumes have a dimmer know that allows the students to adjust the brightness of their costumes.  Their costumes have between one and five LED noodles.\n\nPlease generate a complete lesson plan that helps students\nlearn to calculate the battery life of our costumes based on milliamp hours.\n\nReturn the lesson plan in Markdown format with each section\nusing a level 2 header.\n\nAssume at the end of the lesson there is a link to a JavaScript powered battery lifetime calculator.\n</code></pre>"},{"location":"led-noodles/calculating-battery-life/#sample-microsim-prompt","title":"Sample MicroSim Prompt","text":"<pre><code>Create a p5.js sketch that simulates a LED noodle battery life calculator.\nThe title of the sketch is LED Noodle battery Life Calculator\nThe sketch as a series of input controls using a selection list and sliders.\nThe purpose of the calculator is to estimate how long an LED costume will last.\nThe  inputs to the calculator are the following:\n\n1. Battery Type - (Selection List Values of: AA, AAA, 9-volt, USB Battery Pack (small, medium and large) - default AA\n2. Number of batteries (Slider 1, 2, 3 or 4 batteries) - default 2\n3. Number of LED noodle (Slider with values of 1, 2, 3, 4, or 5) - default 2\n4. Current draw for each noodle (Slider with labeled values of (very dim, dim, medium, bright, very bright) with values of 2 milliamps, 5 milliamps, 10 milliamps, 50 milliamps, 100 milliamps)\n\nAs the user change the sliders, continually update the following:\nOutput Line 1: the total milliamp hours of the battery\nOutput Line 2:  the total current draw for the costume\nOutput Line 3: The estimated time for the costume to reach 50% brightness due to battery drain\n</code></pre>"},{"location":"led-noodles/dynamic-projects/","title":"LED Noodle Labs","text":""},{"location":"led-noodles/dynamic-projects/#parts","title":"Parts","text":"<ol> <li>Breadboard</li> <li>Raspberry Pi Pico</li> <li>LED Noodle</li> <li>15 ohm current limiting resistor</li> <li>10K base resistor</li> <li>2N2222 NPN resistor</li> </ol>"},{"location":"led-noodles/dynamic-projects/#circuit","title":"Circuit","text":"<p>LED noodles can use over 100 milliamps. Most digital outputs are rated at only 20 milliamps. So to get enough current, we need to use a transistor as a switch to turn the LED noodle on and off.</p> <p></p> <ol> <li>Connect the output of GPIO 15 to the 10k base resistor</li> <li>Connect the other end of the base resistor to the middle pin of the 2N2222 transistor</li> <li>Connect the emitter to ground</li> <li>Connect the collector to the 15 ohm current limiting resistor</li> <li>Connect the other end of the 15 ohm current limiting resistor to the cathode end (no hole) of the LED noodle</li> <li>Connect the other end of the LED noodle (anode with hole) to the 5 volt rail</li> </ol>"},{"location":"led-noodles/dynamic-projects/#blink","title":"Blink","text":"<pre><code>from machine import Pin, PWM\nfrom time import sleep\n\n# lower left corner of the Pico\nLED_PIN_1 = 15\nled_1 = machine.Pin(LED_PIN_1, machine.Pin.OUT)\ndelay = 1.0 3 # one second on and one second off\n\n# Main loop: Repeat the forever...\nwhile True:\n    print('high')\n    led_1.high() # turn on the LED\n    sleep(delay) # leave it on for 1 second\n\n    print('low')\n    led_1.low()  # Turn off the LED\n    sleep(delay) # leave it off for 1 second\n</code></pre>"},{"location":"led-noodles/dynamic-projects/#fade-in-and-out","title":"Fade In and Out","text":"<pre><code>from machine import Pin, PWM\nfrom time import sleep\n\n# lower left corner of the Pico\nLED_PIN_1 = 15\npwm = PWM(Pin(LED_PIN_1))\n\npwm.freq(1000)\nMAX_BRIGHTNESS = 65025\n\nwhile True:\n    for duty in range(MAX_BRIGHTNESS):\n        pwm.duty_u16(duty)\n        sleep(0.0001)\n    for duty in range(MAX_BRIGHTNESS, 0, -1):\n        pwm.duty_u16(duty)\n        sleep(0.0001)\n</code></pre> <p>Note that the brightness does not change much for the second half of the brightness.   To get a more even change, you can change the <code>MAX_BRIGHTNESS = 32000</code>.</p>"},{"location":"led-noodles/dynamic-projects/#sequential-fade-in-and-out","title":"Sequential Fade In and Out","text":"<p>Now, let's connect five different LED noodles of different colors up and have them turn on in a sequence, one after another.</p> <p>We can just create five copies of the lines that define the LEDs and repeat this pattern over and over.</p> <pre><code>from machine import Pin, PWM\nfrom time import sleep, sleep_ms\n\n# lower left corner of the Pico\nLED_PIN_1 = 11\nLED_PIN_2 = 12\nLED_PIN_3 = 13\nLED_PIN_4 = 14\nLED_PIN_5 = 15\n# led_1 = machine.Pin(LED_PIN_1, machine.Pin.OUT)\npwm_1 = PWM(Pin(LED_PIN_1))\npwm_2 = PWM(Pin(LED_PIN_2))\npwm_3 = PWM(Pin(LED_PIN_3))\npwm_4 = PWM(Pin(LED_PIN_4))\npwm_5 = PWM(Pin(LED_PIN_5))\n\npwm_1.freq(1000)\npwm_2.freq(1000)\npwm_3.freq(1000)\npwm_4.freq(1000)\npwm_5.freq(1000)\n\nMAX_BRIGHTNESS = 32000\nDELAY_MS = 1\nwhile True:\n    # turn up the brightness\n    for duty in range(0, MAX_BRIGHTNESS, 100):\n        pwm_1.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n    # turn down the brightness\n    for duty in range(MAX_BRIGHTNESS, 0, -100):\n        pwm_1.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n\n    for duty in range(0, MAX_BRIGHTNESS, 100):\n        pwm_2.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n    for duty in range(MAX_BRIGHTNESS, 0, -100):\n        pwm_2.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n\n    for duty in range(0, MAX_BRIGHTNESS, 100):\n        pwm_3.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n    for duty in range(MAX_BRIGHTNESS, 0, -100):\n        pwm_3.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n\n    for duty in range(0, MAX_BRIGHTNESS, 100):\n        pwm_4.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n    for duty in range(MAX_BRIGHTNESS, 0, -100):\n        pwm_4.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n\n    for duty in range(0, MAX_BRIGHTNESS, 100):\n        pwm_5.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n    for duty in range(MAX_BRIGHTNESS, 0, -100):\n        pwm_5.duty_u16(duty)\n        sleep_ms(DELAY_MS)\n</code></pre>"},{"location":"led-noodles/dynamic-projects/#heartbeat","title":"Heartbeat","text":"<p>We can add a one second sleep to the off period to simulate the beating of a heart.</p> <pre><code>from machine import Pin, PWM\nfrom time import sleep, sleep_ms\n\n# lower left corner of the Pico\nLED_PIN_1 = 12\npwm = PWM(Pin(LED_PIN_1))\npwm.freq(1000)\nMAX_BRIGHTNESS = 20000\n\nwhile True:\n    for duty in range(0, MAX_BRIGHTNESS, 200):\n        pwm.duty_u16(duty)\n        sleep_ms(2)\n    for duty in range(MAX_BRIGHTNESS, 0, -200):\n        pwm.duty_u16(duty)\n        sleep_ms(2)\n    sleep(1)\n</code></pre>"},{"location":"led-noodles/gamma-correction/","title":"Gamma Correction","text":"<p>Gamma Correction is a way to adjust how bright things look to match how our eyes actually see them. When you change the brightness of something like an LED, the light doesn't always appear to change smoothly. This is because our eyes don't see light in a perfectly straight way.</p> <p>Here's a simple way to think about it:</p> <ul> <li> <p>Without Gamma Correction: If you turn up the brightness by small amounts, the LED might look like it's getting bright too quickly at first and then not much brighter as you keep increasing the brightness. It doesn't feel smooth.</p> </li> <li> <p>With Gamma Correction: We use a special formula to adjust the brightness in a way that matches how your eyes see it. So, when you change the brightness of the LED, it looks like it's increasing evenly from dim to bright.</p> </li> </ul> <p>Imagine trying to turn up the volume on a speaker: without correction, it might feel like the volume jumps too quickly, while with correction, the sound would get louder in a smooth and controlled way.</p> <p>In short, Gamma Correction is like a tool that smooths out the changes in brightness so the LED looks like it's getting brighter in a way that feels natural to your eyes.</p>"},{"location":"led-noodles/gamma-correction/#python-function-to-do-gamma-correction","title":"Python Function to Do Gamma Correction","text":"<pre><code>from machine import Pin, PWM, ADC\nimport time\nimport math\n\n# Setup PWM pin\npwm_pin = PWM(Pin(15))  # PWM pin connected to the base of the 2N2222 (e.g., GP15)\npwm_pin.freq(1000)      # PWM frequency of 1kHz\n\n# Setup photoresistor circuit connected to ADC pin\nadc_pin = ADC(Pin(26))  # Photoresistor connected to ADC pin (e.g., GP26)\n\n# Gamma correction function\ndef gamma_correct(value, gamma):\n    normalized = value / 255  # normalize input to range 0-1\n    corrected = math.pow(normalized, gamma)  # apply gamma correction\n    return int(corrected * 255)  # scale back to range 0-255\n\n# Function to set PWM duty cycle with Gamma Correction\ndef set_led_brightness(brightness, gamma=2.2):\n    corrected_brightness = gamma_correct(brightness, gamma)\n    pwm_pin.duty_u16(int(corrected_brightness * 65535 / 255))  # Set corrected PWM value\n\n# Test the setup by sweeping brightness values\ndef sweep_brightness():\n    for i in range(256):\n        set_led_brightness(i)  # Increase brightness\n        time.sleep(0.01)\n    for i in range(255, -1, -1):\n        set_led_brightness(i)  # Decrease brightness\n        time.sleep(0.01)\n\n# Function to read the photoresistor value\ndef read_brightness():\n    return adc_pin.read_u16()  # Returns a value from 0 to 65535\n\n# Main loop to demonstrate brightness control\ndef main():\n    gamma = 2.2  # Initial gamma value\n    while True:\n        brightness = 128  # Example fixed brightness level (can modify to test)\n        set_led_brightness(brightness, gamma)\n        measured_light = read_brightness()  # Measure the actual brightness using photoresistor\n        print(f\"Measured light: {measured_light}\")  # Display brightness reading\n        time.sleep(1)\n\n# Start the program\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"led-noodles/gamma-correction/#explanation-of-code","title":"Explanation of Code:","text":"<ol> <li> <p>PWM Setup: The PWM signal is configured on a pin (GP15) connected to the base of the 2N2222 transistor through a 10K resistor. The frequency is set to 1kHz.</p> </li> <li> <p>Gamma Correction Function:</p> </li> <li> <p>The function <code>gamma_correct(value, gamma)</code> applies a gamma curve to the brightness value. The value is normalized (0 to 255) and then raised to the power of the gamma correction value.</p> </li> <li>The gamma value of 2.2 is a typical default but can be adjusted based on how you want the LED brightness to behave.</li> </ol>"},{"location":"led-noodles/gamma-correction/#testing-brightness-level","title":"Testing Brightness Level","text":"<p>How do we know our gamma correction function is working and tha the constant value of 2.2 is a good value to use?  We can test this by using a photoresistor to measure the about of light generated by the LED.</p> <ul> <li>We can use the <code>sweep_brightness()</code> function sweeps the brightness values from 0 to 255 (full range), testing the effect of gamma correction on brightness.</li> <li>A photoresistor circuit connected to an ADC pin measures the actual brightness, providing feedback on how the LED is behaving.</li> <li>We can observe the photoresistor readings to adjust the gamma correction for a more visually uniform brightness curve.</li> </ul>"},{"location":"led-noodles/gamma-correction/#tuning-gamma-correction","title":"Tuning Gamma Correction:","text":"<ol> <li> <p>Gamma Value: The <code>gamma</code> parameter can be modified in the <code>set_led_brightness</code> function. Start with a gamma of 2.2, then adjust higher for a steeper curve or lower for a flatter one.</p> </li> <li> <p>Lower gamma (&lt;2.2): Makes the brightness ramp up more quickly at lower levels.</p> </li> <li>Higher gamma (&gt;2.2): Makes the brightness ramp up more slowly, giving more granularity at lower brightness levels.</li> <li> <p>Test Setup:</p> </li> <li> <p>Connect the photoresistor circuit to an analog input on the Raspberry Pi Pico. Ensure that the photoresistor is positioned to detect light from the LED noodle.</p> </li> <li>Monitor the <code>measured_light</code> output in the <code>main()</code> loop and adjust the gamma based on the readings to achieve the desired brightness curve.</li> </ol>"},{"location":"led-noodles/led-noodle-dimmer/","title":"LED Noodle Dimmer","text":"<p>LED noodles can be very bright.  When used in a costume at a party in a dark room, the brightness can been overwhelming! To be attractive, the brightness of the LEDs need to be turned down.</p> <p>In this lesson, we will use a potentiometer to change the brightness of one or more LED noodles.  We will start using a simple potentiometer in series with the LED and then move on to circuits with finer grain of control.</p> <p>Warning</p> <p>Be carful when you are adjusting the resistance of these circuits.  We never want the current limiting resistor to go to zero.  That will burn out the LED noodle.  We suggest ALWAYS having a 15 ohm resistor in series with the LED noodle so you don't accidentally burn it out using a 5 volt power supply.</p>"},{"location":"led-noodles/led-noodle-dimmer/#designing-our-dimmer-circuit","title":"Designing our Dimmer Circuit","text":"<p>To design a dimmer circuit for your LED noodle using a 10\u202fk\u03a9 potentiometer and NPN transistors like the 2N2222, we'll create a simple adjustable current control circuit that utilizes the full range of your potentiometer.</p>"},{"location":"led-noodles/led-noodle-dimmer/#circuit-components","title":"Circuit Components:","text":"<ul> <li>Power Supply: 5\u202fV USB source</li> <li>LED Noodle: Requires 2.39\u202fV (no current) to 2.75\u202fV (max 140\u202fmA)</li> <li>Potentiometer: 10\u202fk\u03a9 linear taper</li> <li>Transistor: NPN transistor (e.g., 2N2222)</li> <li>Resistor\u200b: 10\u202fk\u03a9 resistor to limit base current to the transistor</li> </ul>"},{"location":"led-noodles/led-noodle-dimmer/#circuit-connections","title":"Circuit Connections","text":"<ol> <li> <p>Potentiometer Setup:</p> <ul> <li>Connect the two outer terminals of the 10\u202fk\u03a9 potentiometer to +5\u202fV and GND.</li> <li>The wiper (middle terminal) provides a variable voltage from 0\u202fV to 5\u202fV as you turn the potentiometer.</li> </ul> </li> <li> <p>Base Connection:</p> <ul> <li>Connect the wiper through a 10\u202fk\u03a9 resistor \u200b to the base of the NPN transistor.  This is the middle pin of the 2N2222 transistor.</li> <li>This resistor limits the base current to protect the transistor.</li> <li> <p>Emitter Connection:</p> </li> <li> <p>Connect the emitter of Q1Q1Q1 directly to GND.</p> </li> <li> <p>Collector Connection:</p> </li> <li> <p>Connect the collector of Q1Q1Q1 to the cathode of the LED noodle.</p> </li> <li>Connect the anode of the LED noodle to +5\u202fV.</li> </ul> </li> </ol>"},{"location":"led-noodles/led-noodle-dimmer/#circuit-description","title":"Circuit Description","text":""},{"location":"led-noodles/led-noodle-dimmer/#variable-voltage-control","title":"Variable Voltage Control","text":"<ul> <li>The potentiometer adjusts the voltage at the base of the transistor from 0\u202fV to approximately 5\u202fV.</li> <li>As the base voltage increases, the transistor allows more collector current, increasing the brightness of the LED noodle.</li> </ul>"},{"location":"led-noodles/led-noodle-dimmer/#current-regulation","title":"Current Regulation","text":"<ul> <li>The 2.7\u202fk\u03a9 resistor RbR_bRb\u200b ensures the base current (I-base)\u200b doesn't exceed safe levels.</li> <li>Maximum base current when the wiper is at 5\u202fV: I-base</li> </ul> <ul> <li>The transistor's current gain (\u03b2 \u2248 100) allows collector current I\u200b up to:</li> </ul> <ul> <li>The value of 160 milliamps exceeds our required 140\u202fmA, providing a full dimming range.</li> </ul>"},{"location":"led-noodles/led-noodle-dimmer/#full-range-potentiometer-use","title":"Full Range Potentiometer Use","text":"<ul> <li>The potentiometer adjusts from minimum brightness (off) at 0\u202fV to maximum brightness at 5\u202fV.</li> <li>This setup utilizes the full mechanical range of the potentiometer for smooth dimming control.</li> </ul>"},{"location":"led-noodles/led-noodle-dimmer/#power-dissipation-check","title":"Power Dissipation Check","text":"<ul> <li>Transistor Power Dissipation:</li> <li>At maximum current (140\u202fmA), the voltage across the transistor VCEV is:</li> </ul> <p>We can now calculate the power dissipation in the 2N222 transistor:</p> <p></p> <ul> <li>The 2N2222 transistor can handle this power, as its maximum rating is around 625\u202fmW.</li> </ul>"},{"location":"led-noodles/led-noodle-dimmer/#final-notes","title":"Final Notes","text":""},{"location":"led-noodles/led-noodle-dimmer/#transistor-selection","title":"Transistor Selection","text":"<ul> <li>Ensure your transistor can handle the maximum collector current (140\u202fmA) and power dissipation.</li> <li>The 2N2222 is suitable, but alternatives like the 2N4401 or any NPN transistor with similar or better ratings can also be used.</li> </ul>"},{"location":"led-noodles/led-noodle-dimmer/#heat-considerations","title":"Heat Considerations","text":"<ul> <li>At higher currents, the transistor may get warm. If necessary, attach a small heat sink to dissipate heat.</li> </ul>"},{"location":"led-noodles/led-noodle-dimmer/#safety-measures","title":"Safety Measures","text":"<ul> <li>Double-check all connections before powering the circuit.</li> <li>Ensure all components are rated appropriately to prevent overheating or damage.</li> </ul>"},{"location":"led-noodles/led-noodle-dimmer/#conclusion","title":"Conclusion","text":"<p>By following this circuit design, we can smoothly control the brightness of our LED noodle using the full range of your 10\u202fk\u03a9 potentiometer, with readily available components and without exceeding the specifications of your components.</p>"},{"location":"led-noodles/led-noodle-nightlight/","title":"LED Noodle Nightlight","text":"<p>We can create a nightlight that only goes on at night by adding a photo-sensor to our LED circuit. https://youtube.com/shorts/LriJtNihyxY?si=2bpKlWYxMg4UexWk</p> <p></p> <p>In this circuit, there is a 22K ohm resistor that connects the base of the 2N2222 transistor to the +5 volt power rail.</p> <p>Note that because there is a voltage drop across the 2N2222 transistor, we can omit the 15 ohm current limiting resistor we need for a 5 volt power supply.</p> <p>Warning</p> <p>Be carful when connected the LED noodle. We never want to directly connect the LED noodle directly to +5 volts and GND. We suggest ALWAYS having a 15 ohm resistor in series with the LED noodle when testing so you don't accidentally burn out the LED noodle using a 5-volt power supply.</p>"},{"location":"led-noodles/led-noodle-nightlight/#light-dependant-resistors","title":"Light Dependant Resistors","text":"<p>The photo-sensor we use is called a light-dependant-resistor or (LDR).  The LDR high resistance when it is dark, but when there is light shining on the sensor the resistance is low. In our circuit, light on the LDR pulls the voltage of the base down to ground and shuts off the flow of current between the collector and the emitter.</p> <p>When it is dark, the resistance of the LDR is high, which causes the 10K bias resistor to pull the base up to 5V.  This lets the current flow between the collector and the emitter.</p> <p>LDR sensors are inexpensive.  You can typically get 30 of them on eBay for under $2.  You can also combine them in parallel to create very sensitive sensors.</p>"},{"location":"led-noodles/led-noodle-nightlight/#measuring-on-and-off-resistance","title":"Measuring On and Off Resistance","text":"<p>To create the right sensitivity of the nightlight, we need to carefully measure the resistance of your LDR under different lighting conditions. This is easy to do with a standard digital multimeter set to measure the resistance of a circuit.</p> <p></p> <p>In the circuit above, I wrapped the bottom part of the LED in black electrical tape and then measured the resistance in two conditions:</p> <ol> <li>When the LDR was uncovered - which gave a resistance across the LDR of about 20K ohms.</li> <li>When the LDR was covered by my finger (which still transmitted some light) - which gave a resistance of about 2K ohms.</li> </ol> <p>I tried various different values of resistors using a 50K potentiometer.</p> <p>The value that gave me the best value for testing in my classroom was a 22K ohm resistor. The value of resistor that you use for the bias resistor might vary depending on how sensitive your LDR is and how bright your room lights are.</p> <p>You can also test the extreme values of the LDR by completely covering the LDR with black electrical tape which should give you a resistance of close to one megohm.</p> <p>You can also shine a bright flashlight directly on the LDR to get a resistance of around 100 ohms. </p>"},{"location":"led-noodles/led-noodle-nightlight/#dividing-the-voltage","title":"Dividing the Voltage","text":"<p>This circuit illustrates the concept of a \"voltage divider\".  A voltage divider uses two resistor in series between the rails of a power supply. When you measure the voltage of the center between the resistors, the voltage is somewhere between the positive voltage and ground.  The exact value is a ratio of the resistors.</p> <p>For example, if you have a 10K on the top and a 20K on the bottom, the value will be 1/3 of the way between the top and the bottom.</p> <p>In the case of the LDR, we can measure the resistance with light and without light and select a pull-up resistor that is about 1/2 the value of the on and off resistances.</p>"},{"location":"led-noodles/led-noodle-nightlight/#project-ideas","title":"Project Ideas","text":"<p>You can cover the LED Noodle with a cutout of a pumpkin for Halloween or make a star or Christmas tree glow at night, but stay off during the day.</p>"},{"location":"led-noodles/led-noodle-nightlight/#references","title":"References","text":"<p>Build Electronics Circuits - This version uses a similar circuit, but it uses a 9-volt battery, a 100K resistor and a BC947 transistor.  However, the principal is the same.</p> <p>This one uses a 1K resistor for the top of the voltage divider. </p> <p>LDR and 2N2222A (beginner) on electronics.stackexchainge.com</p> <p>Circuit on CircuitDiagram.com note the pot in series with a 1K to tune the sensitivity.  The 50K variable resistor (VR) is used to adjust the desired light condition on which the LED will light up and 1K resistor is used to protect the LDR from direct connecting to the supply when the 50K variable resistor is on zero.</p>"},{"location":"led-noodles/project-ideas/","title":"LED Noodle Project Ideas","text":"<p>Here are some fun, creative project ideas for kids using LED Noodles. LED Noodles only cost a few dollars each, so projects can include many LED Noodles each with their own switches.</p>"},{"location":"led-noodles/project-ideas/#wearable-light-bracelet-or-headband","title":"Wearable Light Bracelet or Headband","text":"<p>Using a flexible LED Noodle, kids can create glowing bracelets or headbands.  Secure the noodle with Velcro or fabric, and add a small battery pack hidden in a pocket or behind a design. An LED can also be a great safety device when walking at night.</p> <p>Learning Opportunity: A great introduction to wearable electronics and circuits.</p>"},{"location":"led-noodles/project-ideas/#led-nightlight","title":"LED Nightlight","text":"<p>Add a photo-sensor to only turn on the LED Noodle when there is no light.  You can do this with a single transistor.</p>"},{"location":"led-noodles/project-ideas/#light-up-picture-frame","title":"Light-Up Picture Frame","text":"<p>Kids can decorate a plain picture frame with LED Noodles.  They can tape or glue the LED Noodles around the frame to create a glowing effect around their favorite photo or drawing.</p> <p>Learning Opportunity: Teaches basic circuitry and adds a creative element with personal artwork or photos.</p>"},{"location":"led-noodles/project-ideas/#led-noodle-shoelaces","title":"LED Noodle Shoelaces","text":"<p>Kids can lace LED Noodles into their shoes and light up their steps.  The flexible noodle can be woven like regular shoelaces,  with a small battery pack attached to the side of the shoe.</p> <p>Learning Opportunity: This project combines creativity with practical hands-on experience, introducing them to how circuits work with motion.</p>"},{"location":"led-noodles/project-ideas/#glowing-stuffed-animal","title":"Glowing Stuffed Animal","text":"<p>Take an old or DIY stuffed animal and weave LED Noodles into its body to create a glowing plush friend. The battery pack can be stored inside the stuffed animal with a simple on/off switch.</p> <p>Learning Opportunity: Encourages both crafting and basic electronics by integrating LEDs into soft materials.</p>"},{"location":"led-noodles/project-ideas/#illuminated-diy-house-or-maze","title":"Illuminated DIY House or Maze","text":"<p>Build a cardboard house, maze, or puzzle and use LED Noodles to light the paths. The noodle can be placed around the maze borders or inside the maze to create a glowing effect.</p> <p>Learning Opportunity: Enhances problem-solving skills while teaching kids about how electricity flows through circuits.</p>"},{"location":"led-noodles/project-ideas/#glow-in-the-dark-mask-or-costume","title":"Glow-in-the-Dark Mask or Costume","text":"<p>Kids can create a mask or costume for dress-up or Halloween using LED Noodles to light up different parts of their design. The noodles can outline the eyes, mouth, or patterns on the costume.</p> <p>Learning Opportunity: Teaches kids about low-power lighting and how to make functional yet artistic wearables.</p>"},{"location":"led-noodles/project-ideas/#bed-light-or-canopy","title":"Bed Light or Canopy","text":"<p>Make a canopy over a bed or play area and use the LED Noodles to create a starry sky effect.  The noodles can be strung across the fabric or attached to a wireframe to mimic stars or constellations.</p> <p>Learning Opportunity: Provides a fun way to introduce astronomy while experimenting with creative lighting setups.</p>"},{"location":"led-noodles/project-ideas/#colorful-paper-lanterns","title":"Colorful Paper Lanterns","text":"<p>Kids can make their own paper lanterns and illuminate them from inside with LED Noodles. By using colored paper or tissue, they can create unique glowing designs.</p> <p>Learning Opportunity: A simple and fun way to learn about how light interacts with colors and transparency.</p>"},{"location":"led-noodles/project-ideas/#glowing-bike-decoration","title":"Glowing Bike Decoration","text":"<p>Add LED Noodles to the spokes of a bicycle or wrap them around the frame for a glowing ride. The noodles are flexible enough to twist around the bike's shape, making the bike visible at night.</p> <p>Learning Opportunity: Encourages outdoor activities while learning about powering small electronics safely.</p>"},{"location":"led-noodles/project-ideas/#interactive-light-up-book-cover","title":"Interactive Light-Up Book Cover","text":"<p>Description: Use LED Noodles to make the cover of a notebook or book glow. Kids can design a creative cover using cardboard or felt and weave the LED Noodles into the design.</p> <p>Learning Opportunity: Combines art with electronics to make personalized school supplies.</p> <p>These projects not only engage creativity but also provide hands-on learning with basic electronics, enhancing their understanding of circuitry, electricity, and DIY design.</p>"},{"location":"led-noodles/static-circuits/","title":"Static Circuits","text":""},{"location":"led-noodles/static-circuits/#led-noodle-polarity","title":"LED Noodle Polarity","text":""},{"location":"led-noodles/static-circuits/#two-aa-or-aaa-battery-power","title":"Two AA or AAA Battery Power","text":"<p>This simple circuit has just two AA or AA batteries.  Each has a voltage of 1.5 volts.  When they are configured in series, the voltages of each battery is added together to give a voltage of 3 volts. This is exactly the recommended voltage for the LED Noodle!</p> <p></p> <p>Connect the terminals directly to the battery pack. Make sure that the positive polarity is connected to the end with the hole.  We used a soldering iron and standard tin-lead solder with a low melting point and that did not impact any of our LED noodles.</p>"},{"location":"led-noodles/static-circuits/#three-aa-or-aaa-battery-power","title":"Three AA or AAA Battery Power","text":"<p>If we need a little longer battery power, we can upgrade from two batteries to three.  This gives us a combined voltage of 4.5 volts (3 x 1.5 volts).</p> <p>To limit the current, we will need a a 15 ohm current-limiting resistor in series with a battery pack.</p> <p></p> <p>It is possible to use slightly different values of the current-limiting resistor.  A 10-ohm resistor will give a brighter light, but will drain the batteries faster.</p> <p>LED Noodle Calculator</p>"},{"location":"led-noodles/static-circuits/#9-volt-battery","title":"9-Volt Battery","text":"<p>Although they are not commonly used in our labs, in a pinch you can also use a 9-volt battery to light up the LED noodles.</p> <p></p> <p>Use a 100 ohm resistor in series with the battery.</p> <p></p> <p>9-volt batteries are easy to connect but they don't offer the best value compared to AA batteries.</p>"},{"location":"led-noodles/static-circuits/#usb-battery-packs","title":"USB Battery Packs","text":"<p>One great option is to use a rechargeable USB battery pack. These supply 5 volts and because they are rechargeable, they can be used many times over and over.</p> <p></p> <p>In the diagram above, we used a 20 ohm resistor in series with the LED noodle to limit the current to about 62 milliamps.  This is more than bright enough for most applications.  A 50 ohm resistor is also a good option and the battery will last considerably longer, but the LED will not be as bright.</p>"},{"location":"led-noodles/voltage-current-curve/","title":"Voltage Current Curve","text":""},{"location":"led-noodles/voltage-current-curve/#collecting-data","title":"Collecting Data","text":"<p>Using a variable voltage bench DC power supply, we can measure the exact voltage across the LED filament as well as the current.</p> <p>To gather the current for a given voltage I configured the settings of the bench power supply to be in Constant Voltage mode (C.V.) rather than Constant Current (C.C. mode).  This is done by pressing the Output button to toggle the modes.</p> <p>Here is a sample table of the current drawn for about a dozen voltages from 2.39 to 2.8 volts.</p> Voltage(v) Current(mA) 2.39 0 2.52 1 2.53 2 2.54 5 2.55 7 2.56 10 2.58 22 2.60 28 2.61 34 2.65 52 2.68 71 2.70 88 2.72 100 2.74 113 2.6 124 2.8 140 <p>More advanced bench power supplies can automatically step the voltage and log the current for analysis.</p>"},{"location":"led-noodles/voltage-current-curve/#plotting-these-values","title":"Plotting These Values","text":"<p>Here is a plot of these values:</p> <p></p>"},{"location":"led-noodles/voltage-current-curve/#creating-an-interactive-microsimulation","title":"Creating an Interactive MicroSimulation","text":"<p>Run Interactive Simulation of LED Noodle Current</p> <p>Note that this simulation was mostly created by ChatGPT o1-preview.  I had to adjust a few lines to make the plot a little more presentable.</p> <p>Here are the key aspects of this MicroSimulation:</p> <ul> <li>Plot Area: The plot occupies a central area within the canvas, with margins for labels and tick marks.</li> <li>Background: The canvas background is set to \"aliceblue\" for a pleasant visual effect.</li> <li>Gridlines: Light gray gridlines divide the plot area into a 10x10 grid for better readability.</li> <li>Axes: Both axes are drawn with thicker lines and include tick marks and labels.</li> <li>Data Curve: The voltage vs. current curve is drawn by interpolating between the provided data points.</li> <li>Data Points: Original data points are highlighted as red circles for emphasis.</li> <li>Interactive Dot: A blue dot moves along the curve as you adjust the voltage slider, indicating the current at that voltage.</li> </ul> <p>Here is the ChatGPT prompt that I used:</p> <pre><code>Create a p5.js sketch on a 600x600 canvas that shows the current\nwhen an input voltage changes, the current also changes in an LED circuit.\n\nMake the background of the canvas be \"aliceblue\". \nMake a single-line plot with voltage on the horizontal axis and current on the vertical axis.\nMake the title of the plot be \"LED Noodle Voltage vs. Current\".\nLabel the vertical axis \"Current\" and the horizontal axis \"Voltage\".\n\nMake the gridlines be light gray.\nAdd axis labels for both the current and the voltage.\nAdd a slider at the bottom of the canvas that allows the user to change the voltage from 2.35 up to 2.78 in steps of 0.01 with the default value of 2.55.\nWhen the user adjusts the slider, move a blue dot along the curve.\n\nUse the following data to draw the curve.  Draw the data points with a red circle.\n\n|Voltage(v)|Current(mA)|\n|------:|------:|\n|2.39|0|\n|2.52|1|\n|2.53|2|\n|2.54|5|\n|2.55|7|\n|2.56|10|\n|2.58|22|\n|2.60|28|\n|2.61|34|\n|2.65|52|\n|2.68|71|\n|2.70|88|\n|2.72|100|\n|2.74|113|\n|2.6|124|\n|2.8|140|\n</code></pre>"},{"location":"led-noodles/voltage-current-curve/#estimating-the-current-with-a-function","title":"Estimating the Current with a Function","text":"<p>Although our data gives us some precise data, there are always variables in our measurements.  However, we can see that the behavior of the current falls under two regions.  Below about 2.5 volts the current is essential zero.  Above 2.5 volts the curve is mostly a line with a little curve in it that shows an slight exponential growth.</p> <p>We can come up with a formula to approximate this using the following function:</p> <pre><code>function calculateCurrent(v) {\n  if (v &lt;= 2.5) {\n    return 0;\n  } else {\n    let A = 0.3296; // in mA\n    let B = 24; // per Volt\n    let linearCurrent = A * 300 * (v - 2.5);\n    let exponentialCurrent = 0.4 * Math.exp(B * (v - 2.5));\n    let current = linearCurrent + exponentialCurrent;\n    if (current &gt; 140) current = 140; // Limit to maximum data point\n    return current;\n  }\n}\n</code></pre> <p>You can explore more about this \"curve fitting process\" by looking at my chat with ChatGPT o1.preview.</p> <p> eBay Listing NICE-Power DC Variable Power Supply $38</p>"},{"location":"lessons/","title":"Moving Rainbow Lessons","text":""},{"location":"lessons/#simple-individual-patterns","title":"Simple Individual Patterns","text":"<ol> <li>Blink - blink the first pixel red on and off</li> <li>Fade In and Out - Make the first pixel fade in and out</li> <li>Heartbeat - Change the first red pixel to beat like a heartbeat</li> <li>Red, Green and Blue - Draw red, green and blue colors in different places</li> <li>Color Wheel - draw all the colors of the rainbow</li> <li>A Better Dimmer - making our dimmer more uniform</li> <li>Moving Pixel - move a pixel up and down the LED strip</li> <li>Color Wipe - change the color one pixel at a time</li> <li>Bounce - dots crash in the center of the strip</li> <li>Comet - make a block of color move with a dimming tail</li> <li>Moving Rainbow - move a block of colors </li> <li>Rainbow Cycle - cycle every pixel through all the colors of the rainbow</li> <li>Larson Scanner - famous Cylon eye and KITT car scanning pattern</li> <li>Random Colors - draw random colors at each pixel</li> <li>Twinkle - random pixels twinkle on for a brief second</li> <li>Ripple - simulated drops in a pond in 1-D</li> <li>Random Bounce - random points bounce around</li> <li>Candle - simulated candle flickers with randomness</li> <li>Theater Chase - classic running light patterns popular in signs</li> <li>Moving Bands - moving bands of color</li> </ol>"},{"location":"lessons/#rotating-patterns","title":"Rotating Patterns","text":"<ol> <li>Modes - assign a mode to each pattern</li> <li>Button Modes - use buttons to change a mode</li> </ol>"},{"location":"lessons/01-blink/","title":"Blink","text":"<p>Here is one of simplest moving rainbow programs.  It is our version of \"Hello World!. </p> <p>Our first program will just blink the first pixel on and off every 1/2 second.</p> <pre><code>from neopixel import NeoPixel\nfrom utime import sleep\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\n\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\nwhile True:\n    # turn first red pixel on for 1/2 second\n    strip[0] = (255,0,0)\n    strip.write()\n    sleep(.5)\n\n    # turn off for 1/2 second\n    strip[0] = (0,0,0)\n    strip.write()\n    sleep(.5)\n</code></pre>"},{"location":"lessons/01-blink/#exercises","title":"Exercises","text":""},{"location":"lessons/01-blink/#change-the-color-lab","title":"Change the Color Lab","text":"<ol> <li>Change the line: <code>strip[0] = (255,0,0)</code> to be: <code>strip[0] = (0,255,0)</code></li> </ol> <p>What happens?</p>"},{"location":"lessons/01-blink/#change-the-position-lab","title":"Change the Position Lab","text":"<ol> <li>Change the line: <code>strip[0] = (255,0,0)</code> to be: strip[1] = (255,0,0)</li> </ol> <p>What happens?</p>"},{"location":"lessons/01-blink/#change-the-sleep-time","title":"Change the Sleep Time","text":"<p>What happens if you change the sleep time?</p> <p>from: <code>sleep(.5)</code> to: <code>sleep(.1)</code></p> <p>What is the smallest time you can use and still see flashing?  Hint: Try values like <code>.05</code>, or <code>.005</code></p>"},{"location":"lessons/01-blink/#rgb-lab","title":"RGB Lab","text":"<ol> <li>Change the line: <code>strip[0] = (255,0,0)</code> to be: <pre><code>strip[0] = (255,0,0)\nstrip[1] = (0,255,0)\nstrip[2] = (0,0,255)\n</code></pre> and change the <pre><code>    strip[0] = (0,0,0)\n    strip[1] = (0,0,0)\n    strip[2] = (0,0,0)\n</code></pre></li> </ol> <p>What happened?</p>"},{"location":"lessons/01-blink/#why-do-we-need-stripwrite","title":"Why Do We Need Strip.Write?","text":"<p>Try to remove one of the line that does strip.write().  What happens?  Why do you think we need this line?</p>"},{"location":"lessons/01-blink/#led-strip-state","title":"LED Strip State","text":"<p>What happens if you stop the program when the LED strip LEDs are on? </p>"},{"location":"lessons/01-blink/#on-your-own","title":"On Your Own","text":"<p>What if you extended the lab to more positions and colors?</p>"},{"location":"lessons/02-fade-in-and-out/","title":"Fade In and Out Lab","text":"<p>What if instead of the first LED just turning on and off we want to slowly make the LED get brighter and then slowly dimmer?  To do this we will change the brightness of the red from off (0) to fully on (255) in steps with a small delay of 1/100th of a second between the steps.</p> <pre><code>from neopixel import NeoPixel\nfrom time import sleep\n\nNUMBER_PIXELS = 1\nLED_PIN = 0\n\nstrip = NeoPixel(machine.Pin(LED_PIN), NUMBER_PIXELS)\n\n# the time between each of the 255 brightness steps\ndelay = .01\n\nwhile True:\n    # slowly get brighter\n    for i in range(0, 255):\n        strip[0] = (i,0,0) # red=255, green and blue are 0\n        strip.write() # send the data from RAM down the wire\n        sleep(delay)\n    # slowly get dimmer\n    for i in range(255, 0, -1):\n        strip[0] = (i,0,0)\n        strip.write()\n        sleep(delay)\n</code></pre>"},{"location":"lessons/03-heartbeat/","title":"Heartbeat Lab","text":"<p>What if you were building a robot and you wanted to flash the LED to look like a human heartbeat?  Instead of slowing fading in and out, you would want the brightness to follow the electrical signals coming from the heart. This is called an elecrto cardiogram (EKG) and it look like this:</p> <p></p> <p>Notice that the signal is low for about one second and then it spikes up to maximum brightness and then comes back down. When we are moving the brightness up and down, we don't have to pause between each of the 256 brightness values. The eye can't usually see the intermediate brightness values if the brightness is changing quickly. To make our code efficient we can skip over 9 out of 10 of the brightness gradations between 0 and 255. We call this the skip_interval in our code below.</p> <p>The following code emulates this heart beat pattern:</p> <pre><code>from neopixel import NeoPixel\nfrom time import sleep\n\n# Most people have a heart rate of around 60-70 beats per minute\n# If we add a once second delay between \"beats\" you can make and LED\n# look like a beating heart.\n\nNUMBER_PIXELS = 1\nLED_PIN = 0\n\nstrip = NeoPixel(machine.Pin(LED_PIN), NUMBER_PIXELS)\n\nramp_delay = .001\nbeat_delay = 1\nskip_interval = 10\n\nwhile True:\n    # ramp brightness up using the ramp_delay\n    for i in range(0, 255, skip_interval):\n        strip[0] = (i,0,0)\n        strip.write()\n        sleep(ramp_delay)\n    # ramp brightness down using the same delay\n    for i in range(255, 0, -skip_interval):\n        strip[0] = (i,0,0)\n        strip.write()\n        sleep(ramp_delay)\n    strip[0] = (0,0,0)\n    strip.write()\n    sleep(beat_delay)\n</code></pre>"},{"location":"lessons/04-red-green-blue/","title":"Red, Green and Blue","text":"<p>In this lesson, we will draw three different colors at three different locations on the LED strip.  We will then repeat this pattern down the strip.</p> <p>Our first task is to draw the red, green and blue in the first three pixels of the LED strip.</p> <p>Our main code will be the following</p> <pre><code># make the fist location red\nstrip[0] = (255,0,0)\n# make the second location green\nstrip[1] = (0,255,0)\n# make the third location blue\nstrip[2] = (0,0,255)\n# update the strip\nstrip.write()\n</code></pre>"},{"location":"lessons/04-red-green-blue/#full-program","title":"Full Program","text":"<pre><code>from machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep, ticks_ms\nfrom urandom import randint\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\n# make the fist location red\nstrip[0] = (255,0,0)\n# make the second location green\nstrip[1] = (0,255,0)\n# make the third location blue\nstrip[2] = (0,0,255)\n# update the strip\nstrip.write()\n</code></pre>"},{"location":"lessons/04-red-green-blue/#repeating-the-pattern","title":"Repeating the Pattern","text":"<p>Now, let's repeat this pattern over the entire strip.  We can do this by wrapping the three lines in a for loop like this:</p> <pre><code>from machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep, ticks_ms\nfrom urandom import randint\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n# count 0 to the end skipping every 3\nfor i in range(0, NUMBER_PIXELS-1, 3):\n    strip[i] = (255,0,0)\n    # make the second location green\n    strip[i+1] = (0,255,0)\n    # make the third location blue\n    strip[i+2] = (0,0,255)\n    # update the strip\nstrip.write()\n</code></pre> <p>Note here that the range function has a third parameter that tells us how many to skip in each iteration of the loop.  Since we have three colors, we can skip every three values of i.  I will get values of 0, 3, 6, 9, 12... etc.</p>"},{"location":"lessons/04-red-green-blue/#excercises","title":"Excercises","text":""},{"location":"lessons/05-color-wheel/","title":"Color Wheel Lab","text":"<p>What if we wanted to slowly vary the color of one of our pixels through all the colors of the rainbow?  What we would like is a function that would take in an number from 0 to 255 and walk around the color wheel as you change the input value.  This is known as the <code>`wheel</code> function:</p> <pre><code>def wheel(pos):\n    # Input a value 0 to 255 to get a color value.\n    # The colors are a transition r - g - b - back to r.\n    if pos &lt; 0 or pos &gt; 255:\n        return (0, 0, 0)\n    if pos &lt; 85:\n        return (255 - pos * 3, pos * 3, 0)\n    if pos &lt; 170:\n        pos -= 85\n        return (0, 255 - pos * 3, pos * 3)\n    pos -= 170\n    return (pos * 3, 0, 255 - pos * 3)\n</code></pre> <p>If you follow the code, you will see that the colors range from red through green and to blue and back to red:</p> <pre><code>wheel(1) = (255, 0, 0) # red\nwheel(85) = (0,255, 0) # green\nwheel(170) = (0, 0, 255) # blue\nwheel(255) = (255, 0, 0) # red\n</code></pre>"},{"location":"lessons/05-color-wheel/#full-program","title":"Full Program","text":"<p>This program will continu</p> <pre><code>import machine\nfrom neopixel import NeoPixel\nfrom utime import sleep\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 1\n\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\ndef wheel(pos):\n    # Input a value 0 to 255 to get a color value.\n    # The colors are a transition r - g - b - back to r.\n    if pos &lt; 0 or pos &gt; 255:\n        return (0, 0, 0)\n    if pos &lt; 85:\n        return (255 - pos * 3, pos * 3, 0)\n    if pos &lt; 170:\n        pos -= 85\n        return (0, 255 - pos * 3, pos * 3)\n    pos -= 170\n    return (pos * 3, 0, 255 - pos * 3)\n\ncounter = 0\nwhile True:\n    strip[0] = wheel(counter)\n    strip.write()\n    sleep(.01)\n    counter += 1\n    # reset the counter\n    if counter == 255:\n        counter = 0\n</code></pre>"},{"location":"lessons/06-linear-dimmer/","title":"Linear Dimmer","text":"<p>We can dim a single LED by using PWM or we can dim a NeoPixel by sending it a value from 0 to 255 for the brightness.</p> <p></p> <p></p> <p>https://docs.micropython.org/en/latest/pyboard/tutorial/fading_led.html</p>"},{"location":"lessons/06-linear-dimmer/#gamma-correction-table","title":"Gamma Correction Table","text":"<pre><code>gamma8= [\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,\n    1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,\n    2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,\n    5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,\n   10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,\n   17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,\n   25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,\n   37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,\n   51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,\n   69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,\n   90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,\n  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,\n  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,\n  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,\n  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255]\n</code></pre> <pre><code>## Gamma Correction Function\n# input is an integer from 0 to 255\ndef gamma8(input):\n    return gamma8[input]\n</code></pre>"},{"location":"lessons/07-motion/","title":"Motion","text":"<p>Turning individual pixels on and off is pretty easy.  But the results can be pretty boring after a while.  But don't worry, we can now create a program that is a lot more fun!</p> <p>This program uses the Python <code>for</code> loop.  It uses a counter, called an index, to turn on successive pixels in the strip.  For each pixel it turn it on, delays for a short period of time, and then turns it off.  It then moves on to the next pixel until each pixel is the strip has been turned on for short period.</p>"},{"location":"lessons/07-motion/#move-a-red-pixel","title":"Move a Red Pixel","text":"<p>The following program illustrates this process.</p> <pre><code>from neopixel import NeoPixel\nfrom utime import sleep\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\n\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\n# Create a variable to store the delay \ndelay = .03\nwhile True:\n    for i in range(0, NUMBER_PIXELS - 1):\n        # turn index red pixel on for a short delay\n        strip[i] = (255,0,0)\n        strip.write()\n        sleep(delay)\n\n        # turn off\n        strip[i] = (0,0,0)\n</code></pre> <p>You will note that this program is similar to the blink lab with a few key differences:</p> <ol> <li>The code that turns the pixel on and off is inside the for loop.</li> <li>There is no delay or write after we turn it off.  You could add these back in, but they are not really needed.</li> </ol> <p>Note that the delary time in this program is stored in the <code>delay</code> variable and it is a pretty short delay.  The shorter the delay, the faster the pixel will appear to move.</p>"},{"location":"lessons/07-motion/#experiments","title":"Experiments","text":""},{"location":"lessons/07-motion/#change-the-delay","title":"Change the Delay","text":"<p>Try to change the <code>delay</code> variable to different values.  Note how slow the pixel moves if you make the delay a full second.  This is pretty boring.</p> <ol> <li>Change the delay to be .01.  This is 1/100th of a second.</li> <li>What is the fastest you can make the pixel move?</li> <li>What happens if you make the delay less than <code>.001</code>.  Can you still notice the change in the speed?  Many people can't tell the difference because the time to do the <code>strip.write()</code> function is much longer than the delay.</li> </ol>"},{"location":"lessons/07-motion/#down-and-back","title":"Down and Back","text":"<p>Next, lets try to make the pixel appear to move down the LED strip and then back up.  We call this the \"Down and Back\" pattern.  To do this we just need to duplicate the for loop, but change the range of the index.  Instead of going from 0 to NUMBER_PIXELS - 1, we will start at NUMBER_PIXELS - 1 and then go backwards each step:</p> <pre><code>from neopixel import NeoPixel\nfrom utime import sleep\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\n# Create a varuabke to store the delay \ndelay = .01\nwhile True:\n    # move down\n    for i in range(0, NUMBER_PIXELS - 1):\n        strip[i] = (255,0,0)\n        strip.write()\n        sleep(delay)\n        strip[i] = (0,0,0)\n\n    # move back\n    for i in range(NUMBER_PIXELS - 1, 0, -1):\n        # turn index red pixel on for and delay\n        strip[i] = (255,0,0)\n        strip.write()\n        sleep(delay)\n        strip[i] = (0,0,0)\n</code></pre>"},{"location":"lessons/07-motion/#advanced-lab-timeing-the-write","title":"Advanced Lab: Timeing the Write","text":"<p>You can measure the time it takes do perform the <code>strip.write()</code> by recording the number of \"ticks\" before and after the write.  See the function <code>time.ticks_us()</code> for details.</p> <pre><code>from neopixel import NeoPixel\nfrom utime import sleep, ticks_us\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\n\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\nstart = ticks_us()\nstrip.write()\nprint(ticks_us() - start)\n</code></pre> <p>On a 60=pixel strip using the 125MHz Pico I get a value of about 1,960 microseconds or about 2 milliseconds.  The shorter the LED strip, the shorter the delay.  Longer LED strips will have a correspondingly longer delay.</p>"},{"location":"lessons/07-motion/#have-some-fun","title":"Have Some Fun!","text":"<ol> <li>Try to change the color of the pixel.</li> <li>Try to change the direction of motion from the last to the beginning pixel.</li> <li>Try making the </li> </ol>"},{"location":"lessons/07-random/","title":"Using Random Numbers","text":"<p>One fun way to spice up our LED strips is to randomly light up a different pixel with a random color.  Here is how we do this.</p> <p>First, We need to import the library that generate random numbers:</p> <pre><code>from urandom import randint\n</code></pre> <p>Next, we need to generate a random number within a fixed range:</p> <pre><code>    random_red_brightness = randint(0, 256)\n</code></pre> <p>Let's create a program that will briefly light up an random pixel with a random color.  To do this we first generate a random location on the LED strip, then we get a random value for the red, green and blue brightness:</p> <pre><code>location = randint(0, NUMBER_PIXELS-1)\n    red = randint(0, 256)\n    green = randint(0, 256)\n    blue = randint(0, 256)\n</code></pre> <p>Here is the full program.</p> <pre><code># 07-random color at a random location\nfrom machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep\nfrom urandom import randint\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\n\nstrip = NeoPixel(Pin(config.NEOPIXEL_PIN), NUMBER_PIXELS)\n\nwhile True:\n    location = randint(0, NUMBER_PIXELS-1)\n    red = randint(0, 256)\n    green = randint(0, 256)\n    blue = randint(0, 256)\n    strip[location] = (red, green, blue)\n    strip.write()\n    sleep(.5)\n    strip[location] = (0, 0, 0)\n</code></pre>"},{"location":"lessons/08-color-wipe/","title":"Color Wipe","text":"<p>This lesson shows you how to change the color of the entire LED strip pixel by pixel.  There will be two delays that we can control:</p> <ol> <li>the delay between each pixel update - this is usually about 1/20th of a second</li> <li>the delay between colors - this is usually about 1 to 2 seconds</li> </ol>"},{"location":"lessons/08-color-wipe/#a-simple-color-wipe-function","title":"A Simple Color Wipe Function","text":"<p>To write this program, we will create a simple Python function that will cycle through all the colors in a list.  Our color list will look like this:</p> <pre><code>red = (255, 0, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\n...etc...\ncolors = (red, orange, yellow, green, blue, cyan, indigo, violet, white)\n</code></pre> <p>Now with this list</p> <pre><code>def color_wipe(delay, color_delay):\n    for color in colors:\n        for i in range(0, NUMBER_PIXELS):\n            strip[i] = color\n            strip.write()\n            # the delay between each pixel draw\n            sleep(delay)\n        # how long to pause between color changes\n        sleep(color_delay)\n</code></pre> <pre><code>from time import sleep\n\n# most people have a heart rate of around 60-70 beats per minute\n# If you add a once second deplay between \"beats\" you can make and LED\n# look like a beating heart.\n\nNUMBER_PIXELS = 60\nLED_PIN = 0\n\nstrip = NeoPixel(machine.Pin(LED_PIN), NUMBER_PIXELS)\n\nred = (255, 0, 0)\norange = (140, 60, 0)\nyellow = (255, 255, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\ncyan = (0, 255, 255)\nindigo = (75, 0, 130)\nviolet = (138, 43, 226)\nwhite = (128, 128, 128)\ncolors = (red, orange, yellow, green, blue, cyan, indigo, violet, white)\n\ndef color_wipe(delay, color_delay):\n    for color in colors:\n        for i in range(0, NUMBER_PIXELS):\n            strip[i] = color\n            strip.write()\n            sleep(delay)\n        # how long to pause between color changes\n        sleep(color_delay)\n\nwhile True:\n    color_wipe(.05, 1)\n</code></pre>"},{"location":"lessons/08-moving-bands/","title":"Moving Bands of Color","text":"<p>In this lesson, we will create a program that will move a set of bands of color down the LED strip.  To do this we will create a function called <code>draw_band(start, end, color)</code> that will fill a range of pixels with a given color.</p> <pre><code>def draw_band(start, end, color, delay):\n    # draw the band from start to end\n    for i in range(start, end):\n        strip[i % NUMBER_PIXELS] = color\n</code></pre> <p>This works, but we also have the problem that the last pixel does not get erased</p> <pre><code>def draw_band(start, end, color, erase_tail, delay):\n    # draw the band from start to end\n    for i in range(start, end):\n        strip[i % NUMBER_PIXELS] = color\n    # erase the last pixel on the erase tail band\n    if erase_tail and start &gt; 0:\n        strip[(start-1) % NUMBER_PIXELS] = (0,0,0)\n    strip.write()\n    sleep(delay)\n</code></pre> <p>We can then draw three \"bands\" of color like this:</p> <pre><code>draw_band(0, 9, 'red')\ndraw_band(10, 19, 'green')\ndraw_band(20, 29, 'blue')\n</code></pre> <p>We can make this group of bands appear to move by adding a offset to the start like this:</p> <pre><code>for i in range(0, NUMBER_PIXELS)\n    draw_band(i, i+9, 'red')\n    draw_band(i+10, i+19, 'green')\n    draw_band(i+20, i+29, 'blue')\n</code></pre> <p>This will work fine until the value of i plus the offset exceeds the length of the LED strip.  To get around this, we should never write to location i by itself.  We should always divide i by the strip lenght and write to the remainder, what is call the modulo.  We just have to change one line in the draw_band function:</p> <pre><code>def draw_band(start, end, color):\n    for i in range(start, end):\n        strip[i%NUMBER_PIXELS] = color\n    strip.write()\n</code></pre>"},{"location":"lessons/08-rainbow/","title":"Rainbow","text":"<p>Now let bring some real color to this class!</p>"},{"location":"lessons/08-rainbow/#the-big-wheel-function","title":"The Big Wheel Function","text":"<p>Let me introduce you to one of the most colorful functions in the MicroPython world.  It is the famous <code>wheel</code> function. When you think of the color wheel, think of the <code>wheel</code> function. Wouldn't it be nice to just take a stroll around the color wheel and walk through all the colors of the rainbow!  Well, <code>wheel</code> is here to help you do just that!</p> <p>The <code>wheel</code> functions looks like this:</p> <p><pre><code>wheel(color_number_0_to_255)\n</code></pre> You just give it a number from 0 to 255 and it will return a red, green and blue number that will span the spectrum from red, orange, yellow, green, blue, indigo and violet and then back to red again.</p> <p>Here is the entire elegant wheel function in all its glory:</p> <pre><code>def wheel(pos):\n    # Input a value 0 to 255 to get a color value.\n    # The colors are a transition r - g - b - back to r.\n    if pos &lt; 0 or pos &gt; 255:\n        return (0, 0, 0)\n    if pos &lt; 85:\n        return (255 - pos * 3, pos * 3, 0)\n    if pos &lt; 170:\n        pos -= 85\n        return (0, 255 - pos * 3, pos * 3)\n    pos -= 170\n    return (pos * 3, 0, 255 - pos * 3)\n</code></pre> <p>Here is a markdown table with the values for 10 common colors from the wheel function. The wheel function creates a smooth transition from red to green to blue and back to red as the input value goes from 0 to 255.</p>"},{"location":"lessons/08-rainbow/#common-colors-in-the-wheel-function","title":"Common Colors in the Wheel Function","text":"Color Name Wheel Position RGB Values Red 0 (255, 0, 0) Orange 32 (159, 96, 0) Yellow 64 (63, 192, 0) Green 85 (0, 255, 0) Teal 127 (0, 129, 126) Cyan 128 (0, 128, 127) Blue 170 (0, 0, 255) Purple 191 (63, 0, 192) Magenta 213 (126, 0, 129) Pink 234 (189, 0, 66) <p>This table shows how the wheel function generates a spectrum of colors by adjusting the RGB values based on the input position (0-255). Each position produces a unique combination of red, green, and blue values, creating the full color wheel.</p> <p>I suggest you bookmark this page because for fun projects we will come back to this function frequently.</p>"},{"location":"lessons/08-rainbow/#testing-the-wheel-program","title":"Testing the Wheel Program","text":"<p>Here is a full test program that will demonstrate how the <code>wheel</code> function is used in practice.</p> <pre><code>from machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep\nfrom urandom import randint\n# get the configuration information\n\nNUMBER_PIXELS = 30\nstrip = NeoPixel(Pin(0), np)\n# we have each pixel step through the color wheel\ncolor_wheel_step = int(256 / NUMBER_PIXELS)\n\ndef wheel(pos):\n    # Input a value 0 to 255 to get a color value.\n    # The colors are a transition r - g - b - back to r.\n    if pos &lt; 0 or pos &gt; 255:\n        return (0, 0, 0)\n    if pos &lt; 85:\n        return (255 - pos * 3, pos * 3, 0)\n    if pos &lt; 170:\n        pos -= 85\n        return (0, 255 - pos * 3, pos * 3)\n    pos -= 170\n    return (pos * 3, 0, 255 - pos * 3)\n\ncurrent_color = 0\nprint('Drawing rainbow in', np, 'steps with step size of: ', color_wheel_step)\nfor i in range(0,NUMBER_PIXELS):\n    strip[i] = wheel(current_color)\n    current_color = current_color + color_wheel_step\n    print(i, current_color, wheel(current_color))\n    strip.write()\n    sleep(.03)\n</code></pre>"},{"location":"lessons/09-comet-tail/","title":"Comet Tail","text":"<p>In this lesson we will make a pattern of light like a comet tail.  The comet will consist of about 5 to 10 pixels in a row and move across the strip by shifting the offset by a single pixel and then redrawing the comet.</p>"},{"location":"lessons/09-comet-tail/#the-draw-comet-tail-function","title":"The Draw Comet Tail Function","text":"<p>Our first task is to draw a single comet tail that will make the head of the comet bright (225) and slowly decrease the brightness behind the head of the comet.  In general, each pixel will be half as bright and the prior pixel.</p> <p>The \"levels\" of brightness can be stored in a list or calculated.  Our list will look like this:</p> <pre><code># brightness levels starting with max and going to 1\nlevels = [255, 128, 64, 32, 16, 8, 4, 2, 1]\n</code></pre> <p>Our function will have three parameters:</p> <ol> <li>The offset from pixel 0</li> <li>The color to draw the pixel as a tuple of three integers</li> <li>The delay between the draws which will control the speed that the comet appears to move down the strip</li> </ol> <p>Here is an example of this function:</p> <pre><code># offset should be incremented by one for motion\ndef draw_comet_tail(offset, color, delay):\n    % make sure we are within the range of the LED strip\n    offset = offset % NUMBER_PIXELS\n    for i in range(0, color_count):\n        target = ((level_count - i - 1) + offset) % NUMBER_PIXELS\n        # number to scale by\n        scale = (levels[i] / 255)\n        # set the target and scale and round to the interger value\n        strip[target] = (int(color[0]*scale), int(color[1]*scale), int(color[2]*scale))      \n        if offset &gt; 0:\n            strip[offset-1] = (0,0,0)\n        if offset == NUMBER_PIXELS-1:\n            strip[offset] = (0,0,0)\n        strip.write()\n        sleep(delay)\n</code></pre> <p>The most complex line is this one:</p> <pre><code>strip[target] = (int(color[0]*scale), int(color[1]*scale), int(color[2]*scale))\n</code></pre> <p>This line sets the RGB values of the target.  It must take the color values that are passed in as parameters and scale them for the current brightness of the tail of the comet.  After it does the multiplication, it must use the <code>int()</code> function to round the value to the nearest integer.</p>"},{"location":"lessons/09-comet-tail/#full-program","title":"Full Program","text":"<pre><code>from machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\nred = (255, 0, 0)\norange = (140, 60, 0)\nyellow = (255, 255, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\ncyan = (0, 255, 255)\nindigo = (75, 0, 130)\nviolet = (138, 43, 226)\nwhite = (128, 128, 128)\ncolors = (red, orange, yellow, green, blue, indigo, violet, cyan, white)\ncolor_count = len(colors)\nlevels = [255, 128, 64, 32, 16, 8, 4, 2, 1]\nlevel_count = len(levels)\n\ndef wheel(pos):\n    # Input a value 0 to 255 to get a color value.\n    # The colors are a transition r - g - b - back to r.\n    if pos &lt; 0 or pos &gt; 255:\n        return (0, 0, 0)\n    if pos &lt; 85:\n        return (255 - pos * 3, pos * 3, 0)\n    if pos &lt; 170:\n        pos -= 85\n        return (0, 255 - pos * 3, pos * 3)\n    pos -= 170\n    return (pos * 3, 0, 255 - pos * 3)\n\n# offset should be incremented by one for motion\ndef draw_comet_tail(offset, color, delay):\n    offset = offset % NUMBER_PIXELS\n    for i in range(0, color_count):\n        target = ((level_count - i - 1) + offset) % NUMBER_PIXELS\n        # number to scale by\n        scale = (levels[i] / 255)\n        strip[target] = (int(color[0]*scale), int(color[1]*scale), int(color[2]*scale))      \n        if offset &gt; 0:\n            strip[offset-1] = (0,0,0)\n        if offset == NUMBER_PIXELS-1:\n            strip[offset] = (0,0,0)\n        strip.write()\n        sleep(delay)\n\n\ndef clear():\n    for i in range(0, NUMBER_PIXELS):\n        strip[i] = (0,0,0)\n    strip.write()\n\n# setup\ncounter = 0\nclear()\n\n# main loop\nwhile True:\n    for color_index in range(0, color_count):\n        for i in range(0, NUMBER_PIXELS):\n            draw_comet_tail(counter, colors[color_index], .005)\n            counter += 1\n            print(counter)\n</code></pre>"},{"location":"lessons/10-moving-rainbow/","title":"Moving Rainbow","text":"<p>In this lesson we will combine the work we did with the color wheel with the motion lesson to create a new lab that moves a block of different colors over the LED strip.  This lab is a little tricker because we need to pay careful attention to our work at the beginning and end of the LED strip to avoid setting values outside the valid indexes of our strip.</p> <p>We will begin with drawing a static hand-built list of colors on our strip.  We call this doing it \"the hard way\".  After that we will show you have to create more a more flexible version using the color wheel function that we covered in a previous lab.</p>"},{"location":"lessons/10-moving-rainbow/#the-classic-rainbow","title":"The Classic Rainbow","text":"<p>Let's begin by simply creating a named list of colors in a rainbow: red, orange, yellow, green, blue, indigo and violet.  We can lookup the red, green and blue values of these colors on Wikipedia.</p> Color Red, Green, and Blue Red 255,0,0 Orange 255,165,0 Yellow 255,255,0 Green 0,255,0 Blue 0,0,255 Indigo 75,0,130 Violet 238,130,238 <p>We can then put the colors into a Python data structure called a list:</p> <pre><code># Color RGB values as tuples\nred = (255, 0, 0)\norange = (255, 165, 0)\nyellow = (255, 255, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\nindigo = (75, 0, 130)\nviolet = (238, 130, 238)\ncolor_names = ('red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet')\nnum_colors = len(color_names)\ncolors = (red, orange, yellow, green, blue, indigo, violet)\n</code></pre> <p>We can then draw these colors in each of the first seven pixels like this:</p> <pre><code>from neopixel import NeoPixel\nfrom utime import sleep, sleep_ms\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n# Color RGB values\nred = (255, 0, 0)\norange = (255, 60, 0)\nyellow = (255, 150, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\nindigo = (75, 0, 130)\nviolet = (138, 43, 226)\ncolor_names = ('red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet')\nnum_colors = len(color_names)\ncolors = (red, orange, yellow, green, blue, indigo, violet)\n\nindex = 0\nfor color in colors:\n    strip[index] = colors[index]\n    index += 1\nstrip.write()\n</code></pre> <p>Here is the important new line:</p> <pre><code>strip[index] = colors[index]\n</code></pre> <p>It says, for the current index, set the strip value to the three values in the colors list.</p> <p>We can then \"move\" this pattern down the strip until we reach the end by redrawing it over and over and erasing it in between.</p> <pre><code>from neopixel import NeoPixel\nfrom utime import sleep, sleep_ms\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n# Color RGB values\nred = (255, 0, 0)\norange = (255, 60, 0)\nyellow = (255, 150, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\nindigo = (75, 0, 130)\nviolet = (138, 43, 226)\ncolor_names = ('red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet')\nnum_colors = len(color_names)\ncolors = (red, orange, yellow, green, blue, indigo, violet)\n\nfor i in range(0, NUMBER_PIXELS - num_colors + 1):\n    index = 0\n    # draw the rainbow\n    for color in colors:\n        strip[index + i] = colors[index]\n        index += 1\n    strip.write()\n    sleep(.05)\n    # erase the current pixel\n    strip[i] = (0,0,0)\n</code></pre> <p>There are a few tricky adjustments we had to make:</p> <ol> <li>We added the index counter to the strip index so that we would start drawing at a different point each time.</li> <li>We had to not go to the end of the LED strip.  We had to stop <code>num_colors + 1</code> before the end of the strip.</li> <li>We had to erase the current pixel after we drew the colors.</li> </ol>"},{"location":"lessons/10-moving-rainbow/#repeating-the-moving-rainbow","title":"Repeating the Moving Rainbow","text":"<p>Finally, we can wrap this entire section in a <code>while True</code> loop that will keep running the pattern over and over.</p> <pre><code>from neopixel import NeoPixel\nfrom utime import sleep, sleep_ms\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n# Color RGB values\nred = (255, 0, 0)\norange = (255, 60, 0)\nyellow = (255, 150, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\nindigo = (75, 0, 130)\nviolet = (138, 43, 226)\ncolor_names = ('red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet')\nnum_colors = len(color_names)\ncolors = (red, orange, yellow, green, blue, indigo, violet)\n\nwhile True:\n    for i in range(0, NUMBER_PIXELS - num_colors + 1):\n        index = 0\n        # draw the rainbow\n        for color in colors:\n            strip[index + i] = colors[index]\n            index += 1\n        strip.write()\n        sleep(.05)\n        # erase the current pixel\n        strip[i] = (0,0,0)\n        # erase the last draw\n        if i == NUMBER_PIXELS - num_colors:\n            strip[i+1] = (0,0,0)\n            strip[i+2] = (0,0,0)\n            strip[i+3] = (0,0,0)\n            strip[i+4] = (0,0,0)\n            strip[i+5] = (0,0,0)\n            strip[i+6] = (0,0,0)\n            strip.write()\n</code></pre> <p>Note that we had to add a few extra lines of code to make the final draw get removed after the last draw in the outer loop.</p>"},{"location":"lessons/10-moving-rainbow/#improving-on-the-moving-rainbow","title":"Improving on the Moving Rainbow","text":"<p>This program is simple to read, but there are several ways we could improve it.</p> <p>One of the awkward characteristics of the program is that he rainbow pattern just suddenly \"appears\" at the front of the strip and then \"dissapers\" at the end of the strip.  This is OK for a strip in a line, but if you wrap the strip in a circle it looks odd.</p> <p>For a circular loop we would like the pattern to appear one pixel at a time and then appear to slide from the end to the beginning of the strip.  We can achieve this by using the modulo function.  It will take a counter and find the \"remainder\" after we divide it by the number of pixels in the strip.</p> <p>What if we wanted our rainbow to be a different number of pixels?  It would be ideal of we could just write a function that would draw the right pixels at the right place.  Perhaps we could just add a parameter to that function for the number of pixels in our rainbow?</p>"},{"location":"lessons/11-rainbow-cycle/","title":"Rainbow Cycle","text":"<p>In this lesson we will use the wheel function to slowly cycle each pixel in a range through each of the colors of the rainbow.</p>"},{"location":"lessons/11-rainbow-cycle/#the-rainbow-cycle-function","title":"The Rainbow Cycle Function","text":"<p>We create a function called <code>rainbow_cycle()</code> that has three parameters.  The first is a delay, the second is a number that increase the precision of the color changes which impacts the speed, the third is how many pixels to skip over.</p> <pre><code>def rainbow_cycle(wait, speed, skip):\n    global NUMBER_PIXELS, strip\n    # get a color - speed will skip intermediate colors for faster cycles\n    for j in range(0, 255, speed):\n        for i in range(0, NUMBER_PIXELS, skip):\n            rc_index = (i * 256 // NUMBER_PIXELS) + j\n            # print(rc_index)\n            strip[i] = wheel(rc_index &amp; 255)\n        strip.write()\n    sleep(wait)\n</code></pre> <p>Next, we place a <code>while True()</code> loop at end and call the function repeatedly.  </p>"},{"location":"lessons/11-rainbow-cycle/#power-considerations","title":"Power Considerations","text":"<p>This program has the ability to drive every single pixel on the strip.  This has the disadvantage that it will drain batteries too quickly or exceed the power levels of a USB power supply.</p> <p>To get around this you can up the <code>skip</code> parameter to only turn on every 2nd, 3rd or 4th pixel.</p> <p>The entire rainbow cycle loop takes a few seconds to run, so be aware of this limitation if you are adding controls or interrupts.</p>"},{"location":"lessons/11-rainbow-cycle/#full-program","title":"Full Program","text":"<p>Here is the full program you can run.  Make sure to change the NUMBER_PIXELS parameter to match the length of your LED strip.</p> <pre><code>from machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\ndef wheel(pos):\n    # Input a value 0 to 255 to get a color value.\n    # The colors are a transition r - g - b - back to r.\n    if pos &lt; 0 or pos &gt; 255:\n        return (0, 0, 0)\n    if pos &lt; 85:\n        return (255 - pos * 3, pos * 3, 0)\n    if pos &lt; 170:\n        pos -= 85\n        return (0, 255 - pos * 3, pos * 3)\n    pos -= 170\n    return (pos * 3, 0, 255 - pos * 3)\n\ndef rainbow_cycle(wait, speed, skip):\n    global NUMBER_PIXELS, strip\n    # get a color - speed will skip intermediate colors for faster cycles\n    for j in range(0, 255, speed):\n        for i in range(0, NUMBER_PIXELS, skip):\n            rc_index = (i * 256 // NUMBER_PIXELS) + j\n            # print(rc_index)\n            strip[i] = wheel(rc_index &amp; 255)\n        strip.write()\n    sleep(wait)\n\n# s[eed is an integer from 1 to 30\nspeed = 2\n# skip = 1 is every pixel, 2 is every other pixel etc.\n# the hither skip the lower the overall power\nskip = 3\nwhile True:\n    rainbow_cycle(.01, speed, skip)\n</code></pre>"},{"location":"lessons/15-random/","title":"Random Drawing","text":"<p>In this lesson we will introduce the ability to draw random colors at random pixels.  This allows us to create more natural patterns such as the flicking light of a candle.</p>"},{"location":"lessons/15-random/#the-random-functions","title":"The Random Functions","text":"<p>We need a function that will generate a random integer between a range of values. This is called the <code>randint()</code> function and it takes either one or two parameters.  In our case, we can just pass in the minimum and maximum values:</p> <pre><code>randint(0, 256)\n</code></pre> <p>You can read more about MicroPython random functions here</p> <p>To use the random function we first need to import the function from the library:</p> <pre><code>from urandom import randint\n</code></pre> <p>Here is a sample loop that sets each pixel to a random color using the wheel() function:</p> <pre><code>for i in range(0, NUMBER_PIXELS):\n    random_color = randint(0, 256)\n    strip[i] = wheel(random_color)\n    strip.write()\n    sleep(.1)\n</code></pre>"},{"location":"lessons/15-random/#full-program","title":"Full Program","text":"<pre><code>from machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep\nfrom urandom import randint\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\ndef wheel(pos):\n    # Input a value 0 to 255 to get a color value.\n    # The colors are a transition r - g - b - back to r.\n    if pos &lt; 0 or pos &gt; 255:\n        return (0, 0, 0)\n    if pos &lt; 85:\n        return (255 - pos * 3, pos * 3, 0)\n    if pos &lt; 170:\n        pos -= 85\n        return (0, 255 - pos * 3, pos * 3)\n    pos -= 170\n    return (pos * 3, 0, 255 - pos * 3)\n\ndef clear():\n    for i in range(0, NUMBER_PIXELS):\n        strip[i] = (0,0,0)\n    strip.write()\n\n# setup\ncounter = 0\nclear()\n\n# main loop\nwhile True:\n    for i in range(0, NUMBER_PIXELS):\n        random_color = randint(0, 256)\n        strip[i] = wheel(random_color)\n        strip.write()\n        sleep(.1)\n</code></pre>"},{"location":"lessons/15-random/#exercises","title":"Exercises","text":"<ol> <li>Instead of updating a single pixel in consecutive sequences, can you also use the <code>randint()</code> function to update a random pixel?</li> <li>What if you have a small fixed list of colors to pick from.  How can you use <code>randint()</code> to pick a color from this list?</li> </ol>"},{"location":"lessons/16-candle/","title":"Candle Flicker","text":"<p>In this lesson we will try to simulate the behavior of a flickering candle using the <code>randint()</code> function.  To do this we will need a function that generates a mostly yellow-orange color, but the actual color and and brightness will vary.  This will give the impression of a candle flame with a flicker.</p> <p>A pure yellow color has both the red and green values on and the blue value off:</p> <pre><code>yellow = (255, 255, 0)\norange = (255, 150, 0)\n</code></pre> <p>Our goal is to generate variations in both color and brightness.  We can do this by starteding out with a green that varies from 50 to 200 and a red that varies above this value by 25 to 50.</p>"},{"location":"lessons/16-candle/#sample-candle-function","title":"Sample Candle Function","text":"<p>Our function will draw the new value on a random location on the LED strip.  It will take a single parameter of the delay on how often the values are updated, typically about 1/100th of a second.</p> <pre><code>def candle(delay):\n    for i in range(0, NUMBER_PIXELS):\n         green = 50 + randint(0,155)\n         red = green + randint(25,50)\n         strip[randint(0,NUMBER_PIXELS - 1)] = (red, green, 0)\n         strip.write()\n         sleep(delay)\n</code></pre>"},{"location":"lessons/16-candle/#full-demonstration-program","title":"Full Demonstration Program","text":"<pre><code>from machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep\nfrom urandom import randint\n# https://docs.micropython.org/en/latest/library/random.html\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\ndef candle(delay):\n    for i in range(0, NUMBER_PIXELS):\n         green = 50 + randint(0,155)\n         red = green + randint(25,50)\n         strip[randint(0,NUMBER_PIXELS - 1)] = (red, green, 0)\n         strip.write()\n         sleep(delay)\n\ncounter = 0\nwhile True:\n   candle(.01)\n   # wrap\n   counter = counter % (NUMBER_PIXELS-1)\n   counter += 1\n</code></pre>"},{"location":"lessons/17-theater-chase/","title":"Theater Chase","text":"<p>Theater Chase is a classic pattern that was popularized in marquee signs above movie theaters.  It consists of a row of lights that were usually switched on and off so it would appear that the lights were moving or being chased around the edge of the signs.</p>"},{"location":"lessons/17-theater-chase/#sample-theater-chase-function","title":"Sample Theater Chase Function","text":"<p>To create the illusion of pixels moving along a strip, we need to have three nested loops:</p> <ol> <li>The inner \"i\" loop just moves from 0 to the number of pixels in steps of 3 (or a similarly small number).  It turns every 3rd pixel on, waits and then turns it off</li> <li>The middle \"q\" loop just offsets the starting point of the inner loop moving from values of 0, 1 and 2.  The index in the inner loop is <code>i+q</code>.</li> <li>The outer-most \"j\" loop just indicates how many times the pattern should be repeated</li> </ol> <p>Here is a sample of the <code>theater_chase</code> function that has four parameters:</p> <ol> <li>the LED strip</li> <li>the color</li> <li>the delay (about 50 milliseconds)</li> <li>the number of times the pattern should be repeated (iterations)</li> </ol> <pre><code>def theater_chase(strip, color, wait_ms=50, iterations=10):\n    for j in range(iterations):\n        for q in range(3):\n            # turn every third pixel on\n            for i in range(0, strip.numPixels(), 3):\n                strip[i+q] = color\n            strip.write()\n            # keep the pixels on for a bit like 1/20th of a second\n            sleep_ms(wait_ms)\n            # turn every third pixel off\n            for i in range(0, strip.numPixels(), 3):\n                strip.setPixelColor(i+q, 0)\n</code></pre> <p>If you want to lower the power of the LED strip, you can change the skip number in the inner loop from 3 to 4, 5 or 6 etc.</p>"},{"location":"lessons/17-theater-chase/#full-program","title":"Full Program","text":"<p>This program will run a theater chase for the seven colors of the rainbow and then repeat.</p> <pre><code>from neopixel import NeoPixel\nfrom utime import sleep, sleep_ms\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(machine.Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n# Color RGB values\nred = (255, 0, 0)\norange = (255, 60, 0)\nyellow = (255, 150, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\nindigo = (75, 0, 130)\nviolet = (138, 43, 226)\ncolor_names = ('red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet')\nnum_colors = len(color_names)\ncolors = (red, orange, yellow, green, blue, indigo, violet)\n\ndef theater_chase(strip, color, wait_ms=50, iterations=10):\n    for j in range(iterations):\n        for q in range(3):\n            for i in range(0, strip.numPixels(), 3):\n                strip[i+q] = color\n            strip.write()\n            sleep_ms(wait_ms)\n            for i in range(0, strip.numPixels(), 3):\n                strip.setPixelColor(i+q, 0)\n\nwhile True:\n    # iterate through all the colors\n    for c in range(0, num_colors):\n        theater_chase(strip, colors[c], wait_ms=50, iterations=50)\n</code></pre>"},{"location":"lessons/17-theater-chase/#exercises","title":"Exercises","text":"<ol> <li>Add the skip number as an additional parameter to the function</li> <li>Add another parameter that reversed the direction of the movement</li> <li>Create a function that randomly changes the direction every few seconds</li> </ol>"},{"location":"lessons/18-ripple/","title":"Ripple Patterns","text":"<pre><code># moving rainbow\nfrom machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep, ticks_ms\nfrom urandom import randint\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\n\nred = (255, 0, 0)\nred_med = (32, 0, 0)\nred_light = (8, 0, 0)\noff = (0, 0, 0)\norange = (140, 60, 0)\nyellow = (255, 255, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\ncyan = (0, 255, 255)\nindigo = (75, 0, 130)\nviolet = (138, 43, 226)\nwhite = (128, 128, 128)\ncolors = (red, orange, yellow, green, blue, cyan, indigo, violet)\ncolor_count = len(colors)\nlevels = [255, 128, 64, 32, 16, 8, 4, 2, 1]\nlevel_count = len(levels)\n\ndef ripple(size, color, delay):\n    # start at a random location within size of the ends\n    start = randint(size, NUMBER_PIXELS - size)\n    for i in range(0, size):\n        strip[start+i] = color\n        strip[start-i] = color\n        strip.write()\n        sleep(delay)\n        strip[start+i] = (0,0,0)\n        strip[start-i] = (0,0,0)\n\ndelay = 0.2\nwhile True:\n    ripple(10, red, delay)\n    ripple(10, green, delay)\n    ripple(10, blue, delay)\n</code></pre>"},{"location":"lessons/18-ripple/#exercises","title":"Exercises","text":"<ol> <li>Make the color random</li> <li>Make the size of the ripple random</li> <li>Add randomness to the delay</li> <li>Use the wheel function to pick a random color</li> <li>Make the pixel intensity get lower as the ripple expands</li> </ol>"},{"location":"lessons/18-twinkle/","title":"Twinkle","text":"<p>A twinkle is a light whose brightness varies repeatedly between bright and faint.</p>"},{"location":"lessons/18-twinkle/#sample-twinkle-function","title":"Sample Twinkle Function","text":"<p>This </p> <pre><code>def twinkle(delay):\n    random_index = randint(0, NUMBER_PIXELS);\n    # turn on\n    strip[random_index] = (255,255,255) \n    strip.write();\n    sleep(delay);\n    # turn off\n    strip[random_index] = (0,0,0) \n    strip.write();\n</code></pre>"},{"location":"lessons/18-twinkle/#full-program","title":"Full Program","text":"<pre><code>from neopixel import NeoPixel\nfrom utime import sleep, ticks_ms\nfrom urandom import randint\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\ndef twinkle(delay):\n    random_index = randint(0, NUMBER_PIXELS-1);\n    # turn on\n    strip[random_index] = (255,255,255) \n    strip.write();\n    sleep(delay);\n    # turn off\n    strip[random_index] = (0,0,0) \n    strip.write();\n\nwhile True:\n    twinkle(.1)\n    sleep(1)\n</code></pre>"},{"location":"lessons/18-twinkle/#exercises","title":"Exercises","text":"<ol> <li>Add a parameter to the <code>twinkle()</code> function to allow the caller to specify the color.</li> <li>Make the brightness of the twinkle function a random value</li> <li>Make the brightness of a twinkle ramp up and down</li> </ol>"},{"location":"lessons/18-twinkle/#twinkle-random-color","title":"Twinkle Random Color","text":"<pre><code>from machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep, ticks_ms\nfrom urandom import randint\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\nred = (255, 0, 0)\nred_med = (32, 0, 0)\nred_light = (8, 0, 0)\noff = (0, 0, 0)\norange = (140, 60, 0)\nyellow = (255, 255, 0)\ngreen = (0, 255, 0)\nblue = (0, 0, 255)\ncyan = (0, 255, 255)\nindigo = (75, 0, 130)\nviolet = (138, 43, 226)\nwhite = (128, 128, 128)\ncolors = (red, orange, yellow, green, blue, cyan, indigo, violet)\ncolor_count = len(colors)\nlevels = [255, 128, 64, 32, 16, 8, 4, 2, 1]\nlevel_count = len(levels)\n\ndef twinkle(delay, color):\n    random_index = randint(0, NUMBER_PIXELS-1);\n    # turn on\n    strip[random_index] = color \n    strip.write();\n    sleep(delay);\n    # turn off\n    strip[random_index] = (0,0,0) \n    strip.write();\n\nwhile True:\n    twinkle(.1, colors[randint(0, color_count-1)])\n    sleep(1)\n</code></pre>"},{"location":"lessons/19-larson-scanner/","title":"Larson Scanner","text":"<p>The Larson Scanner is a light pattern special effect named after Glen A. Larson.  Larson used this pattern to give his Battlestar Galactica Cylon and KITT robot eyes a sense of sentience.  See Knight Rider for the backstory.</p>"},{"location":"lessons/19-larson-scanner/#description","title":"Description","text":"<p>A set of usually red pixels moves back and forth over the LED strip.  The pixels are brighter in the center and are dimmer at the edges of the set.  You can see an example of this in the Larson Scanner Pumpkin Kit</p>"},{"location":"lessons/19-larson-scanner/#color-rgb-values","title":"Color RGB values","text":"<p>We will need a set of predefined colors for various brightness of red:</p> <pre><code>red = (255, 0, 0)\nred_med = (32, 0, 0)\nred_light = (8, 0, 0)\noff = (0,0,0)\n</code></pre> <p>Note that the color levels are not linear.  You can adjust these and add more intermediate levels for wider patterns.</p>"},{"location":"lessons/19-larson-scanner/#full-source-code","title":"Full Source Code","text":"<pre><code># Larson Scanner - five pixels\nfrom machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep\n\nNEOPIXEL_PIN = 0\nNUMBER_PIXELS = 60\nstrip = NeoPixel(Pin(NEOPIXEL_PIN), NUMBER_PIXELS)\n\nred = (255, 0, 0)\nred_med = (32, 0, 0)\nred_light = (8, 0, 0)\noff = (0,0,0)\n\ndelay = .05\nwhile True:\n    # forward loop\n    for i in range(2, NUMBER_PIXELS-2):\n        strip[i-2] = red_light\n        strip[i-1] = red_med\n        strip[i] = red\n        strip[i+1] = red_med\n        strip[i+2] = red_light\n        # erase the trailing pixel\n        if i &gt; 0:\n            strip[i-3] = off\n        strip.write()\n        sleep(delay)\n    # backward loop\n    for i in range(NUMBER_PIXELS-4, 1, -1):\n        # erase the trailing pixel\n        if i &lt; NUMBER_PIXELS-2:\n            strip[i+3] = off\n        strip[i-2] = red_light\n        strip[i-1] = red_med\n        strip[i] = red\n        strip[i+1] = red_med\n        strip[i+2] = red_light\n        strip.write()\n        sleep(delay)\n</code></pre>"},{"location":"lessons/19-larson-scanner/#exercises","title":"Exercises","text":"<ol> <li>Turn the code into a function with delay as a patter</li> <li>Add a color parameter</li> <li>Add a parameter for the width of the pattern</li> </ol>"},{"location":"lessons/20-clock/","title":"Clock","text":"<p>Can you turn your LED strip into a clock?</p> <p>You can use binary encoding to display the numbers in a clock.  To do this we will need a function to display a digit as a binary pattern.</p> <pre><code>from machine import Pin\nfrom neopixel import NeoPixel\nfrom utime import sleep, localtime\n# get the configuration information\nimport config\n\nnp = config.NUMBER_PIXELS\nstrip = NeoPixel(Pin(config.NEOPIXEL_PIN), np)\n\nsec_bits = [0,0,0,0,0,0]\nmin_bits = [0,0,0,0,0,0]\nhr_bits = [0,0,0,0,0,0]\n\ndef decimal_to_binary(n, a):\n    global sec_bits\n    for i in range(0,6):\n        if n % 2:\n            a[i] = 1\n        else:\n            a[i] = 0\n        ## n halfed\n        n //= 2\n\ndef display_binary(binary, index, color):\n    for i in range(0, 6):\n        # print(i, ' ', end='')\n        if binary[i] == 1:\n            strip[index+i] = color\n        else:\n            strip[index+i] = (0,0,0)\n    strip.write()\n\n# light mark and write\ndef display_mark(loc):\n    strip[loc] = (5,5,5)\n    strip.write()\n\n# update from the first time\n# sec\ndisplay_mark(0)\ndisplay_mark(7)\n\n# min\ndisplay_mark(9)\ndisplay_mark(16)\n\n# min\ndisplay_mark(19)\ndisplay_mark(26)\n\nnow = localtime()\nhour = now[3]\n# use AM/PM 12 hour time\nif hour &gt; 12:\n    hour = hour - 12\nminute = now[4]\n\n# this is not working\ndecimal_to_binary(minute, min_bits)\nprint('initial min:', minute, min_bits)\ndisplay_binary(min_bits, 10, (0,10,0))\n\ndecimal_to_binary(hour, hr_bits)\nprint('initial hour:', hour, hr_bits)\ndisplay_binary(hr_bits, 20, (0,0,10))\n\nwhile True:\n    now = localtime()\n    hour = now[3]\n    # use AM/PM 12 hour time\n    if hour &gt; 12:\n        hour = hour - 12\n    minute = now[4]\n    sec = now[5]\n    print(hour, ':', minute, ' ', sec, sep='')\n    strip.write()\n    decimal_to_binary(sec, sec_bits)\n    print('sec:', sec, sec_bits)\n    display_binary(sec_bits, 1, (10,0,0))\n    if sec == 60:\n        minute = minute + 1\n        sec = 0\n        decimal_to_binary(minute, min_bits)\n        print('min:', minute, min_bits)\n        display_binary(min_bits, 10, (0,10,0))\n        if minute == 60:\n            decimal_to_binary(hour, hr_bits)\n            print('hour:', hour, hr_bits)\n            display_binary(hr_bits, 20, (0,0,10))\n            hour = hour + 1\n            minute = 0\n            if hour == 24:\n                hour = 0\n    sleep(1)\n</code></pre>"},{"location":"lessons/21-photo-resistor/","title":"Photoresistor","text":""},{"location":"lessons/21-photo-resistor/#testing-the-photoresistor","title":"Testing the Photoresistor","text":""},{"location":"lessons/21-photo-resistor/#the-nightlight","title":"The Nightlight","text":""},{"location":"lessons/21-photo-resistor/#analog-nightlight","title":"Analog Nightlight","text":""},{"location":"lessons/21-photo-resistor/#digital-nightlight","title":"Digital Nightlight","text":""},{"location":"lessons/40-how-neopixels-work/","title":"How NeoPixels Work","text":"<p>NeoPixels, such as the WS2812B, are a type of addressable LED commonly used in various lighting projects. Here's an explanation of how they function:</p>"},{"location":"lessons/40-how-neopixels-work/#integrated-control-circuit","title":"Integrated Control Circuit","text":"<p>Each NeoPixel contains a control circuit and an RGB LED. This design makes each LED independently addressable within a strip.</p>"},{"location":"lessons/40-how-neopixels-work/#data-transmission","title":"Data Transmission","text":"<p>NeoPixels are controlled by a digital data signal sent from a microcontroller. This signal is a sequence of binary data.</p>"},{"location":"lessons/40-how-neopixels-work/#signal-processing","title":"Signal Processing","text":"<p>The data signal is sent through a single data line to the strip. Each LED reads its part of the data (usually 24 bits: 8 bits each for Red, Green, and Blue) and uses this information to set its color.</p>"},{"location":"lessons/40-how-neopixels-work/#color-control","title":"Color Control","text":"<p>The color of each LED is determined by the 24 bits of data it receives. These bits represent the intensity levels for each of the red, green, and blue components of the LED. The combination of these intensities produces the final color.</p>"},{"location":"lessons/40-how-neopixels-work/#data-propagation","title":"Data Propagation","text":"<p>After an LED reads its data, it removes (or 'strips') this data from the stream and passes the remaining data to the next LED. The next LED then reads its respective data, and this process continues down the strip.</p>"},{"location":"lessons/40-how-neopixels-work/#sequential-addressing","title":"Sequential Addressing","text":"<p>The first LED in the strip reads the first set of data, the second LED reads the next set, and so on. This sequential processing allows for individual control of each LED in the strip.</p>"},{"location":"lessons/40-how-neopixels-work/#refresh-rate","title":"Refresh Rate","text":"<p>The entire process of data reading and color setting happens very quickly, allowing dynamic effects like color changes to appear smooth.</p>"},{"location":"lessons/40-how-neopixels-work/#electrical-connection","title":"Electrical Connection","text":"<p>Only three connections are required for a NeoPixel strip: power (5V), ground, and data input. This simplicity makes them popular for various lighting projects.</p>"},{"location":"lessons/40-how-neopixels-work/#conclusion","title":"Conclusion","text":"<p>NeoPixels offer a combination of simplicity in wiring and complexity in control, allowing for a wide range of creative lighting applications.</p> <p>This document provides an overview of the basic operation of NeoPixels without delving into the specific technicalities of signal timing and electrical characteristics.</p>"},{"location":"prompts/","title":"Sample Generative AI Prompts","text":"<p>If you want to use generative AI to write sample code for you, here is a list of prompts you can use to generate sample Moving Rainbow code.</p> <p>We encourage you to specific the following config.py file in your prompts:</p> <p><code>config.py</code> <pre><code>NEOPIXEL_PIN = 0\nNUMBER_PIXELS = 30\nBUTTON_PIN_1 = 14\nBUTTON_PIN_2 = 15\n</code></pre></p> <p>If you do this, then all your examples will run without having to hard-code the configuration within your code.</p>"},{"location":"prompts/generate-skill/","title":"Create Moving Rainbow Skill Prompt","text":"<p>Prompt</p> <p>Using the Anthropic Skill Creator, please create a skill for creating Moving Rainbow MicroPython programs. The Skill Creator is here:  https://github.com/anthropics/skills/tree/main/skill-creator. Place the new skill in /skills/moving-rainbow. Use the default Raspberry Pi Pico hardware with a 30 pixel NeoPixel LED strip with two buttons.  </p> <p>Use the following for the content of the  <code>config.py</code> file:</p> <pre><code>NEOPIXEL_PIN = 0\nNUMBER_PIXELS = 30\nBUTTON_PIN_1 = 14\nBUTTON_PIN_2 = 15\n</code></pre>"},{"location":"prompts/generate-skill/#result","title":"Result","text":"<p>The skill is in the /skill/moving-rainbow area of this GitHub repo.</p>"},{"location":"prompts/glossary/","title":"Glossary Prompt","text":"<p>Prompt</p> <p>Please read through all the markdown content on this site (*/.md) and gnerate a  new glossary.md file using around 200 terms that a typical junior high-school student  might not understand.  After each term, add an example of how that term might be used. Create a definition that is:</p> <ol> <li>precise</li> <li>concise</li> <li>distinct</li> <li>non-circular</li> <li>Do not place any specific business rules in the definition.</li> </ol> <p>When appropriate, give an example of how this term is used in the course. Return each  concept label in Markdown level four \"####\" and the definition for the term in the  body text. </p> <p>Use \"\\n\\nExample: \" (using actual newline characters) before the example, but do not put a newline after the colon.</p> <p>Return the entire glossary of terms in a single markdown file.</p> <p>Place \"# Moving Rainbow Glossary of Terms\" at the top of the file.</p> <p>Return the terms in alphabetical order. </p>"},{"location":"prompts/moving-rainbow/","title":"Rainbow Pattern","text":"<p>Prompt</p> <p>Please generate a new MicroPython program that draws the seven main colors of the rainbow on an LED strip and then moves the seven pixels down the strip.  Assume the following config.py file:</p> <p><code>config.py</code> <pre><code>NEOPIXEL_PIN = 0\nNUMBER_PIXELS = 30\nBUTTON_PIN_1 = 14\nBUTTON_PIN_2 = 15\n</code></pre></p>"},{"location":"sims/","title":"Moving Rainbow MicroSims","text":""},{"location":"sims/#battery-charger","title":"Battery Charger","text":"<p>Battery Charger</p>"},{"location":"sims/#solar-powered-nightlight","title":"Solar Powered Nightlight","text":"<p>Solar Powered Nightlight</p>"},{"location":"sims/battery-life-calculator/","title":"Battery Life Calculator MicroSim","text":"<p>Fullscreen Edit</p>"},{"location":"sims/battery-life-calculator/#description","title":"Description","text":"<p>This interactive simulation helps students estimate how long LED costume components will operate on various battery types. By adjusting the number of LED noodles, brightness level, and battery type, students can see real-time calculations of battery capacity, current draw, and estimated runtime.</p>"},{"location":"sims/battery-life-calculator/#learning-objectives","title":"Learning Objectives","text":"<p>Students will be able to:</p> <ol> <li>Apply the battery life formula: Battery Life (hours) = Battery Capacity (mAh) \u00f7 Total Current Draw (mA)</li> <li>Analyze how different variables affect battery runtime</li> <li>Evaluate appropriate battery choices for different costume designs</li> <li>Compare the trade-offs between brightness, number of LEDs, and battery life</li> </ol>"},{"location":"sims/battery-life-calculator/#key-concepts","title":"Key Concepts","text":""},{"location":"sims/battery-life-calculator/#battery-capacity-mah","title":"Battery Capacity (mAh)","text":"<p>Battery capacity is measured in milliamp-hours (mAh). Different battery types have different capacities:</p> <ul> <li>AA Batteries: 2,000-3,000 mAh each (can be combined in series or parallel)</li> <li>9V Batteries: 500-600 mAh</li> <li>USB Power Packs: 5,000-20,000+ mAh (variable by size)</li> </ul>"},{"location":"sims/battery-life-calculator/#current-draw","title":"Current Draw","text":"<p>Each LED noodle consumes up to 100 milliamps (mA) at full brightness. The total current draw is:</p> <p>Total Current (mA) = Number of Noodles \u00d7 Current per Noodle \u00d7 Brightness Factor</p>"},{"location":"sims/battery-life-calculator/#brightness-factor","title":"Brightness Factor","text":"<p>Reducing brightness proportionally reduces current consumption. Running LEDs at 50% brightness uses approximately 50% of the maximum current.</p>"},{"location":"sims/battery-life-calculator/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/battery-life-calculator/#exploration-activity-10-minutes","title":"Exploration Activity (10 minutes)","text":"<ol> <li>Predict: Ask students to predict which factors will have the greatest impact on battery life</li> <li>Explore: Have students adjust each slider and observe the changes</li> <li>Record: Students note the battery life for these scenarios:</li> <li>5 noodles at 100% brightness with a 9V battery</li> <li>5 noodles at 50% brightness with a 9V battery</li> <li>10 noodles at 50% brightness with a small USB power pack</li> </ol>"},{"location":"sims/battery-life-calculator/#guided-practice-15-minutes","title":"Guided Practice (15 minutes)","text":"<ol> <li>Problem: A student wants their costume to last 4 hours for a parade. They have 8 LED noodles.</li> <li>What battery should they choose?</li> <li>What brightness level do they need?</li> <li> <p>What are their options?</p> </li> <li> <p>Design Challenge: Find three different combinations of battery type and brightness that will provide at least 3 hours of runtime with 6 noodles.</p> </li> </ol>"},{"location":"sims/battery-life-calculator/#real-world-application","title":"Real-World Application","text":"<p>Discuss with students:</p> <ul> <li>Why might you choose lower brightness instead of a bigger battery?</li> <li>What are the trade-offs between cost, weight, and runtime?</li> <li>How do temperature and battery quality affect actual performance?</li> <li>Why is it good to have more battery life than you think you need?</li> </ul>"},{"location":"sims/battery-life-calculator/#assessment-questions","title":"Assessment Questions","text":"<ol> <li>If doubling the number of LED noodles, what happens to battery life? (Answer: It is cut in half)</li> <li>If a 9V battery lasts 1.1 hours with 5 noodles at 100% brightness, how long will it last at 50% brightness? (Answer: approximately 2.2 hours)</li> <li>Why might the actual battery life differ from the calculated estimate? (Answer: Battery quality, temperature, efficiency variations, battery degradation)</li> </ol>"},{"location":"sims/battery-life-calculator/#extensions","title":"Extensions","text":"<ul> <li>Calculate the cost per hour of runtime for different battery types</li> <li>Research rechargeable battery options and compare lifetime costs</li> <li>Design a complete costume power system with multiple components</li> <li>Investigate power-saving techniques like dimming or blinking patterns</li> </ul>"},{"location":"sims/battery-life-calculator/#technical-notes","title":"Technical Notes","text":"<ul> <li>Maximum current per noodle: 100 mA</li> <li>Formula assumes linear relationship between brightness and current draw</li> <li>Real-world results may vary \u00b120% based on conditions</li> <li>Battery capacity decreases with higher discharge rates</li> </ul>"},{"location":"sims/color-wheel/","title":"Color Wheel MicroSim","text":"<p>Run the MicroSim Edit this MicroSim</p>"},{"location":"sims/color-wheel/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/moving-rainbow/sims/color-wheel/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/current-predictor/","title":"LED Current Predictor","text":"<pre><code>&lt;iframe src=\"main.html\" height=\"400px\" scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre> <p>Edit this MicroSim</p>"},{"location":"sims/current-predictor/#background","title":"Background","text":"<p>How do we limit the current going into our LEDs?  Many LEDs will be destroyed if they get too much current.  How can we use a base limiting resistor to limit the current that goes into an LED.</p> <p></p>"},{"location":"sims/learning-graph/","title":"Moving Rainbow Learning Graph MicroSim","text":""},{"location":"sims/templates/","title":"MicroSim Template","text":"<p>Run the MicroSim Edit this MicroSim</p>"},{"location":"sims/templates/#sample-iframe","title":"Sample iframe","text":"<pre><code>&lt;iframe src=\"https://dmccreary.github.io/microsims/sims/name/main.html\" height=\"400\"  scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"sims/templates/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/templates/#sample-prompt","title":"Sample Prompt","text":"<p>Prompt</p> <p>Create a single file p5.js sketch.   Draw a green circle on a 600x400 canvas with a radius of 200.</p>"},{"location":"sims/templates/#sample-response","title":"Sample Response","text":"<pre><code>// canvas regions setup\n// let canvasWidth = 750;\nlet drawHeight = 400;\nlet controlHeight = 50;\nlet canvasHeight = drawHeight + controlHeight;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\n\nfunction setup() {\n  const canvas = createCanvas(canvasWidth, canvasHeight);\n  var mainElement = document.querySelector('main');\n  canvas.parent(mainElement);\n}\n\nfunction draw() {\n  // background of drawing region\n  fill('aliceblue');\n  rect(0, 0, canvasWidth, drawHeight);\n\n  // background of controls\n  fill('whitegray');\n  rect(0, drawHeight, canvasWidth, controlHeight);\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/templates/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/templates/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/templates/#activities","title":"Activities","text":""},{"location":"sims/templates/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/templates/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/templates/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/templates/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/templates/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/templates/#references","title":"References","text":"<ul> <li>Processing Wiki on Positioning Your Canvas</li> </ul>"},{"location":"teachers-guide/","title":"Teachers Guide for the Moving Rainbow Project","text":"<p>Computational Thinking</p>"},{"location":"teachers-guide/code-group-status/","title":"Code Group Content Status","text":"Name Lead Author Content Src Maturity Goal Complete Journey Map Notes Scratch Dan McCreary Custom Medium 8 8 Great for non-typers Beginning Python Dan McCreary Custom Mature 14 14 Journey Map Intermediate Python Zach and Parker Erickson Custom New 13 13 Hi demmand Advanced Python Parker Erickson and ? Custom New 10 2 many options Jupyter Notebooks Dan, Parker? Custom New 10 3 Hi demand in data literacy Beginning Arduino (Tinkercad) Dan McCreary Custom New 5 5 Tinkercad rocks! Most labs can be siumlated online. Intermediat Arduino (Tinkercad) Dan McCreary + Others Custom New 3 3 Lot of content to reformat Java Aaron K. Custom New 10 10 Hi interest.  Aaron using repl.it Linux and Pi ? Custom None 0 0 Difficult to move online Content Authoring with Markdown Dan McCreary Custom New 3 3 For mentors and teachers Tkinter Optum Staff Custom New 1 1 Building GUIs with Python Introduction to HTML GitHub Course External Mature 13 13 GitHub has mature content User Experience unknown Custom None 0 0 Need voluteer 3D Printing with Ender 3D Gerd? None working on goals Unity Game Engine Aaron Walker Custom None 1 0 Few maps to computational thinking. App Inventor unknown ? ? 0 0 0 0 Robots (MBot) Dan, Paith? Custom Medium 12 0 0 moving content over to mkdocs AI Racing League Dan McCreary Custom New 0 0 need help migrating content"},{"location":"teachers-guide/code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"teachers-guide/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"teachers-guide/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"teachers-guide/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"teachers-guide/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"teachers-guide/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"teachers-guide/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"teachers-guide/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"teachers-guide/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"teachers-guide/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"teachers-guide/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the project community.</p>"},{"location":"teachers-guide/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"teachers-guide/computational-thinking/","title":"Computational Thinking","text":"<p>Computational thinking is a name we give to describing the underlying patterns that guide the development of computer science curriculum.</p> <p></p> <p>There are four key patterns that are frequently discussed when we talk about computational thinking.</p> <ol> <li>Abstraction \u2013 focusing on the important information only, ignoring irrelevant detail.</li> <li>Algorithms - developing a step-by-step solution to the problem, or the rules to follow to solve the problem.</li> <li>Decomposition - breaking down a complex problem or system into smaller, more manageable parts.</li> <li>Pattern recognition \u2013 looking for similarities among and within problems.</li> </ol>"},{"location":"teachers-guide/computational-thinking/#integrating-ai-and-agents-into-our-courses","title":"Integrating AI and Agents into Our Courses","text":"<p>Of all of these skills, decomposition is the one skill that has shown the most effective in working with AI.  Decomposition is also critical in the planning phase of many projects.  Many of the prompts we are using with agents focus on first dividing a problem into pieces before we use generative AI tools to generate complex code.</p> <p>To integrated AI into our courses we have to added the concept of expandability and bias to these concepts:</p> <ol> <li>Explainability - can a computer explain why it took a specific action or made a specific recommendation?</li> <li>Bias - is the result of the suggestion made by a computer skewed in a direction that makes it unfair to a group of people?</li> </ol>"},{"location":"teachers-guide/computational-thinking/#other-common-design-patterns","title":"Other Common Design Patterns","text":"<p>Although we have many different coding groups that are appropriate for beginners, there are several computer science concepts that we encourage everyone to adopt in your coding group curriculum.</p> <p>Events - What events start a program?  What events change the behavior of a program?</p> <p>Loops - How do repeat a set of tasks?</p> <p>Variables - How do we reference a common value and make our programs easier to change?</p> <p>Conditionals - How do we change program behavior based on rules.  How do we use comparisons to do this?  How do we implement if/then/else or switch/case logic to be easy to understand and maintain?</p> <p>Functions - How do we group code sections together and give them names?</p> <p>Function Parameters - How do we pass values to functions? How can parameters make functions more widely reusable? Why would we want to check the types of an input parameters?  What happens when we pass invalid data types to a function?</p> <p>Data types - What is the difference between a string of characters, an integer, a floating point number or a datetime?  How do we use the right datatype and type checking to keep our programs reliable?</p> <p>Data Structures - How do you create and manage lists, dictionaries, arrays and complex data structures?</p> <p>Sensors - How do we gather input from the real world?</p> <p>Output - How do we display text or graphic output on a small display screen or print statements to a serial console for debugging?</p> <p>Feedback - how do we prompt users for input and respond to changes in output</p> <p>Debugging - How do we find problems in our code?  How can we stop execution of our code using a debugger?  How do we inspect the value of variables when a program has paused?</p> <p>Drawing - Drawing to a graphics device is a great way to learn other concepts where you get quick visual feedback.  Drawing can be our on ramp to drawing charts and graphs.  See our SVG Labs for excellent examples of learning to program with graphics.</p> <p>Recursion - What happens when a function calls itself?  How can you draw trees that have many smaller branches?</p> <p>Commenting - How do we put hints in our code for others to better understand our code?  How do comments make code more maintainable?</p> <p>Scope - How do we protect variables from unintended updates?  How do we use global variables sparingly.  How do we use local variables and when should move variables from global to local or vice versa?</p>"},{"location":"teachers-guide/computational-thinking/#advanced-concepts","title":"Advanced concepts","text":"<p>Here are a few topics that you can explore with your move advanced students.</p> <p>Files - How do we read data in from files and write data out to files?  How do we append to the end of files?</p> <p>Regular Expressions - How do we use a short set of special characters to look for patterns in strings and text?</p> <p>Integrated Development Environments - How do we setup our desktop so that we can be productive debugging our programs?  What is syntax highlighting?  What is autocomplete?</p> <p>Logging - How do we keep a record of what has happened in our programs?</p>"},{"location":"teachers-guide/concept-cards/","title":"Concept Cards","text":"<p>Dan McCreary Version 1.1 \u2013 last updated September, 2021</p>"},{"location":"teachers-guide/concept-cards/#what-are-concept-cards","title":"What are Concept Cards?","text":"<p>Concept Cards are teaching tools that are popular in informal hands-on settings such as CoderDojo classrooms.  Concept cards follow the \"one concept per card\" rule.  Each card attempts to illustrate one-and-only-one concept using a simple example.  Within the CoderDojo mentoring system, Concept Cards also called \"Sushi Cards\" in the CoderDojo mentoring system, representing a single bite of knowledge.  Concepts are communicated in easy-to-digest, bite-sized chunks (hence Sushi).</p> <p>Concept Cards are a way of taking complex topics and decomposing the topics into simple examples that can be used to illustrate the principals needed to master the topic.</p> <p>Concept Cards can be used in multiple teaching styles including goal-directed learning, fixed hierarchy learning and ad-hoc rhizomatic network learning.</p>"},{"location":"teachers-guide/concept-cards/#when-should-concept-cards-be-used","title":"When Should Concept Cards be Used?","text":"<p>Concept Cards are ideal for situations where students may not have one-on-one time with a teacher or mentor. Concept Card facilitate self-guided instruction without having to pick up a 300-page book where you must to start on page one and learn the material sequentially. We like to think of them as \"Agile Teaching\" tools where there are multiple entry points into learning and multiple possible outcomes.</p> <p>We like to use a library of Concept Cards when the requirements of your classrooms may be constantly changing. If designed correctly, concepts cards allow you to remix concepts to adapt to different students, projects and educational events.</p>"},{"location":"teachers-guide/concept-cards/#design-goals","title":"Design Goals","text":"<p>Breaking complex topics down into many small concepts is a universal strategy in designing any curriculum.  We often call this process decomposition.  Having a good set of concepts can promote building flexible data structures that are used in learning management systems. Sometimes designing a graph of interrelated concepts is a first step in building these systems.  Once we have a list of concepts with their dependencies we can then focus on designing the content to teach these concepts.</p> <p>We now suggest some guidelines for the creation of concept cards for CoderDojo classrooms.</p>"},{"location":"teachers-guide/concept-cards/#guideline-1-one-card-one-concept","title":"Guideline 1: One Card, One Concept","text":"<p>Each Concept Card should teach one important concept. What is an important concept? That's the tricky bit!  And that's for the Card designer to decide. There is no scientific way of defining this.  Sometimes a Concept can be associated with a specific physical demonstration or \"lab\", like What is a Raspberry Pi Pico microcontroller?  Sometimes they are associated with a program, like the UNIX shell command, and sometimes Concept Cards are associated with a programming concept like a \"conditional\" statement or a \"for loop\".</p> <p>Ideally, Concept Cards should be related to a piece of hardware, a program, a function or a small sample of code that illustrates the principle as simply and clearly as possible. Don't be tempted to add in 'side' lessons that show something else. Instead, make these into separate cards. Side concepts may be interesting to you, but you must resist the temptation to deviate from the concept.  Let your students take simple samples, master them and allow them to be the integrators of the concepts to produce working programs.</p>"},{"location":"teachers-guide/concept-cards/#types-of-concept-cards","title":"Types of Concept Cards","text":"<p>Although we try to avoid strict hierarchial curriculum in our CoderDojo classrooms, we still must take into account that not all Concept Cards are the same. Some cards depend on other cards.  Grouping cards into difficulty categories is a way to guide students without forcing structure.</p> <p>Concept cards are often divided into multiple difficulty levels like the following:</p> <ul> <li>Beginning - where a concept does not depend on any other concepts in your curriculum</li> <li>Intermediate - where a concept might depend on one or more Beginning concept</li> <li>Advanced - where a concept depends on one or more intermediate concepts</li> </ul>"},{"location":"teachers-guide/concept-cards/#designing-colorful-laminated-concept-cards","title":"Designing Colorful Laminated Concept Cards","text":"<p>Like many communication tools, designing concept cards reflect that the medium is the message.  How we print and display Concept Cards makes a big difference in their effectiveness.</p> <p>Imagine a new coding student walking into a classroom.  Computer are often spread around the edges and back of the classroom.  But near the entrance to the classroom is a table covered with small 5X10 inch laminated cards. The cards each have a colorful border indicating their difficulty, and every card has an image that can quickly be recognized by returning students.</p> <p>We often use two-sided laminated cards that are easy to hold in one hand and easy to view by the side of a computer.   The structure of the cards is important because they don't look intimidating.  They are not walls of text and they don't look like a college textbook.</p> <p></p> <p>In contrast, the book Learning Python by Mark Lutz is a 1,600-page book that had detailed discussions areas of Python that many programmers may never need.  The chapter on the \"if\" statement does not even start until page 383!</p> <p>We want Concept Cards to look a bit like a stack of colorful playing cards, not a 1,600 page college computer science textbook. Learners can move at their own pace and there is never the suggestion that only those patient enough to read a 1,600 page textbook are allowed to participate.  You can easily place the card next to a piece of hardware or laptop.</p> <p>For instance, if they\u2019re learning UNIX, they\u2019ll probably have three or four windows open \u2013 so having another open to show the class notes is contributing to serious window management problems.</p>"},{"location":"teachers-guide/concept-cards/#lamination","title":"Lamination","text":"<p>Plastic lamination will save you time and money. Laminators cost around $50. The individual laminating pouches are less than 10 cents each. Once you\u2019ve produced your laminated sheet it will last for many weeks of CoderDojo sessions, in contrast to paper handouts which are usually discarded after one or two CoderDojo sessions.</p>"},{"location":"teachers-guide/concept-cards/#test-test-test","title":"Test, test, test","text":"<p>(practice-led, not theory-led) Because every audience is different, you can't really predict if cards will work for any audience.  The approach is practice-led rather than theory-led so that learners see results as fast as possible. We think this mirrors the way most programmers learn anyway. (First, take some existing code and hack it, read up the theory only if you can\u2019t figure out what\u2019s going on \u2026)</p>"},{"location":"teachers-guide/concept-cards/#keep-examples-short-and-sweet","title":"Keep examples short and sweet","text":"<p>Any example code should be as short as possible (to minimize mistyping) and should be as easy to understand as possible \u2013 make examples as concrete as you can. Using self-descriptive variable and parameter names is helpful (good programming anyway).</p>"},{"location":"teachers-guide/concept-cards/#dont-feel-you-have-to-explain-everything","title":"Don\u2019t feel you have to explain everything","text":"<p>Don't feel you have to explain everything \u2013 it's often better to show some self-descriptive code and then ask the learner the question 'can you figure out what this is doing?' or 'how would you change this to do X'. You\u2019re pointing learners in the right direction, but you're not watching over them for the whole journey. Also \u2026 improvisation should be encouraged. Learning examples should be presented in such a way that the learner can riff on the examples and quickly produce new materials that showcase their own interests.</p>"},{"location":"teachers-guide/concept-cards/#cards-should-be-self-contained","title":"Cards should be self-contained","text":"<p>Although the lessons should be built on one another, individual cards should still be fairly self-contained. In the HTML example it's necessary to do the first two or three cards in order, but after the learner has created a basic site card it could be picked up in any order. (Although to make this work, you may need to revisit earlier cards after you add in a later card).</p>"},{"location":"teachers-guide/concept-cards/#pictures-are-good","title":"Pictures are Good","text":"<p>Having the materials look inviting is important. The best practice is to have a friendly, not-too-complex, yet colorful picture at the top of each card just below the concept name.  We try to show an end-result that looks exciting and makes learners want to dive in. Try to avoid having English in your pictures due to hassle made when translating to other languages.</p>"},{"location":"teachers-guide/concept-cards/#the-cards-will-never-be-perfect-dont-worry","title":"The cards will never be perfect \u2013 don\u2019t worry!","text":"<p>Whenever you work with learners and use the cards, you\u2019ll quickly come across all sorts of errors, imperfections and barriers to comprehension. But don\u2019t worry about it. It\u2019s normal. Just go home and modify them. Each change you make will make the cards easier to use.</p>"},{"location":"teachers-guide/concept-cards/#sample-concept-card-structure","title":"Sample Concept Card Structure","text":""},{"location":"teachers-guide/concept-cards/#front-material","title":"Front Material","text":""},{"location":"teachers-guide/concept-cards/#difficulty","title":"Difficulty","text":"<p>The outer border of the card should show the difficulty level using a bright color.  We use green for beginning concepts, blue for intermediate concepts and black for advanced concepts.  Also use text because some students may be color blind.</p>"},{"location":"teachers-guide/concept-cards/#concept-name","title":"Concept Name","text":"<p>Try to use a short kid-friendly name and avoid technical jargon if possible</p>"},{"location":"teachers-guide/concept-cards/#concept-picture","title":"Concept Picture","text":"<p>A small image or icon that students will remember if they have seen it before.  Imagine students all arriving in a room and quickly discarding cards they have already done but putting their focus on new concept cards.</p>"},{"location":"teachers-guide/concept-cards/#activity-challenge","title":"Activity Challenge","text":"<p>A short list of activities that the students might try.  Give them hints at the very bottom of the card if they are hard challenges.</p>"},{"location":"teachers-guide/concept-cards/#back-material","title":"Back Material","text":"<p>** Activity Answers - A short list answer to the challenges on the front of the card ** ** Explorations** - More ways to learn more about a concept or related Concepts</p>"},{"location":"teachers-guide/concept-cards/#concept-card-design-tips","title":"Concept Card Design Tips","text":"<p>Use colors and paragraphs to prevent a \"wall of text\" that will turn students away.  Put in a colorful icon in the text or use bold/italic or colors to highlight words.  Use icons, graphics, figures, photos, lists or tables to break up text.</p> <p>Large blocks of text can be intimidating to readers and tough to read for all. Look at the examples for reference for a good sushi card in terms of text readability.</p> <p>Visit http://dojo.soy/style for guidelines to aim for.</p> <ul> <li>You can remind them to ask for a mentor if installing something is too hard</li> <li>Add important Terms in colored boxes</li> <li>Historic tips are welcome, fun facts too</li> <li>Bold terms like copy, paste, click, keyboard buttons etc. (any words that's used a lot and has either been defined or is common computing terms)</li> <li>Instructions should work for both PC and Mac</li> <li>Appropriately colored boxes break the wall of texts and make the text less daunting. There should be at least one yellow box or screenshot on each page. Use this to explain key concepts in simple language.</li> <li>Always try to end the back of a card with play around with other challenges. i.e. making music with a Raspberry Pi, a game in Python, a webpage in HTML/CSS. Encourage them to tweak and explore what they've done.</li> <li>Needless to say, a child will not understand a lot of big words. Use basic language and don't make a comparison to something they wouldn't understand like a bank or job</li> <li>Test your card by watching kids pick them up and try them.  Don't try for perfection on the first pass.  Get it out there and iterate, iterate, iterate...</li> <li>Get feedback from other mentors and teachers</li> </ul>"},{"location":"teachers-guide/concept-cards/#sample-concept-form","title":"Sample Concept Form:","text":"<p>Concept Difficulty Level: Beginner, Intermediate or Advanced (use this to change the color of the border)</p> <p>Concept Name: _____</p> <p>Concept Picture:</p> <p>Concept Description:</p> <p>Optional: Predecessor Concepts</p> <p>Successor Concepts</p> <p>Activity Challenge Text:</p> <p>Concept Answers (often printed on the back of the card)</p> <p>More to Explore:</p>"},{"location":"teachers-guide/content-authoring-guide/","title":"CoderDojo Content Authoring Guide","text":"<p>When our CoderDojo clubs were just getting started we struggled to find high-quality content that was age appropriate for our students.  We learned of the CoderDojo international foundation used simple laminated Concept Cards</p>"},{"location":"teachers-guide/content-authoring-guide/#our-current-coderdojotc-content-publishing-stack","title":"Our Current CoderDojoTC Content Publishing Stack","text":""},{"location":"teachers-guide/content-authoring-guide/#markdown","title":"Markdown","text":"<p>We use Markdown for all our content.  A good way to learn Markdown is to use a Markdown cheat sheet.  We want you to put many images into your classes so make sure to use the image links!</p>"},{"location":"teachers-guide/content-authoring-guide/#github-for-source","title":"GitHub for Source","text":"<p>We use GitHub to store our content.  GitHub is free for all public content and has many advanced features that allow team to work together to build and test learning content.  Many of our content authors are familiar with GitHub.</p>"},{"location":"teachers-guide/content-authoring-guide/#github-pages-for-web-sites","title":"GitHub Pages for Web Sites","text":"<p>We use GitHub Pages to publish our content to microsites.  Each coding group has their own microsite and search does not currently work across the microsites (we are working on fixing this). All content should be published into a gh-deploy branch.  If you change content using the web-based editor (the pencil in the upper right corner of the github page viewer - you may need to have a friend help republish the content to the GitHub Pages site.)</p>"},{"location":"teachers-guide/content-authoring-guide/#mkdocs-for-publishing","title":"MkDocs for Publishing","text":"<p>We use mkdocs for our publishing tool.  This converts our Markdown pages into HTML web sites.  To deploy mkdocs you will need to have python installed on your local computer.  You must run the \"mkdocs gh-deploy\" command every time you make changes.</p>"},{"location":"teachers-guide/content-authoring-guide/#google-material-user-interface-components","title":"Google Material User Interface Components","text":"<p>We use the mkdocs material theme.  We encourage you to learn to add custom material widgets to your content.</p>"},{"location":"teachers-guide/content-authoring-guide/#coderdojo-style-guide","title":"CoderDojo Style Guide","text":"<p>We use CoderDojo style guide for our colors, icons and fonts.  Please try to stay close to these guidelines so that mentors, parents, and students all know they are on a kid-safe site.</p> <p>We like our lesson plans to start with an image, gif or short video clip (under 10-seconds).</p>"},{"location":"teachers-guide/content-authoring-guide/#setting-up-a-virtual-environment-with-conda","title":"Setting Up a Virtual Environment with Conda","text":"<p>This section is for programmers that are setting up \"build\" systems on their desktops to automate the mkdocs publishing process.  If you are new to Python and Conda virtual environments, please ask for help!  This is not as easy is it looks, especially on Windows systems.</p> <p>First, follow the installation instruction on the Conda web site:</p> <p>Conda Virtual Environment Shell Installation</p> <pre><code>$ conda create --name  mkdocs python=3.6\n$ conda activate mkdocs\n$ pip install mkdocs\n$ pip install mkdocs-material\n</code></pre> <p>If you are also installing quizzes on your microsite you will need additional steps not included here.</p>"},{"location":"teachers-guide/content-authoring-guide/#add-the-site-dir-to-your-gitignore","title":"Add the site dir to your .gitignore","text":"<p>The mkdocs process takes Markdown files and converts them to HTML.  These files are put into a folder called <code>site</code>.  However, to publish we push this folder to the <code>gh-deploy</code> branch.  To keep the site directory from being pushed to the main branch we need to add the directory to the .gitignore file:</p> <p>Contents of .gitignore <pre><code>site\n.DS_Store\n~$*\n</code></pre></p> <p>Try to avoid links to resources that are not kid-safe.</p> <p>By using these standards it will enable us to reuse this content for search, recommendation and building tools that allow students to use chatbots to help them code.</p>"},{"location":"teachers-guide/content-authoring-guide/#images","title":"Images","text":"<p>All images should be stored in the doc/img directory in your site.  Please keep images reasonably small (under 50K) to keep the load times fast.</p>"},{"location":"teachers-guide/content-authoring-guide/#navigation","title":"Navigation","text":"<p>Make sure when you add a new content file you link it into the navigation menu.  Try to keep navigation lists under 30 items.  Try using nesting if your lists get too long.</p>"},{"location":"teachers-guide/content-authoring-guide/#mkdocs-commands","title":"Mkdocs commands","text":"<p>There are only four mkdocs commands.  You will rarely need to use the new command.</p>"},{"location":"teachers-guide/content-authoring-guide/#mkdocs-build","title":"mkdocs build","text":"<p>Build the MkDocs documentation.  We use this to test at the nav pages all match a document. If you get error messages in the build process you work on fixing them until the build does not return any errors.</p>"},{"location":"teachers-guide/content-authoring-guide/#mkdocs-gh-deploy","title":"mkdocs gh-deploy","text":"<p>Deploy your documentation to GitHub Pages.  Run this when you want to take your local changes and push them to the web site.</p> <p>Here is an example of this run:</p> <pre><code>$ mkdocs gh-deploy\nINFO    -  Cleaning site directory \nINFO    -  Building documentation to directory: /Users/dmccrea1/Documents/ws/CoderDojoTC/site \nINFO    -  Documentation built in 0.90 seconds \nINFO    -  Copying '/Users/dmccrea1/Documents/ws/CoderDojoTC/site' to 'gh-pages' branch and pushing to GitHub. \nINFO    -  Your documentation should shortly be available at: [https://CoderDojoTC.github.io/CoderDojoTC](https://CoderDojoTC.github.io/CoderDojoTC)\n</code></pre>"},{"location":"teachers-guide/content-authoring-guide/#mkdocs-new","title":"mkdocs new","text":"<p>Create a new MkDocs project.  Most of our mentors will not need to do this.  We will supply you with a template zip file with all the right content if you need to create a new CoderDojo microsite of your own.</p>"},{"location":"teachers-guide/content-authoring-guide/#mkdocs-serve","title":"mkdocs serve","text":"<p>Run the builtin development server and display the web site on your local computer.  This is a great way to quickly check your changes since the server watches for any file changes and immediately updates the web page.</p>"},{"location":"teachers-guide/content-authoring-guide/#material-examples","title":"Material examples","text":"<p>We chose the Google Material theme because there are tens of thousands of components you can add to your pages.  You can get a sample of them here:</p> <p>Material Components </p>"},{"location":"teachers-guide/content-authoring-guide/#embedding-videos","title":"Embedding Videos","text":"<p>We strongly encourage some movement in short 10-second demos using videos.</p> <p>To embed a YouTube video do the following</p> <ol> <li>Use the Share button</li> <li>Select the Embed option</li> <li>Copy the iFrame code and paste it into your MarkDown</li> <li>Add the <code>?rel=0</code> link which will only put your own related videos on the More Video when the video is done playing.</li> </ol> <p>See YouTube Embed Option for Related Videos Changes for details.</p>"},{"location":"teachers-guide/designing-concept-cards/","title":"Concept Cards","text":"<p>Dan McCreary Version 1.1 \u2013 last updated September, 2021</p>"},{"location":"teachers-guide/designing-concept-cards/#what-are-concept-cards","title":"What are Concept Cards?","text":"<p>Concept Cards are teaching tools that are popular in informal hands-on settings such as CoderDojo classrooms.  Concept cards follow the \"one concept per card\" rule.  Each card attempts to illustrate one-and-only-one concept using a simple example.  Within the CoderDojo mentoring system, Concept Cards also called \"Sushi Cards\" in the CoderDojo mentoring system, representing a single bite of knowledge.  Concepts are communicated in easy-to-digest, bite-sized chunks (hence Sushi).</p> <p>Concept Cards are a way of taking complex topics and decomposing the topics into simple examples that can be used to illustrate the principals needed to master the topic.</p> <p>Concept Cards can be used in multiple teaching styles including goal-directed learning, fixed hierarchy learning and ad-hoc rhizomatic network learning.</p>"},{"location":"teachers-guide/designing-concept-cards/#when-should-concept-cards-be-used","title":"When Should Concept Cards be Used?","text":"<p>Concept Cards are ideal for situations where students may not have one-on-one time with a teacher or mentor. Concept Card facilitate self-guided instruction without having to pick up a 300-page book where you must to start on page one and learn the material sequentially. We like to think of them as \"Agile Teaching\" tools where there are multiple entry points into learning and multiple possible outcomes.</p> <p>We like to use a library of Concept Cards when the requirements of your classrooms may be constantly changing. If designed correctly, concepts cards allow you to remix concepts to adapt to different students, projects and educational events.</p>"},{"location":"teachers-guide/designing-concept-cards/#design-goals","title":"Design Goals","text":"<p>Breaking complex topics down into many small concepts is a universal strategy in designing any curriculum.  We often call this process decomposition.  Having a good set of concepts can promote building flexible data structures that are used in learning management systems. Sometimes designing a graph of interrelated concepts is a first step in building these systems.  Once we have a list of concepts with their dependencies we can then focus on designing the content to teach these concepts.</p> <p>We now suggest some guidelines for the creation of concept cards for CoderDojo classrooms.</p>"},{"location":"teachers-guide/designing-concept-cards/#guideline-1-one-card-one-concept","title":"Guideline 1: One Card, One Concept","text":"<p>Each Concept Card should teach one important concept. What is an important concept? That's the tricky bit!  And that's for the Card designer to decide. There is no scientific way of defining this.  Sometimes a Concept can be associated with a specific physical demonstration or \"lab\", like What is a Raspberry Pi Pico microcontroller?  Sometimes they are associated with a program, like the UNIX shell command, and sometimes Concept Cards are associated with a programming concept like a \"conditional\" statement or a \"for loop\".</p> <p>Ideally, Concept Cards should be related to a piece of hardware, a program, a function or a small sample of code that illustrates the principle as simply and clearly as possible. Don't be tempted to add in 'side' lessons that show something else. Instead, make these into separate cards. Side concepts may be interesting to you, but you must resist the temptation to deviate from the concept.  Let your students take simple samples, master them and allow them to be the integrators of the concepts to produce working programs.</p>"},{"location":"teachers-guide/designing-concept-cards/#types-of-concept-cards","title":"Types of Concept Cards","text":"<p>Although we try to avoid strict hierarchial curriculum in our CoderDojo classrooms, we still must take into account that not all Concept Cards are the same. Some cards depend on other cards.  Grouping cards into difficulty categories is a way to guide students without forcing structure.</p> <p>Concept cards are often divided into multiple difficulty levels like the following:</p> <ul> <li>Beginning - where a concept does not depend on any other concepts in your curriculum</li> <li>Intermediate - where a concept might depend on one or more Beginning concept</li> <li>Advanced - where a concept depends on one or more intermediate concepts</li> </ul>"},{"location":"teachers-guide/designing-concept-cards/#designing-colorful-laminated-concept-cards","title":"Designing Colorful Laminated Concept Cards","text":"<p>Like many communication tools, designing concept cards reflect that the medium is the message.  How we print and display Concept Cards makes a big difference in their effectiveness.</p> <p>Imagine a new CoderDojo student walking into a classroom.  Computer are often spread around the edges and back of the classroom.  But near the entrance to the classroom is a table covered with small 5X10 inch laminated cards. The cards each have a colorful border indicating their difficulty, and every card has an image that can quickly be recognized by returning students.</p> <p>We often use two-sided laminated cards that are easy to hold in one hand and easy to view by the side of a computer.   The structure of the cards is important because they don't look intimidating.  They are not walls of text and they don't look like a college textbook.</p> <p></p> <p>In contrast, the book Learning Python by Mark Lutz is a 1,600-page book that had detailed discussions areas of Python that many programmers may never need.  The chapter on the \"if\" statement does not even start until page 383!</p> <p>We want Concept Cards to look a bit like a stack of colorful playing cards, not a 1,600 page college computer science textbook. Learners can move at their own pace and there is never the suggestion that only those patient enough to read a 1,600 page textbook are allowed to participate.  You can easily place the card next to a piece of hardware or laptop.</p> <p>For instance, if they\u2019re learning UNIX, they\u2019ll probably have three or four windows open \u2013 so having another open to show the class notes is contributing to serious window management problems.</p>"},{"location":"teachers-guide/designing-concept-cards/#lamination","title":"Lamination","text":"<p>Plastic lamination will save you time and money. Laminators cost around $50. The individual laminating pouches are less than 10 cents each. Once you\u2019ve produced your laminated sheet it will last for many weeks of CoderDojo sessions, in contrast to paper handouts which are usually discarded after one or two CoderDojo sessions.</p>"},{"location":"teachers-guide/designing-concept-cards/#test-test-test","title":"Test, test, test","text":"<p>(practice-led, not theory-led) Because every audience is different, you can't really predict if cards will work for any audience.  The approach is practice-led rather than theory-led so that learners see results as fast as possible. We think this mirrors the way most programmers learn anyway. (First, take some existing code and hack it, read up the theory only if you can\u2019t figure out what\u2019s going on \u2026)</p>"},{"location":"teachers-guide/designing-concept-cards/#keep-examples-short-and-sweet","title":"Keep examples short and sweet","text":"<p>Any example code should be as short as possible (to minimize mistyping) and should be as easy to understand as possible \u2013 make examples as concrete as you can. Using self-descriptive variable and parameter names is helpful (good programming anyway).</p>"},{"location":"teachers-guide/designing-concept-cards/#dont-feel-you-have-to-explain-everything","title":"Don\u2019t feel you have to explain everything","text":"<p>Don't feel you have to explain everything \u2013 it's often better to show some self-descriptive code and then ask the learner the question 'can you figure out what this is doing?' or 'how would you change this to do X'. You\u2019re pointing learners in the right direction, but you're not watching over them for the whole journey. Also \u2026 improvisation should be encouraged. Learning examples should be presented in such a way that the learner can riff on the examples and quickly produce new materials that showcase their own interests.</p>"},{"location":"teachers-guide/designing-concept-cards/#cards-should-be-self-contained","title":"Cards should be self-contained","text":"<p>Although the lessons should be built on one another, individual cards should still be fairly self-contained. In the HTML example it's necessary to do the first two or three cards in order, but after the learner has created a basic site card it could be picked up in any order. (Although to make this work, you may need to revisit earlier cards after you add in a later card).</p>"},{"location":"teachers-guide/designing-concept-cards/#pictures-are-good","title":"Pictures are Good","text":"<p>Having the materials look inviting is important. The best practice is to have a friendly, not-too-complex, yet colorful picture at the top of each card just below the concept name.  We try to show an end-result that looks exciting and makes learners want to dive in. Try to avoid having English in your pictures due to hassle made when translating to other languages.</p>"},{"location":"teachers-guide/designing-concept-cards/#the-cards-will-never-be-perfect-dont-worry","title":"The cards will never be perfect \u2013 don\u2019t worry!","text":"<p>Whenever you work with learners and use the cards, you\u2019ll quickly come across all sorts of errors, imperfections and barriers to comprehension. But don\u2019t worry about it. It\u2019s normal. Just go home and modify them. Each change you make will make the cards easier to use.</p>"},{"location":"teachers-guide/designing-concept-cards/#sample-concept-card-structure","title":"Sample Concept Card Structure","text":""},{"location":"teachers-guide/designing-concept-cards/#front-material","title":"Front Material","text":""},{"location":"teachers-guide/designing-concept-cards/#difficulty","title":"Difficulty","text":"<p>The outer border of the card should show the difficulty level using a bright color.  We use green for beginning concepts, blue for intermediate concepts and black for advanced concepts.  Also use text because some students may be color blind.</p>"},{"location":"teachers-guide/designing-concept-cards/#concept-name","title":"Concept Name","text":"<p>Try to use a short kid-friendly name and avoid technical jargon if possible</p>"},{"location":"teachers-guide/designing-concept-cards/#concept-picture","title":"Concept Picture","text":"<p>A small image or icon that students will remember if they have seen it before.  Imagine students all arriving in a room and quickly discarding cards they have already done but putting their focus on new concept cards.</p>"},{"location":"teachers-guide/designing-concept-cards/#activity-challenge","title":"Activity Challenge","text":"<p>A short list of activities that the students might try.  Give them hints at the very bottom of the card if they are hard challenges.</p>"},{"location":"teachers-guide/designing-concept-cards/#back-material","title":"Back Material","text":"<p>** Activity Answers - A short list answer to the challenges on the front of the card ** ** Explorations** - More ways to learn more about a concept or related Concepts</p>"},{"location":"teachers-guide/designing-concept-cards/#concept-card-design-tips","title":"Concept Card Design Tips","text":"<p>Use colors and paragraphs to prevent a \"wall of text\" that will turn students away.  Put in a colorful icon in the text or use bold/italic or colors to highlight words.  Use icons, graphics, figures, photos, lists or tables to break up text.</p> <p>Large blocks of text can be intimidating to readers and tough to read for all. Look at the examples for reference for a good sushi card in terms of text readability.</p> <p>Visit http://dojo.soy/style for guidelines to aim for.</p> <ul> <li>You can remind them to ask for a mentor if installing something is too hard</li> <li>Add important Terms in colored boxes</li> <li>Historic tips are welcome, fun facts too</li> <li>Bold terms like copy, paste, click, keyboard buttons etc. (any words that's used a lot and has either been defined or is common computing terms)</li> <li>Instructions should work for both PC and Mac</li> <li>Appropriately colored boxes break the wall of texts and make the text less daunting. There should be at least one yellow box or screenshot on each page. Use this to explain key concepts in simple language.</li> <li>Always try to end the back of a card with play around with other challenges. i.e. making music with a Raspberry Pi, a game in Python, a webpage in HTML/CSS. Encourage them to tweak and explore what they've done.</li> <li>Needless to say, a child will not understand a lot of big words. Use basic language and don't make a comparison to something they wouldn't understand like a bank or job</li> <li>Test your card by watching kids pick them up and try them.  Don't try for perfection on the first pass.  Get it out there and iterate, iterate, iterate...</li> <li>Get feedback from other mentors and teachers</li> </ul>"},{"location":"teachers-guide/designing-concept-cards/#sample-concept-form","title":"Sample Concept Form:","text":"<p>Concept Difficulty Level: Beginner, Intermediate or Advanced (use this to change the color of the border)</p> <p>Concept Name: _____</p> <p>Concept Picture:</p> <p>Concept Description:</p> <p>Optional: Predecessor Concepts</p> <p>Successor Concepts</p> <p>Activity Challenge Text:</p> <p>Concept Answers (often printed on the back of the card)</p> <p>More to Explore:</p>"},{"location":"teachers-guide/journey-maps/","title":"Journey Maps for Online Courses","text":"<p>Keeping students focused is a key problem in online courses.  This document describes how we can use visual journey maps to keep online students focused on their goals.  This document is divided into two parts.  Part 1 describes what Journey Maps are and how they are used in our virtual CoderDojo mentoring sessions.  Part 2 targets at our mentors that are also helping create learning content and the colorful Journey Maps that go along with these courses.</p>"},{"location":"teachers-guide/journey-maps/#part-1-using-journey-maps-with-coderdojo-students","title":"Part 1: Using Journey Maps With CoderDojo Students","text":""},{"location":"teachers-guide/journey-maps/#what-are-journey-maps","title":"What are Journey Maps?","text":"<p>In a general sense, Journey Maps are a visualization of the process that a person goes through to accomplish a goal.  Journey Maps are used extensively by experts in the field of User Experience Design (UX).  In the context of developing virtual mentor assisted courses, we can use them as a way of keeping our students engaged, directing their focus toward a goal, and quickly reviewing out where students left off after a prior mentoring session with another mentor.</p>"},{"location":"teachers-guide/journey-maps/#classroom-feedback-vs-online-distractions","title":"Classroom Feedback vs Online Distractions","text":"<p>One of the challenges of online mentoring is keeping our students on track.  In a physical CoderDojo classroom when there are multiple students working together on a common goal, students observe each other working on projects. This feedback keeps them focused on reaching their educational goals.  Experienced teachers leverage the research on Social constructivism in their course design.</p> <p>However, when we design online courses used in the home environment we don't have the luxury of these feedback systems to keep our students focused on reaching their learning goals.  There may be many distractions - other siblings, background TV noise, and other interruptions that our online mentors can see and can't control.  So to be successful we need to design courses to keep our students on task and bring them back to their learning objectives when they are distracted.</p> <p>One of the ways we can keep students focused is to create a clear mental model of the \"map\" of a course and then reinforce this map repeatedly until we reach the end of the course.  In a high-school or college course we have are often presented with a syllabus of the first day of a course.  This document is a lesson-by-lesson guide of the course so you can show students, administrators, and colleagues what we plan to teach in a course.  In our CoderDojo online mentoring sessions we can also use a graphic version of a syllabus to begin our sessions.  For our younger students we also want to make this document more fun and interactive.  We will call this document our Learning Journey Map.</p> <p>Creating a single page \"map\" allows our students to orient themselves using the same neural pathways they use when we walk around our home or their neighborhood.  Research has shown  that creating these maps help us use specialized Gird Cells in our brain to orient ourselves and do planning.</p> <p>## The Learning Journey Map A CoderDojo Online Learning Journey Map is a colorful single-page view of our course.  It is designed to be printed out on an 8.5X11 landscape piece of paper so that students can have it next to their computer and see where they are in the course.  The Journey Map allows them to both and see their progress toward reaching an objective.  It shows them what they have accomplished and what they still need to learn.</p>"},{"location":"teachers-guide/journey-maps/#the-components-of-a-journey-map","title":"The Components of a Journey Map","text":"<p>A Learning Journey Map has a clearly defined starting point, usually in the upper-left corner of the screen and a destination, often placed at the lower-right corner of the screen.  Each lesson is a waypoint on the road between the start and the end of the map.  A typical CoderDojo Online Journey map has between six and 20 lessons and is typically designed to take 2 to 3 1-hour sessions with an online mentor.</p>"},{"location":"teachers-guide/journey-maps/#part-2-creating-great-journey-maps","title":"Part 2: Creating Great Journey Maps","text":"<p>Now we want to focus on some of the design techniques that we want to use to create engaging Journey Maps for our CoderDojo online courses.  First, lets start with a basic boring Journey Map and then see how we can improve it to increase engagement.</p>"},{"location":"teachers-guide/journey-maps/#a-boring-journey-map","title":"A Boring Journey Map","text":"<p>Here is an example of a boring journey map template:</p> <p></p> <p>Although we have a nice icon for the Start and Finish locations, the rest of the diagram is very plain.  There is no use of color and all the shapes are the same.  The journey map does not present a sense of adventure, challenges, and overcoming the challenge of learning new complex concepts.  It would be challenging for a student to remember where the last left off and the feeling is boring and repetition.</p> <p>Here is a sample of a simple of another Journey Map</p> <p></p> <p>Let's take a look at a few more of the design aspects of this map.  First you will note that we are attempting to use different colors and shapes for each lesson.  This lets the students know that these lessons are all different and exciting!  We also are bringing in various icons form the lessons to help students remember where they might have left off.</p>"},{"location":"teachers-guide/journey-maps/#journey-map-templates","title":"Journey Map Templates","text":""},{"location":"teachers-guide/journey-maps/#references","title":"References","text":"<ol> <li>Angela Stockman on K-12 Journey Maps</li> <li>Journey Maps on Standford K-12 Wiki</li> <li>Nielsen Norman Group on Journey Mapping</li> <li>Reader Rabbit created a  early demonstration of Journey Maps as a navigational aid to a PC-based game for learning to read. Reader Rabbit Reading 4-6 Full Walkthrough</li> </ol>"},{"location":"teachers-guide/mentoring-best-practices/","title":"Mentoring Tips","text":"<p>Mentoring kids in coding is a rewarding experience that requires a thoughtful approach.  Here are some key pieces of advice to help volunteers be effective mentors:</p>"},{"location":"teachers-guide/mentoring-best-practices/#things-to-do","title":"Things to Do","text":"<ol> <li> <p>Tell the Kids if you are New:  If you are a new mentor, feel free to tell your student. Tell them that you write code every day but you have never taught a subject or taught a subject to a 10-year-old student.  Ask them if they would help you become a good mentor.  Never feel you have to get the code perfect.  Reval in hard bugs and focus on teaching debugging skills.  Ask them of they have a theory about where the bug might be.</p> </li> <li> <p>Understand their Goals: Ask them if they have any specific learning goals for your session.  Ask them if they have been to a CoderDojo session in the past and what they liked - or didn't like. Get them to describe their ideas and then help them achieve them.</p> </li> <li> <p>Understand their background:  Ask them if they have used the language before.  What did they learn?  What did they like?</p> </li> <li> <p>Start Slow and Listen:  Ask them about their feelings about how fast they learn.  Tell them that programming can sometimes get frustrating and it is OK to talk about these feelings. Patience is key. Understand that learning to code can be challenging,  and children may become frustrated or disinterested at times.  Show empathy and support to help them overcome these hurdles. Ensure a strong foundation by starting with basic concepts.  Use age-appropriate and engaging materials to teach fundamental  principles before moving on to more complex topics.</p> </li> <li> <p>Understand Each Child's Learning Style: Every child learns differently.  Some may grasp concepts quickly, while others need more time and repetition.  Be patient and attentive to their individual learning styles and needs. Some kids like to work alone and some like to work in groups and see what other kids are doing.</p> </li> <li> <p>Foster a Safe and Encouraging Environment: Create an atmosphere where kids feel safe to ask questions,  make mistakes, and express themselves. Encouragement goes a long way in boosting their confidence and interest in coding.</p> </li> <li> <p>Make Learning Fun and Interactive: Coding can be made exciting through the use of LEDs, colors, motors and movement.  Use interactive projects that have fast feedback. Used RGB LEDs, LED strips, Trinket Turtle-Graphis and MicroSims. and hands-on activities. This approach helps maintain their interest and makes the learning process enjoyable. Focus on strategies that reduce feedback cycles.  Try to avoid long-compiled/upload times such as Arduino systems.</p> </li> <li> <p>Encourage Creativity and Experimentation: Allow children to experiment and be creative with their coding projects.  This not only enhances their problem-solving skills but also fosters a sense of ownership and pride in their work.</p> </li> <li> <p>Use Real-World Examples: Relate coding concepts to real-world applications.  This helps children understand the practical use of what they are learning and  can spark their interest in how technology impacts the world around them. For example, ask them if they want to make a colorful costume with LED strips.</p> </li> <li> <p>Encourage Teamwork and Collaboration: Promote collaborative projects where kids can work in teams.  This teaches them the importance of teamwork and communication in coding and software development. Studies show that kids learn the most when they build things together.  Project-based learning often shows the best results.</p> </li> <li> <p>Set Achievable Goals: Help children set realistic goals for their coding projects.  Achievable milestones can motivate them and give a sense of accomplishment.</p> </li> <li> <p>Provide Resources for Further Learning: Share resources like websites,  online courses, and books that can help children explore coding outside of your sessions. Ask them if they plan to return and give them a challenging problem to think about at the end of a session.</p> </li> <li> <p>Give Constructive Feedback: Provide feedback that is constructive and focuses on ways to improve.  Highlight their strengths and areas for improvement in a positive manner.</p> </li> </ol> <p>Remember, the goal is not only to teach coding but to inspire a lasting interest in technology and problem-solving. Your enthusiasm and commitment as a mentor can make a significant difference in their learning journey.</p>"},{"location":"teachers-guide/mentoring-best-practices/#things-to-avoid","title":"Things to Avoid","text":"<ol> <li> <p>Try not to be judgemental about any idea.  Help them discover the pros and cons of different approaches to coding.</p> </li> <li> <p>Try not to take the keyboard away from the students.</p> </li> </ol>"},{"location":"teachers-guide/rhizomatous-learning-theory/","title":"Rhizomatic Learning Theory","text":"<p> In pre-COVID CoderDojo classrooms we use a formal fixed curriculum based on static preprinted Concept Cards.  Concept Cards were colorful 4X5 laminated cards that students would view as they entered a classroom.  Unfortunately, with limited face-to-face interactions during the COVID pandemic, we are trying other more flexible ways of teaching and mentoring.</p> <p>One approach is to use a more network approach called Rhizomatic Learning that abandons fixed hierarchial structure with a more networked model that allows students to move from topic to topic as their interests takes them.</p> <p>Like any new pedagogical practice, the Rhizomatic Learning takes time to learn and support these structures in our content.</p>"},{"location":"teachers-guide/rhizomatous-learning-theory/#advantages-of-rhizomatic-learning","title":"Advantages of Rhizomatic Learning","text":"<ol> <li>Allows participants to react to evolving circumstances</li> <li>Allows agile learning to practices to adapt to new goals</li> <li>Keeps attention high as students new discoveries change their interests</li> <li>Ideally suited content developed with web hyperlinks</li> </ol>"},{"location":"teachers-guide/rhizomatous-learning-theory/#disadvantages-of-rhizomatic-learning","title":"Disadvantages of Rhizomatic Learning","text":"<ol> <li>Requires curriculum to be able to flow in a non-liner manner</li> <li>May require students to jump around in the content as they realize they don't have all the necessary knowledge to complete a task</li> </ol>"}]}