{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Arduino Moving Rainbow documentation! Learning to program using LED strips version 2 ''' Note! We are no longer accepting pull request for Arduino C code. Due to the fact that we can get Raspberry Pi Pico processors for $4 that run Python we have moved all our Moving Rainbow code over to Python. About Moving Rainbow Moving Rainbow is a way to learn the basics of programming using LED strips. We use low-cost components so you can build an entire costume with 100s of LEDs for under $20 Getting Started Addressable LED Strips Addressable LED strips are easy to connect to your project since they only need three wires (Ground, +5V and data). LED strip can be purchased on sites like ebay.com for under $5/meter of 60 RGB LEDs. References CoderDoj CoderDojo Twin Cities CodeSavvy Raspberry Pi Pico The Raspberry Pi Pico cost only $4 and runs Python. All our labs use this processor. Arduino Nanos Arduino Nanos were the lowest cost member of the Arduino family. They are small and can be purchased for under $3. Breadboards In our projects we use 1/2 sized breadboard with 400 tie points. Mode Buttons A \"mode\" is a way of having a single Arduino program run multiple patterns on the LED strip. Each mode has a number associated with it starting with 0 and continuing to the number of patterns we have in our program. In this section we will add two mode buttons. One button will make the pattern mode go to the next mode. The other button will go to the previous mode. Programming the LED strip Each of our example programs will have at least three sections: The preamble - this constains the library directives and initialization of static unchanging variables The setup() function - this function is run once with the Arduion first starts up The loop function - this function runs continually as long at the Arduino has power Sample Blink Program 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <Adafruit_NeoPixel.h> const int LED_STRIP_PIN = 12 ; // Connect the Data pin of the LED strip here const int NUMBER_PIXELS = 60 ; Adafruit_NeoPixel strip = Adafruit_NeoPixel ( NUMBER_PIXELS , LED_STRIP_PIN , NEO_GRB + NEO_KHZ800 ); void setup () { strip . begin (); } void loop () { strip . setPixelColor ( 0 , 255 , 0 , 0 ); strip . show (); delay ( 1000 ); strip . setPixelColor ( 0 , 0 , 0 , 0 ); delay ( 1000 ); }","title":"Moving Rainbow Home"},{"location":"#welcome-to-the-arduino-moving-rainbow-documentation","text":"Learning to program using LED strips version 2 ''' Note! We are no longer accepting pull request for Arduino C code. Due to the fact that we can get Raspberry Pi Pico processors for $4 that run Python we have moved all our Moving Rainbow code over to Python.","title":"Welcome to the Arduino Moving Rainbow documentation!"},{"location":"#about-moving-rainbow","text":"Moving Rainbow is a way to learn the basics of programming using LED strips. We use low-cost components so you can build an entire costume with 100s of LEDs for under $20","title":"About Moving Rainbow"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#addressable-led-strips","text":"Addressable LED strips are easy to connect to your project since they only need three wires (Ground, +5V and data). LED strip can be purchased on sites like ebay.com for under $5/meter of 60 RGB LEDs.","title":"Addressable LED Strips"},{"location":"#references","text":"CoderDoj CoderDojo Twin Cities CodeSavvy","title":"References"},{"location":"#raspberry-pi-pico","text":"The Raspberry Pi Pico cost only $4 and runs Python. All our labs use this processor.","title":"Raspberry Pi Pico"},{"location":"#arduino-nanos","text":"Arduino Nanos were the lowest cost member of the Arduino family. They are small and can be purchased for under $3.","title":"Arduino Nanos"},{"location":"#breadboards","text":"In our projects we use 1/2 sized breadboard with 400 tie points.","title":"Breadboards"},{"location":"#mode-buttons","text":"A \"mode\" is a way of having a single Arduino program run multiple patterns on the LED strip. Each mode has a number associated with it starting with 0 and continuing to the number of patterns we have in our program. In this section we will add two mode buttons. One button will make the pattern mode go to the next mode. The other button will go to the previous mode.","title":"Mode Buttons"},{"location":"#programming-the-led-strip","text":"Each of our example programs will have at least three sections: The preamble - this constains the library directives and initialization of static unchanging variables The setup() function - this function is run once with the Arduion first starts up The loop function - this function runs continually as long at the Arduino has power Sample Blink Program 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <Adafruit_NeoPixel.h> const int LED_STRIP_PIN = 12 ; // Connect the Data pin of the LED strip here const int NUMBER_PIXELS = 60 ; Adafruit_NeoPixel strip = Adafruit_NeoPixel ( NUMBER_PIXELS , LED_STRIP_PIN , NEO_GRB + NEO_KHZ800 ); void setup () { strip . begin (); } void loop () { strip . setPixelColor ( 0 , 255 , 0 , 0 ); strip . show (); delay ( 1000 ); strip . setPixelColor ( 0 , 0 , 0 , 0 ); delay ( 1000 ); }","title":"Programming the LED strip"},{"location":"getting-started/","text":"Getting Started with Moving Rainbow","title":"Getting Started with Moving Rainbow"},{"location":"getting-started/#getting-started-with-moving-rainbow","text":"","title":"Getting Started with Moving Rainbow"},{"location":"getting-started/kits/","text":"Moving Rainbow Kits Our standard kit contains the following parts: A Raspberry Pi Pico A 1/2 size solderless breadboard (400 ties) A 30-pixel addressable RGB LED strip (WS2812B) 3 terminal screw header Two momentary push buttons 22 gauge wires","title":"Standard Kits"},{"location":"getting-started/kits/#moving-rainbow-kits","text":"Our standard kit contains the following parts: A Raspberry Pi Pico A 1/2 size solderless breadboard (400 ties) A 30-pixel addressable RGB LED strip (WS2812B) 3 terminal screw header Two momentary push buttons 22 gauge wires","title":"Moving Rainbow Kits"},{"location":"getting-started/parts/","text":"Purchasing Your Own Parts You can easily create your own projects based on the Moving Rainbow kits and software. You can do this by purchasing parts on on-line sites such as e-Bay or Amazon. If you are a good planner you can purchase parts from China that take longer to arrive, but they can cost significantly less than parts that ship overnight on Amazon. This guide provides sample links to both e-Bay and Amazon, but we aware that these site change frequently. Soldering Many of the parts you purchase online might require some soldering to make them easy to use. We recommend that you get a soldering iron and solder and watch a YouTube video on how to solder. Kids should always have adult supervision and you should check with your school or classroom policy before you bring a soldering iron to school. MicroControllers Raspberry Pi Pico We use the Raspberry Pi Pico (far left) because it only costs about $4. It also mounts directly on the breadboard after we add the header pins. NeoPixels Header Pins If your Microcontrollers do not come with header pins, you can purchase about 100 of them on e-Bay for about $11. 100pcs Pitch 1x40 Pins 2.54mm Male Single Row Male Pin Header Strip NeoPixel Rings Raspberry Pi Pico Breadboards Momentary Push Buttons Boxes Our students love to put their projects into clear boxes so they can simply throw them in their backpacks and show their friends. We use clear boxes that you can purchase at The Container Store Shallow Narrow Stackable Rectangle Clear 8-1/4\" x 3-1/2\" x 1-1/2\" h $3.99 SKU:10051084 These boxes have a clear detachable lid that shows off the interior wiring of their kits. MicroPython Site For more parts, see the MicroPython site here:","title":"Purchasing Your Own Parts"},{"location":"getting-started/parts/#purchasing-your-own-parts","text":"You can easily create your own projects based on the Moving Rainbow kits and software. You can do this by purchasing parts on on-line sites such as e-Bay or Amazon. If you are a good planner you can purchase parts from China that take longer to arrive, but they can cost significantly less than parts that ship overnight on Amazon. This guide provides sample links to both e-Bay and Amazon, but we aware that these site change frequently.","title":"Purchasing Your Own Parts"},{"location":"getting-started/parts/#soldering","text":"Many of the parts you purchase online might require some soldering to make them easy to use. We recommend that you get a soldering iron and solder and watch a YouTube video on how to solder. Kids should always have adult supervision and you should check with your school or classroom policy before you bring a soldering iron to school.","title":"Soldering"},{"location":"getting-started/parts/#microcontrollers","text":"","title":"MicroControllers"},{"location":"getting-started/parts/#raspberry-pi-pico","text":"We use the Raspberry Pi Pico (far left) because it only costs about $4. It also mounts directly on the breadboard after we add the header pins.","title":"Raspberry Pi Pico"},{"location":"getting-started/parts/#neopixels","text":"","title":"NeoPixels"},{"location":"getting-started/parts/#header-pins","text":"If your Microcontrollers do not come with header pins, you can purchase about 100 of them on e-Bay for about $11. 100pcs Pitch 1x40 Pins 2.54mm Male Single Row Male Pin Header Strip","title":"Header Pins"},{"location":"getting-started/parts/#neopixel-rings","text":"","title":"NeoPixel Rings"},{"location":"getting-started/parts/#raspberry-pi-pico_1","text":"","title":"Raspberry Pi Pico"},{"location":"getting-started/parts/#breadboards","text":"","title":"Breadboards"},{"location":"getting-started/parts/#momentary-push-buttons","text":"","title":"Momentary Push Buttons"},{"location":"getting-started/parts/#boxes","text":"Our students love to put their projects into clear boxes so they can simply throw them in their backpacks and show their friends. We use clear boxes that you can purchase at The Container Store Shallow Narrow Stackable Rectangle Clear 8-1/4\" x 3-1/2\" x 1-1/2\" h $3.99 SKU:10051084 These boxes have a clear detachable lid that shows off the interior wiring of their kits.","title":"Boxes"},{"location":"getting-started/parts/#micropython-site","text":"For more parts, see the MicroPython site here:","title":"MicroPython Site"},{"location":"lessons/","text":"Moving Rainbow Lessons Blink Fade In and Out Heartbeat Red, Green and Blue Color Wheel Moving Pixel Swipe","title":"Moving Rainbow Lessons"},{"location":"lessons/#moving-rainbow-lessons","text":"Blink Fade In and Out Heartbeat Red, Green and Blue Color Wheel Moving Pixel Swipe","title":"Moving Rainbow Lessons"},{"location":"lessons/01-blink/","text":"Blink Here is one of simplest moving rainbow programs. It is our version of \"Hello World!. Our first program will just blink the first pixel on and off every 1/2 second. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from neopixel import NeoPixel from utime import sleep NEOPIXEL_PIN = 0 NUMBER_PIXELS = 30 strip = NeoPixel ( machine . Pin ( NEOPIXEL_PIN ), NUMBER_PIXELS ) while True : # red is 10 of 255 strip [ i ] = ( 10 , 0 , 0 ) # turn on for 1/2 second strip . write () sleep ( . 5 ) # turn off for 1/2 second strip [ i ] = ( 0 , 0 , 0 ) strip . write () sleep ( . 5 )","title":"Blink"},{"location":"lessons/01-blink/#blink","text":"Here is one of simplest moving rainbow programs. It is our version of \"Hello World!. Our first program will just blink the first pixel on and off every 1/2 second. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from neopixel import NeoPixel from utime import sleep NEOPIXEL_PIN = 0 NUMBER_PIXELS = 30 strip = NeoPixel ( machine . Pin ( NEOPIXEL_PIN ), NUMBER_PIXELS ) while True : # red is 10 of 255 strip [ i ] = ( 10 , 0 , 0 ) # turn on for 1/2 second strip . write () sleep ( . 5 ) # turn off for 1/2 second strip [ i ] = ( 0 , 0 , 0 ) strip . write () sleep ( . 5 )","title":"Blink"},{"location":"lessons/02-fade-in-and-out/","text":"Fade In and Out Lab What if instead of the first LED just turning on and off we want to slowly make the LED get brighter and then slowly dimmer? To do this we will change the brightness of the red from off (0) to fully on (255) in steps with a small delay of 1/100th of a second between the steps. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from neopixel import NeoPixel from time import sleep NUMBER_PIXELS = 1 LED_PIN = 0 strip = NeoPixel ( machine . Pin ( LED_PIN ), NUMBER_PIXELS ) # the time between each of the 255 brightness steps delay = . 01 while True : # slowly get brighter for i in range ( 0 , 255 ): strip [ 0 ] = ( i , 0 , 0 ) # red=255, green and blue are 0 strip . write () # send the data from RAM down the wire sleep ( delay ) # slowly get dimmer for i in range ( 255 , 0 , - 1 ): strip [ 0 ] = ( i , 0 , 0 ) strip . write () sleep ( delay )","title":"Fade In and Out Lab"},{"location":"lessons/02-fade-in-and-out/#fade-in-and-out-lab","text":"What if instead of the first LED just turning on and off we want to slowly make the LED get brighter and then slowly dimmer? To do this we will change the brightness of the red from off (0) to fully on (255) in steps with a small delay of 1/100th of a second between the steps. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from neopixel import NeoPixel from time import sleep NUMBER_PIXELS = 1 LED_PIN = 0 strip = NeoPixel ( machine . Pin ( LED_PIN ), NUMBER_PIXELS ) # the time between each of the 255 brightness steps delay = . 01 while True : # slowly get brighter for i in range ( 0 , 255 ): strip [ 0 ] = ( i , 0 , 0 ) # red=255, green and blue are 0 strip . write () # send the data from RAM down the wire sleep ( delay ) # slowly get dimmer for i in range ( 255 , 0 , - 1 ): strip [ 0 ] = ( i , 0 , 0 ) strip . write () sleep ( delay )","title":"Fade In and Out Lab"},{"location":"lessons/03-heartbeat/","text":"Heartbeat Lab What if you were building a robot and you wanted to flash the LED to look like a human heartbeat? Instead of slowing fading in and out, you would want the brightness to follow the electrical signals coming from the heart. This is called an elecrto cardiogram (EKG) and it look like this: Notice that the signal is low for about one second and then it spikes up to maximum brightness and then comes back down. When we are moving the brightness up and down, we don't have to pause between each of the 256 brightness values. The eye can't usually see the intermediate brightness values if the brightness is changing quickly. To make our code efficient we can skip over 9 out of 10 of the brightness gradations between 0 and 255. We call this the skip_interval in our code below. The following code emulates this heart beat pattern: ```py from neopixel import NeoPixel from time import sleep Most people have a heart rate of around 60-70 beats per minute If we add a once second delay between \"beats\" you can make and LED look like a beating heart. NUMBER_PIXELS = 1 LED_PIN = 0 strip = NeoPixel(machine.Pin(LED_PIN), NUMBER_PIXELS) ramp_delay = .001 beat_delay = 1 skip_interval = 10 while True: # ramp brightness up using the ramp_delay for i in range(0, 255, skip_interval): strip[0] = (i,0,0) strip.write() sleep(ramp_delay) # ramp brightness down using the same delay for i in range(255, 0, -skip_interval): strip[0] = (i,0,0) strip.write() sleep(ramp_delay) strip[0] = (0,0,0) strip.write() sleep(beat_delay) ```","title":"Heartbeat Lab"},{"location":"lessons/03-heartbeat/#heartbeat-lab","text":"What if you were building a robot and you wanted to flash the LED to look like a human heartbeat? Instead of slowing fading in and out, you would want the brightness to follow the electrical signals coming from the heart. This is called an elecrto cardiogram (EKG) and it look like this: Notice that the signal is low for about one second and then it spikes up to maximum brightness and then comes back down. When we are moving the brightness up and down, we don't have to pause between each of the 256 brightness values. The eye can't usually see the intermediate brightness values if the brightness is changing quickly. To make our code efficient we can skip over 9 out of 10 of the brightness gradations between 0 and 255. We call this the skip_interval in our code below. The following code emulates this heart beat pattern: ```py from neopixel import NeoPixel from time import sleep","title":"Heartbeat Lab"},{"location":"lessons/03-heartbeat/#most-people-have-a-heart-rate-of-around-60-70-beats-per-minute","text":"","title":"Most people have a heart rate of around 60-70 beats per minute"},{"location":"lessons/03-heartbeat/#if-we-add-a-once-second-delay-between-beats-you-can-make-and-led","text":"","title":"If we add a once second delay between \"beats\" you can make and LED"},{"location":"lessons/03-heartbeat/#look-like-a-beating-heart","text":"NUMBER_PIXELS = 1 LED_PIN = 0 strip = NeoPixel(machine.Pin(LED_PIN), NUMBER_PIXELS) ramp_delay = .001 beat_delay = 1 skip_interval = 10 while True: # ramp brightness up using the ramp_delay for i in range(0, 255, skip_interval): strip[0] = (i,0,0) strip.write() sleep(ramp_delay) # ramp brightness down using the same delay for i in range(255, 0, -skip_interval): strip[0] = (i,0,0) strip.write() sleep(ramp_delay) strip[0] = (0,0,0) strip.write() sleep(beat_delay) ```","title":"look like a beating heart."},{"location":"lessons/04-red-green-blue/","text":"","title":"04 red green blue"},{"location":"lessons/05-color-wheel/","text":"","title":"05 color wheel"}]}