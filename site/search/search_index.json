{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Arduino Moving Rainbow documentation! Learning to program using LED strips version 2 ''' Note! We are no longer accepting pull request for Arduino C code. Due to the fact that we can get Raspberry Pi Pico processors for $4 that run Python we have moved all our Moving Rainbow code over to Python. About Moving Rainbow Moving Rainbow is a way to learn the basics of programming using LED strips. We use low-cost components so you can build an entire costume with 100s of LEDs for under $20 Getting Started Addressable LED Strips Addressable LED strips are easy to connect to your project since they only need three wires (Ground, +5V and data). LED strip can be purchased on sites like ebay.com for under $5/meter of 60 RGB LEDs. References CoderDoj CoderDojo Twin Cities CodeSavvy Raspberry Pi Pico The Raspberry Pi Pico cost only $4 and runs Python. All our labs use this processor. Arduino Nanos Arduino Nanos were the lowest cost member of the Arduino family. They are small and can be purchased for under $3. Breadboards In our projects we use 1/2 sized breadboard with 400 tie points. Mode Buttons A \"mode\" is a way of having a single Arduino program run multiple patterns on the LED strip. Each mode has a number associated with it starting with 0 and continuing to the number of patterns we have in our program. In this section we will add two mode buttons. One button will make the pattern mode go to the next mode. The other button will go to the previous mode. Programming the LED strip Each of our example programs will have at least three sections: The preamble - this constains the library directives and initialization of static unchanging variables The setup() function - this function is run once with the Arduion first starts up The loop function - this function runs continually as long at the Arduino has power Sample Blink Program 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <Adafruit_NeoPixel.h> const int LED_STRIP_PIN = 12 ; // Connect the Data pin of the LED strip here const int NUMBER_PIXELS = 60 ; Adafruit_NeoPixel strip = Adafruit_NeoPixel ( NUMBER_PIXELS , LED_STRIP_PIN , NEO_GRB + NEO_KHZ800 ); void setup () { strip . begin (); } void loop () { strip . setPixelColor ( 0 , 255 , 0 , 0 ); strip . show (); delay ( 1000 ); strip . setPixelColor ( 0 , 0 , 0 , 0 ); delay ( 1000 ); }","title":"Moving Home"},{"location":"#welcome-to-the-arduino-moving-rainbow-documentation","text":"Learning to program using LED strips version 2 ''' Note! We are no longer accepting pull request for Arduino C code. Due to the fact that we can get Raspberry Pi Pico processors for $4 that run Python we have moved all our Moving Rainbow code over to Python.","title":"Welcome to the Arduino Moving Rainbow documentation!"},{"location":"#about-moving-rainbow","text":"Moving Rainbow is a way to learn the basics of programming using LED strips. We use low-cost components so you can build an entire costume with 100s of LEDs for under $20","title":"About Moving Rainbow"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#addressable-led-strips","text":"Addressable LED strips are easy to connect to your project since they only need three wires (Ground, +5V and data). LED strip can be purchased on sites like ebay.com for under $5/meter of 60 RGB LEDs.","title":"Addressable LED Strips"},{"location":"#references","text":"CoderDoj CoderDojo Twin Cities CodeSavvy","title":"References"},{"location":"#raspberry-pi-pico","text":"The Raspberry Pi Pico cost only $4 and runs Python. All our labs use this processor.","title":"Raspberry Pi Pico"},{"location":"#arduino-nanos","text":"Arduino Nanos were the lowest cost member of the Arduino family. They are small and can be purchased for under $3.","title":"Arduino Nanos"},{"location":"#breadboards","text":"In our projects we use 1/2 sized breadboard with 400 tie points.","title":"Breadboards"},{"location":"#mode-buttons","text":"A \"mode\" is a way of having a single Arduino program run multiple patterns on the LED strip. Each mode has a number associated with it starting with 0 and continuing to the number of patterns we have in our program. In this section we will add two mode buttons. One button will make the pattern mode go to the next mode. The other button will go to the previous mode.","title":"Mode Buttons"},{"location":"#programming-the-led-strip","text":"Each of our example programs will have at least three sections: The preamble - this constains the library directives and initialization of static unchanging variables The setup() function - this function is run once with the Arduion first starts up The loop function - this function runs continually as long at the Arduino has power Sample Blink Program 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <Adafruit_NeoPixel.h> const int LED_STRIP_PIN = 12 ; // Connect the Data pin of the LED strip here const int NUMBER_PIXELS = 60 ; Adafruit_NeoPixel strip = Adafruit_NeoPixel ( NUMBER_PIXELS , LED_STRIP_PIN , NEO_GRB + NEO_KHZ800 ); void setup () { strip . begin (); } void loop () { strip . setPixelColor ( 0 , 255 , 0 , 0 ); strip . show (); delay ( 1000 ); strip . setPixelColor ( 0 , 0 , 0 , 0 ); delay ( 1000 ); }","title":"Programming the LED strip"},{"location":"guide/","text":"St. Patrick's Day Colors Patterns for St. Patricks Day Here are some of the patterns: Fade in green on each pixel Turn random pixels on green or orange. A single green pixel moves from start to finish Cross runner - one green goes from start to end while a orange goes end to start All green First Half green followed by second half Orange Build of Quarter Green/Quarter Orange/Third quarter green/Last Quarter Orange Theater Chase in green 1 2 3 4 5 6 7 8 fadeIn(1); randomOn(50); singleRunner(); crossRunner(); allGreen(); halfGreenOrange(); quarterGreenOrange(); theaterChase(strip.Color(0, 255, 0), delayTime);","title":"Index"},{"location":"guide/#st-patricks-day-colors","text":"Patterns for St. Patricks Day Here are some of the patterns: Fade in green on each pixel Turn random pixels on green or orange. A single green pixel moves from start to finish Cross runner - one green goes from start to end while a orange goes end to start All green First Half green followed by second half Orange Build of Quarter Green/Quarter Orange/Third quarter green/Last Quarter Orange Theater Chase in green 1 2 3 4 5 6 7 8 fadeIn(1); randomOn(50); singleRunner(); crossRunner(); allGreen(); halfGreenOrange(); quarterGreenOrange(); theaterChase(strip.Color(0, 255, 0), delayTime);","title":"St. Patrick's Day Colors"},{"location":"guide/bill-of-materials/","text":"Moving Rainbow Bill of Materials We encourage everyone to purchase one device from (or make a donation to) the fine people at Arduino.org and Arudino.cc . It is their efforts that have produced the popular tools that we use to program our chips. We also want to thank the people at Adafruit for writing the NeoPixel driver libraries. Here are some of the parts you can purchase on-line: LED Strips All the addressible LED strips are based on the very popular WS-2812B chip. The tape comes in 30, 60 or 144 LEDs per meter, in white and black background and with and without water-resistent silicon wrapper. For the kits I use the 60 LEDs per meter and a black background. NeoPixels from Adafruit The prices on the Adafruit site have been about $25/meter without shipping. Generic WS-2812B Addressable LED Strip The prices are about $5/meter for the 60 LEDs per meter. They tend to take about two weeks to arrive from China. My standard kits use 1 meter strips with 60 pixels. If budgets are a problem 30 pixels strips will work, just remember to change the headers in the sample code. Arduino Nano I prefer the low-cost Arduino Nano processors that you can purchase from China for around $3. Although you must download a free driver to get the Nanos to work, when you purchase 20 kits at a time the price difference add up. Arduino Nano on Arduino.cc To find the best price I usually go to EBay.com and search for \"Arduino Nano V3.0\". Make sure you do NOT get a \"pro mini\" versions that have no USB conector. Sample Link on E-Bay . The prices as of April 2015 was $2.89 with shipping and it takes about 4 weeks to ship from China. You can also get a full size Arduino Uno from the Microcenter in St. Louis Park, MN for $9.99 + tax. USB Cable USB Cable on E-Bay Make sure you get a connector that matches your Arduino. Most of the Nano's use a \"Mini-B\" connector. Solderless Breadboards I usually include the 400 tie point solderless breadboard in the kits. It is enough room for most projects and it fits in the standard box. You can get them on E-Bay for around $2. Solderless Breadboards on EBay Boxes I have tried dozens of boxes and the one that students like the most are the clear polystyrene boxes that are 8-1/4\" long. You can get these at The Continer Store for $3.99 earch. If you search for \"Shallow Narrow Stackable Rectangle Clear\" you will find them. The link is here The dimensions are. 8-1/4\" x 3-1/2\" x 1-1/2\" h. Note that this box is an ideal size for students to put in their backbacks, take to school and show their friends. This is critical for the \"viral\" nature of the these kits. The more other kids see them the more they show their friends. One other lower-cost option is to just get the plastic \"shoe box\" containers from a local retailer. These are larger, not as clear but lower cost. I can usually find them for under $1.00. Other students have found left-over containers at places like the dollar store. Look for clear versions that you can drill holes into. Other Optional Parts Many of our kits also have a power switch, a rest button and a \"mode selection\" dial. Hooking these up is a bit more challenging,since there are 7 additional wires used. On-off switch I like to use a Mini 2-position toggle switch for about 30 cents each. 10 SPST Toggle Switchs You can get 10 for $3.24 with shipping. This is about 1/3 of price of other switches. Rotery Encoder Mode Selector Many of our kits have several \"modes\" that students can program. Each mode displays a different pattern. Rotery Encoder Push Button Switch You can get 10 of them for around $5.00 Momentary Push Buttons These buttons can be used to change modes or cycle through different color patterns. Momentary Push Buttons I found 10 fo them for $3.67 with shipping. Sample Price Estimator Worksheet I have created a sample spreadsheet you can use to estimate the per-kit costs. You can find a link to it here: Price Estimator Worksheet The current total is around $14.00 for all the parts when purchased in quantity 10.","title":"Bill of Materials"},{"location":"guide/bill-of-materials/#moving-rainbow-bill-of-materials","text":"We encourage everyone to purchase one device from (or make a donation to) the fine people at Arduino.org and Arudino.cc . It is their efforts that have produced the popular tools that we use to program our chips. We also want to thank the people at Adafruit for writing the NeoPixel driver libraries. Here are some of the parts you can purchase on-line:","title":"Moving Rainbow Bill of Materials"},{"location":"guide/bill-of-materials/#led-strips","text":"All the addressible LED strips are based on the very popular WS-2812B chip. The tape comes in 30, 60 or 144 LEDs per meter, in white and black background and with and without water-resistent silicon wrapper. For the kits I use the 60 LEDs per meter and a black background. NeoPixels from Adafruit The prices on the Adafruit site have been about $25/meter without shipping. Generic WS-2812B Addressable LED Strip The prices are about $5/meter for the 60 LEDs per meter. They tend to take about two weeks to arrive from China. My standard kits use 1 meter strips with 60 pixels. If budgets are a problem 30 pixels strips will work, just remember to change the headers in the sample code.","title":"LED Strips"},{"location":"guide/bill-of-materials/#arduino-nano","text":"I prefer the low-cost Arduino Nano processors that you can purchase from China for around $3. Although you must download a free driver to get the Nanos to work, when you purchase 20 kits at a time the price difference add up. Arduino Nano on Arduino.cc To find the best price I usually go to EBay.com and search for \"Arduino Nano V3.0\". Make sure you do NOT get a \"pro mini\" versions that have no USB conector. Sample Link on E-Bay . The prices as of April 2015 was $2.89 with shipping and it takes about 4 weeks to ship from China. You can also get a full size Arduino Uno from the Microcenter in St. Louis Park, MN for $9.99 + tax.","title":"Arduino Nano"},{"location":"guide/bill-of-materials/#usb-cable","text":"USB Cable on E-Bay Make sure you get a connector that matches your Arduino. Most of the Nano's use a \"Mini-B\" connector.","title":"USB Cable"},{"location":"guide/bill-of-materials/#solderless-breadboards","text":"I usually include the 400 tie point solderless breadboard in the kits. It is enough room for most projects and it fits in the standard box. You can get them on E-Bay for around $2. Solderless Breadboards on EBay","title":"Solderless Breadboards"},{"location":"guide/bill-of-materials/#boxes","text":"I have tried dozens of boxes and the one that students like the most are the clear polystyrene boxes that are 8-1/4\" long. You can get these at The Continer Store for $3.99 earch. If you search for \"Shallow Narrow Stackable Rectangle Clear\" you will find them. The link is here The dimensions are. 8-1/4\" x 3-1/2\" x 1-1/2\" h. Note that this box is an ideal size for students to put in their backbacks, take to school and show their friends. This is critical for the \"viral\" nature of the these kits. The more other kids see them the more they show their friends. One other lower-cost option is to just get the plastic \"shoe box\" containers from a local retailer. These are larger, not as clear but lower cost. I can usually find them for under $1.00. Other students have found left-over containers at places like the dollar store. Look for clear versions that you can drill holes into.","title":"Boxes"},{"location":"guide/bill-of-materials/#other-optional-parts","text":"Many of our kits also have a power switch, a rest button and a \"mode selection\" dial. Hooking these up is a bit more challenging,since there are 7 additional wires used.","title":"Other Optional Parts"},{"location":"guide/bill-of-materials/#on-off-switch","text":"I like to use a Mini 2-position toggle switch for about 30 cents each. 10 SPST Toggle Switchs You can get 10 for $3.24 with shipping. This is about 1/3 of price of other switches.","title":"On-off switch"},{"location":"guide/bill-of-materials/#rotery-encoder-mode-selector","text":"Many of our kits have several \"modes\" that students can program. Each mode displays a different pattern. Rotery Encoder Push Button Switch You can get 10 of them for around $5.00","title":"Rotery Encoder Mode Selector"},{"location":"guide/bill-of-materials/#momentary-push-buttons","text":"These buttons can be used to change modes or cycle through different color patterns. Momentary Push Buttons I found 10 fo them for $3.67 with shipping.","title":"Momentary Push Buttons"},{"location":"guide/bill-of-materials/#sample-price-estimator-worksheet","text":"I have created a sample spreadsheet you can use to estimate the per-kit costs. You can find a link to it here: Price Estimator Worksheet The current total is around $14.00 for all the parts when purchased in quantity 10.","title":"Sample Price Estimator Worksheet"},{"location":"guide/blink/","text":"Arduino Blink ===== Here is one of simplest programs. It is our version of \"Hello World!. This program will initialize the LED strip and then turn the first pixel on and off. Note that the first pixel must be addressed with the index number \"0\". So this is the first parameter of the setPixelColor method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <Adafruit_NeoPixel.h> #define NUMBER_PIEXEL 12 #define LEDPIN 12 // Our version of \"Hello World!\". Blink the first pixel (0) on and off every second Adafruit_NeoPixel strip = Adafruit_NeoPixel ( NUMBER_PIEXEL , LEDPIN , NEO_GRB + NEO_KHZ800 ); void setup () { strip . begin (); } void loop () { strip . setPixelColor ( 0 , 255 , 0 , 0 ); // set pixel 0 to be bright red strip . show (); // send data to the strip delay ( 1000 ); // wait one second strip . setPixelColor ( 0 , 0 , 0 , 0 ); // set pixel 0 to be off strip . show (); // send data to the strip delay ( 1000 ); // wait one second }","title":"Blink"},{"location":"guide/blink/#arduino-blink","text":"===== Here is one of simplest programs. It is our version of \"Hello World!. This program will initialize the LED strip and then turn the first pixel on and off. Note that the first pixel must be addressed with the index number \"0\". So this is the first parameter of the setPixelColor method. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <Adafruit_NeoPixel.h> #define NUMBER_PIEXEL 12 #define LEDPIN 12 // Our version of \"Hello World!\". Blink the first pixel (0) on and off every second Adafruit_NeoPixel strip = Adafruit_NeoPixel ( NUMBER_PIEXEL , LEDPIN , NEO_GRB + NEO_KHZ800 ); void setup () { strip . begin (); } void loop () { strip . setPixelColor ( 0 , 255 , 0 , 0 ); // set pixel 0 to be bright red strip . show (); // send data to the strip delay ( 1000 ); // wait one second strip . setPixelColor ( 0 , 0 , 0 , 0 ); // set pixel 0 to be off strip . show (); // send data to the strip delay ( 1000 ); // wait one second }","title":"Arduino Blink"},{"location":"guide/candle-flicker/","text":"Candle Flicker Here we combine some random functions with the intensity of a yellow and orange colors. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <Adafruit_NeoPixel.h> #define PIN 12 // connect the Data In pin Adafruit_NeoPixel strip = Adafruit_NeoPixel(18, PIN, NEO_GRB + NEO_KHZ800); void setup() { strip.begin(); } void loop() { candle(); } void candle() { uint8_t green; // brightness of the green uint8_t red; // add a bit for red for(uint8_t i=0; i<100; i++) { green = 50 + random(155); red = green + random(50); strip.setPixelColor(random(strip.numPixels() - 1), red, green, 0); strip.show(); delay(5); } }","title":"Candle flicker"},{"location":"guide/candle-flicker/#candle-flicker","text":"Here we combine some random functions with the intensity of a yellow and orange colors. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <Adafruit_NeoPixel.h> #define PIN 12 // connect the Data In pin Adafruit_NeoPixel strip = Adafruit_NeoPixel(18, PIN, NEO_GRB + NEO_KHZ800); void setup() { strip.begin(); } void loop() { candle(); } void candle() { uint8_t green; // brightness of the green uint8_t red; // add a bit for red for(uint8_t i=0; i<100; i++) { green = 50 + random(155); red = green + random(50); strip.setPixelColor(random(strip.numPixels() - 1), red, green, 0); strip.show(); delay(5); } }","title":"Candle Flicker"},{"location":"guide/color-wheel/","text":"Color Wheel Wouldn't it be nice if we could have each of our pixels change their color as though they were walking around a color wheel? Here is a program that does this. The key is a function called Wheel, that is provided with our NeoPixel library. The Wheel function is quite clever. It uses a set of if/then else functions that splits the colors up into three ranges. It does slightly different things if the input is: less then 88 less then 170 over 170 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int wait = 10; // how long we wait on each color (milliseconds) void setup() { strip.begin(); } void loop() { for (int color=0; color<255; color++) { for (int i=0; i<strip.numPixels(); i++) { strip.setPixelColor(i, Wheel(color)); } strip.show(); delay(wait); } } // Input a value 0 to 255 to get a color value. // The colours are a transition r - g - b - back to r. uint32_t Wheel(byte WheelPos) { WheelPos = 255 - WheelPos; if(WheelPos < 85) { return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3); } else if(WheelPos < 170) { WheelPos -= 85; return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3); } else { WheelPos -= 170; return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0); } } More to Explore Look at the intensity of the colors. You will find that although there are some darker colors, most of them tend to skew toward the white colors. This is because on the average, there are at least two colors that are over half on. We usually only get a deep color if two colors are almost off and the third one is on. How can you change the program so that we get a more full spectrum of colors?","title":"Color Wheel"},{"location":"guide/color-wheel/#color-wheel","text":"Wouldn't it be nice if we could have each of our pixels change their color as though they were walking around a color wheel? Here is a program that does this. The key is a function called Wheel, that is provided with our NeoPixel library. The Wheel function is quite clever. It uses a set of if/then else functions that splits the colors up into three ranges. It does slightly different things if the input is: less then 88 less then 170 over 170 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int wait = 10; // how long we wait on each color (milliseconds) void setup() { strip.begin(); } void loop() { for (int color=0; color<255; color++) { for (int i=0; i<strip.numPixels(); i++) { strip.setPixelColor(i, Wheel(color)); } strip.show(); delay(wait); } } // Input a value 0 to 255 to get a color value. // The colours are a transition r - g - b - back to r. uint32_t Wheel(byte WheelPos) { WheelPos = 255 - WheelPos; if(WheelPos < 85) { return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3); } else if(WheelPos < 170) { WheelPos -= 85; return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3); } else { WheelPos -= 170; return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0); } }","title":"Color Wheel"},{"location":"guide/color-wheel/#more-to-explore","text":"Look at the intensity of the colors. You will find that although there are some darker colors, most of them tend to skew toward the white colors. This is because on the average, there are at least two colors that are over half on. We usually only get a deep color if two colors are almost off and the third one is on. How can you change the program so that we get a more full spectrum of colors?","title":"More to Explore"},{"location":"guide/drivers/","text":"Many of the low-cost Arduino Nanos use the popular CH34G drivers. Unfortunatly, the Arduino IDE does not include these drivers. It does include other drivers so we are not sure why the CH34G drivers and not used. So you have to make sure to load the correct CH34G drivers! Here is where you can get them: http://www.wch.cn/download/CH341SER_MAC_ZIP.html Yes, this page is in Chinese! :-) There are drivers for both Windows and the Mac. Each version of the Arduino IDE has be be synced with the operating system. So the exact steps for each OS will be slightly different. Google \"CH34G Arduino Nano Drivers\" to get more information on this topic. Make sure you use the Arduino 1.6 platform (which should work with unsigned drivers) and reboot after you install the drivers. Note that these drivers are \"unsigned\". If you have a problem with some of the new mac OS that is picky about checking for signed drivers, you might have to disable the checking for a \"signed\" driver. 1 sudo nvram boot-args=kext-dev-mode=1 You can re-enable driver signing after you are done: 1 sudo nvram -d boot-args","title":"Drivers"},{"location":"guide/fade-in-and-out/","text":"Fade In and Out 1 2 3 fadeInAndOut(uint32_t color, uint8_t wait) { }; This says that the colorWipe function has two inputs: 1. The first parameter (color), is an unsigned 32-bit integer 2. The second input is wait, which is an unsigned 8 bit integer. It is somewhat complicate to write hex numbers. So to make this easy we will use a function that takes three integers (red, green and blue) and converts them to a single hex number. This is called the strip.Color() function. Here is the full program that will turn our LED strip, red, then green, then blue. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // fade in and out #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int waitTime = 10; void setup() { strip.begin(); } void loop() { fadeInAndOut(255, 0, 0, waitTime); // Red fadeInAndOut(0, 255, 0, waitTime); // Green fadeInAndOut(0, 0, 255, waitTime); // Blue } void fadeInAndOut(uint8_t red, uint8_t green, uint8_t blue, uint8_t wait) { for(uint8_t b=0; b <255; b++) { for(uint8_t i=0; i < strip.numPixels(); i++) { strip.setPixelColor(i, red*b/255, green*b/255, blue*b/255); } strip.show(); delay(wait); }; for(uint8_t b=255; b > 0; b--) { for(uint8_t i=0; i < strip.numPixels(); i++) { strip.setPixelColor(i, red*b/255, green*b/255, blue*b/255); } strip.show(); delay(wait); }; }; More to explore What happens if you change the second parameter from 150 milliseconds to 50 milliseconds? What about 5 milliseconds? Can you still see the motion when the delay is very small?","title":"Fade In and Out"},{"location":"guide/fade-in-and-out/#fade-in-and-out","text":"1 2 3 fadeInAndOut(uint32_t color, uint8_t wait) { }; This says that the colorWipe function has two inputs: 1. The first parameter (color), is an unsigned 32-bit integer 2. The second input is wait, which is an unsigned 8 bit integer. It is somewhat complicate to write hex numbers. So to make this easy we will use a function that takes three integers (red, green and blue) and converts them to a single hex number. This is called the strip.Color() function. Here is the full program that will turn our LED strip, red, then green, then blue. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // fade in and out #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int waitTime = 10; void setup() { strip.begin(); } void loop() { fadeInAndOut(255, 0, 0, waitTime); // Red fadeInAndOut(0, 255, 0, waitTime); // Green fadeInAndOut(0, 0, 255, waitTime); // Blue } void fadeInAndOut(uint8_t red, uint8_t green, uint8_t blue, uint8_t wait) { for(uint8_t b=0; b <255; b++) { for(uint8_t i=0; i < strip.numPixels(); i++) { strip.setPixelColor(i, red*b/255, green*b/255, blue*b/255); } strip.show(); delay(wait); }; for(uint8_t b=255; b > 0; b--) { for(uint8_t i=0; i < strip.numPixels(); i++) { strip.setPixelColor(i, red*b/255, green*b/255, blue*b/255); } strip.show(); delay(wait); }; };","title":"Fade In and Out"},{"location":"guide/fade-in-and-out/#more-to-explore","text":"What happens if you change the second parameter from 150 milliseconds to 50 milliseconds? What about 5 milliseconds? Can you still see the motion when the delay is very small?","title":"More to explore"},{"location":"guide/getting-started/","text":"Getting Started In this section you will learn How To: Connect the LED Strip to the Arduino Install the Arduino IDE Install the Library to use the LED Strip Configure, deploy, and run a first program using the LED Strip Optional: Install Device Driver for off-brand Arduino Nano Connect the LED Strip to the Arduino 1 2 3 Connect the red wire to the +5 Connect the black wire to GND Connect the yellow wire to pin 12 -- Note: pin number used later in code. Install the Arduino IDE If you have not already done so, now is a good time to download the main Arduino Integrated Development Environment (IDE) software from http://arduino.cc/en/Main/Software Follow the IDE installation directions. Then, connect the Arduino device to your computer via USB. Note: It may be necessary to install additional Device Driver for the computer to successfully connect and talk to the Arduino device. See the \"Install Device Driver for off-brand Arduino Nano\" section below. After the two are connected, you should be able to go to the Files -> Examples -> Basic -> Blink and open the blink Sketch. A Program for Arduino is called a Sketch. Select to Upload the Sketch. If it works, you should then see a built-in LED on the Arduino flash on and off. Note: It may be necessary to select different values for Board, Processor, and Port through the Tools menu. This is briefly covered in the \"Install Device Driver for off-brand Arduino Nano\" section below. Install the Library to use the LED Strip To use the LED Strip from an Arduino Sketch (programming code), it is necessary to Install an Additional Arduino Library . We will use the Adafruit NeoPixel Libary. There are different ways to install a Library. Two installation methods are described next. (You only need to complete one installation method.) Library Installation Method 1: Download, Unzip, Rename, and Move Folder Download the newest version of the NeoPixel Library as a Zip file, from the NeoPixel project repository. Download: https://github.com/adafruit/Adafruit_NeoPixel/archive/master.zip (If that direct link to download the zip file stops working, an alternative may be available from the NeoPixel repository at http://github.com/adafruit/Adafruit_NeoPixel .) Unzip, Rename, and Move Folder The downloaded NeoPixel Library is in a single zip file, likely named Adafruit_NeoPixel-master.zip. The contents of this file must be unzipped, renamed, and moved to a specific location. One way to unzip this file onto your local computer is to right-click the file and look for an \"unzip\" option. Once unzipped, you will see a folder likely named \"Adafruit_NeoPixel-master\". Rename the folder to 'Adafruit_NeoPixel' (remove the '-master' suffix), and move it to one of these three locations: 1. For Linux and Mac computers, the Arduino/Libraries/ folder in your ~ home directory 1. For Windows computers, the Documents\\Arduino\\libraries\\ folder in your home directory -- Often C:\\Users\\USERNAME\\ 1. For Windows computers, to install the Library for all users, place it in the libraries folder of the Arduino IDE installation -- Often C:\\Program Files (x86)\\Arduino\\libraries\\ . Note that this installation option is \"fragile\", where updates to the Arduino IDE installation might remove items added to its libraries folder. Library Installation Method 2: Install via Arduino IDE Library Manager Using the Arduino IDE, select Sketch -> Include Library -> Manage Libraries... Search for Adafruit NeoPixel Select \"Install\" button for the newest version (1.1.8 as of 2019-03-11). This method automatically downloads a zip file to C:\\Users\\USERNAME\\AppData\\Local\\Arduino15\\staging\\libraries and installs the Library to C:\\Users\\USERNAME\\Documents\\Arduino\\libraries\\Adafruit_NeoPixel . Restart the Arduino IDE After installing the library in the right location, it may be necessary to close and restart the Arduino IDE. Configure, deploy, and run a first program using the LED Strip Using the Arduino IDE, open the strandtest Sketch. It is available via 1 2 3 File -> Sketchbook -> Library -> Adafruit_NeoPixel -> strandtest OR File -> Examples -> Adafruit NeoPixel -> strandtest Change the code that initializes the LED Strip so that it uses pin 12, as connected to during the \"Connect the LED Strip to the Arduino\" step above. Either: 1 Adafruit_NeoPixel strip = Adafruit_NeoPixel(12, 12, NEO_GRB + NEO_KHZ800); or change #define PIN 6 to #define PIN 12 Connect Arduino to the computer via USB. Then, in the Tools menu, it may be necessary to change the values for Board, Processor, and Port. Depending on the Arduino device and connection, working values might be \"Arduino Nano\", \"ATmega328P (Old Bootloader)\", and \"COM3\" or \"COM4\". Select \"Upload\" in the Arduino IDE. If successful, the output console dislays the message \"Done uploading.\" and the LED Strip should rotate through differing LED flashing and color patterns. If the output console dislays a message other than \"Done uploading.\" followed by details of Sketch size and variables memory size, then things are likely not working, and it's time for troubleshooting. Maybe the board type you have is \"Uno\" and not \"Nano\". Maybe the Arduino device is connected on a different port. Maybe the necessary device driver is not yet installed. Optional: Install Device Driver for off-brand Arduino Nano If you do not see the serial port for the connected Arduino device when you go to the Tools -> Port menu in the Arduino IDE, it may be that your computer does not yet have the CH340 device driver needed to connect to the off-brand Arduino Nano used with this project. Follow these steps to install the CH340 driver. Note: Local admin rights on your computer are needed when installing the driver. For Windows 10 There are two options for installing the CH340 Driver that are confirmed to be working as of 2019-03-11. After completing either of these installation options, restart the computer. Installation Option 1: Use Device Manager With the Arduino device connected to the computer via USB, run the Windows Device Manager program with Administrator permissions. If Device Manager lists a problem device, such as \"Other devices -> USB2.0-Serial\" with \"Device status\" of \"The drivers for this device are not installed.\", select to \"Update Driver\" and select to allow Windows to search all locations, i.e., the internet, for a driver. If successful, the driver for device \"USB-SERIAL CH340\" will be installed. In Device Manager, the device will then be listed in the \"Ports (COM & LPT)\" section, and the \"Device status\" will have changed to \"This device is working properly.\" Driver Details as of 2019-03-11: 1 2 3 4 5 Driver: Provider: wch.cn Date: 2014-08-08 Version: 3.4.2014.8 Signer: Microsoft Windows Hardware Compatibility Publisher Restart the computer. Installation Option 2: Download and Run Download the \"setup executable\" version of the FTDI Driver from https://www.ftdichip.com/Drivers/VCP.htm As of 2019-03-11, the latest version 2.12.28 released 2017-08-30 was available directly at https://www.ftdichip.com/Drivers/CDM/CDM21228_Setup.zip Unzip the downloaded file, and run the Setup.exe installation program. Restart the computer. For Mac Download the CH340 Driver from http://www.wch.cn/download/CH341SER_MAC_ZIP.html Note that as of August of 2015, the driver for the Mac is still \"unsigned\" and will not work on modern Mac OSs (Yousemite). The workaround this is to temporarly disable checking for a signed driver on the Mac. To do this run the following program in the Mac UNIX Console /Applications -> Utilities -> Terminal 1 sudo nvram boot-args=\"kext-dev-mode=1\" The most current version of Mac (El Capitan) has some problems recognizing the NEO board. Per this Stack Exchange thread, downloading a paid driver has helped one student in this demo. After you run this command you must reboot the Mac for it to take effect. This will allow the driver to be loaded, though it is unsigned. See this helpful post on Installing the CH340 Driver on Yosemite on the Mac After the driver is installed you should see a non-Bluetooth port appear.","title":"Getting Started"},{"location":"guide/getting-started/#getting-started","text":"In this section you will learn How To: Connect the LED Strip to the Arduino Install the Arduino IDE Install the Library to use the LED Strip Configure, deploy, and run a first program using the LED Strip Optional: Install Device Driver for off-brand Arduino Nano","title":"Getting Started"},{"location":"guide/getting-started/#connect-the-led-strip-to-the-arduino","text":"1 2 3 Connect the red wire to the +5 Connect the black wire to GND Connect the yellow wire to pin 12 -- Note: pin number used later in code.","title":"Connect the LED Strip to the Arduino"},{"location":"guide/getting-started/#install-the-arduino-ide","text":"If you have not already done so, now is a good time to download the main Arduino Integrated Development Environment (IDE) software from http://arduino.cc/en/Main/Software Follow the IDE installation directions. Then, connect the Arduino device to your computer via USB. Note: It may be necessary to install additional Device Driver for the computer to successfully connect and talk to the Arduino device. See the \"Install Device Driver for off-brand Arduino Nano\" section below. After the two are connected, you should be able to go to the Files -> Examples -> Basic -> Blink and open the blink Sketch. A Program for Arduino is called a Sketch. Select to Upload the Sketch. If it works, you should then see a built-in LED on the Arduino flash on and off. Note: It may be necessary to select different values for Board, Processor, and Port through the Tools menu. This is briefly covered in the \"Install Device Driver for off-brand Arduino Nano\" section below.","title":"Install the Arduino IDE"},{"location":"guide/getting-started/#install-the-library-to-use-the-led-strip","text":"To use the LED Strip from an Arduino Sketch (programming code), it is necessary to Install an Additional Arduino Library . We will use the Adafruit NeoPixel Libary. There are different ways to install a Library. Two installation methods are described next. (You only need to complete one installation method.)","title":"Install the Library to use the LED Strip"},{"location":"guide/getting-started/#library-installation-method-1-download-unzip-rename-and-move-folder","text":"Download the newest version of the NeoPixel Library as a Zip file, from the NeoPixel project repository. Download: https://github.com/adafruit/Adafruit_NeoPixel/archive/master.zip (If that direct link to download the zip file stops working, an alternative may be available from the NeoPixel repository at http://github.com/adafruit/Adafruit_NeoPixel .) Unzip, Rename, and Move Folder The downloaded NeoPixel Library is in a single zip file, likely named Adafruit_NeoPixel-master.zip. The contents of this file must be unzipped, renamed, and moved to a specific location. One way to unzip this file onto your local computer is to right-click the file and look for an \"unzip\" option. Once unzipped, you will see a folder likely named \"Adafruit_NeoPixel-master\". Rename the folder to 'Adafruit_NeoPixel' (remove the '-master' suffix), and move it to one of these three locations: 1. For Linux and Mac computers, the Arduino/Libraries/ folder in your ~ home directory 1. For Windows computers, the Documents\\Arduino\\libraries\\ folder in your home directory -- Often C:\\Users\\USERNAME\\ 1. For Windows computers, to install the Library for all users, place it in the libraries folder of the Arduino IDE installation -- Often C:\\Program Files (x86)\\Arduino\\libraries\\ . Note that this installation option is \"fragile\", where updates to the Arduino IDE installation might remove items added to its libraries folder.","title":"Library Installation Method 1: Download, Unzip, Rename, and Move Folder"},{"location":"guide/getting-started/#library-installation-method-2-install-via-arduino-ide-library-manager","text":"Using the Arduino IDE, select Sketch -> Include Library -> Manage Libraries... Search for Adafruit NeoPixel Select \"Install\" button for the newest version (1.1.8 as of 2019-03-11). This method automatically downloads a zip file to C:\\Users\\USERNAME\\AppData\\Local\\Arduino15\\staging\\libraries and installs the Library to C:\\Users\\USERNAME\\Documents\\Arduino\\libraries\\Adafruit_NeoPixel .","title":"Library Installation Method 2: Install via Arduino IDE Library Manager"},{"location":"guide/getting-started/#restart-the-arduino-ide","text":"After installing the library in the right location, it may be necessary to close and restart the Arduino IDE.","title":"Restart the Arduino IDE"},{"location":"guide/getting-started/#configure-deploy-and-run-a-first-program-using-the-led-strip","text":"Using the Arduino IDE, open the strandtest Sketch. It is available via 1 2 3 File -> Sketchbook -> Library -> Adafruit_NeoPixel -> strandtest OR File -> Examples -> Adafruit NeoPixel -> strandtest Change the code that initializes the LED Strip so that it uses pin 12, as connected to during the \"Connect the LED Strip to the Arduino\" step above. Either: 1 Adafruit_NeoPixel strip = Adafruit_NeoPixel(12, 12, NEO_GRB + NEO_KHZ800); or change #define PIN 6 to #define PIN 12 Connect Arduino to the computer via USB. Then, in the Tools menu, it may be necessary to change the values for Board, Processor, and Port. Depending on the Arduino device and connection, working values might be \"Arduino Nano\", \"ATmega328P (Old Bootloader)\", and \"COM3\" or \"COM4\". Select \"Upload\" in the Arduino IDE. If successful, the output console dislays the message \"Done uploading.\" and the LED Strip should rotate through differing LED flashing and color patterns. If the output console dislays a message other than \"Done uploading.\" followed by details of Sketch size and variables memory size, then things are likely not working, and it's time for troubleshooting. Maybe the board type you have is \"Uno\" and not \"Nano\". Maybe the Arduino device is connected on a different port. Maybe the necessary device driver is not yet installed.","title":"Configure, deploy, and run a first program using the LED Strip"},{"location":"guide/getting-started/#optional-install-device-driver-for-off-brand-arduino-nano","text":"If you do not see the serial port for the connected Arduino device when you go to the Tools -> Port menu in the Arduino IDE, it may be that your computer does not yet have the CH340 device driver needed to connect to the off-brand Arduino Nano used with this project. Follow these steps to install the CH340 driver. Note: Local admin rights on your computer are needed when installing the driver.","title":"Optional: Install Device Driver for off-brand Arduino Nano"},{"location":"guide/getting-started/#for-windows-10","text":"There are two options for installing the CH340 Driver that are confirmed to be working as of 2019-03-11. After completing either of these installation options, restart the computer. Installation Option 1: Use Device Manager With the Arduino device connected to the computer via USB, run the Windows Device Manager program with Administrator permissions. If Device Manager lists a problem device, such as \"Other devices -> USB2.0-Serial\" with \"Device status\" of \"The drivers for this device are not installed.\", select to \"Update Driver\" and select to allow Windows to search all locations, i.e., the internet, for a driver. If successful, the driver for device \"USB-SERIAL CH340\" will be installed. In Device Manager, the device will then be listed in the \"Ports (COM & LPT)\" section, and the \"Device status\" will have changed to \"This device is working properly.\" Driver Details as of 2019-03-11: 1 2 3 4 5 Driver: Provider: wch.cn Date: 2014-08-08 Version: 3.4.2014.8 Signer: Microsoft Windows Hardware Compatibility Publisher Restart the computer. Installation Option 2: Download and Run Download the \"setup executable\" version of the FTDI Driver from https://www.ftdichip.com/Drivers/VCP.htm As of 2019-03-11, the latest version 2.12.28 released 2017-08-30 was available directly at https://www.ftdichip.com/Drivers/CDM/CDM21228_Setup.zip Unzip the downloaded file, and run the Setup.exe installation program. Restart the computer.","title":"For Windows 10"},{"location":"guide/getting-started/#for-mac","text":"Download the CH340 Driver from http://www.wch.cn/download/CH341SER_MAC_ZIP.html Note that as of August of 2015, the driver for the Mac is still \"unsigned\" and will not work on modern Mac OSs (Yousemite). The workaround this is to temporarly disable checking for a signed driver on the Mac. To do this run the following program in the Mac UNIX Console /Applications -> Utilities -> Terminal 1 sudo nvram boot-args=\"kext-dev-mode=1\" The most current version of Mac (El Capitan) has some problems recognizing the NEO board. Per this Stack Exchange thread, downloading a paid driver has helped one student in this demo. After you run this command you must reboot the Mac for it to take effect. This will allow the driver to be loaded, though it is unsigned. See this helpful post on Installing the CH340 Driver on Yosemite on the Mac After the driver is installed you should see a non-Bluetooth port appear.","title":"For Mac"},{"location":"guide/glossary/","text":"Glossary Arduino A popular and set of hardware and software used for teaching physical computing. Also the name of a company that popularized the devices and supports the standards. Note that many of the low-cost devices we use in these kits are technically not true Arduino devices. They are classified as Arduino clones. Many of the clones are 1/10 the cost of the original devices. * Wikipedia Definition Arduino Integrated Development Environment (IDE) A software program to edit, compile, debug and download Arduino programs. It runs on both Windows and Mac. * Download Page Arduino Nano The original Arduino devices have a defect in that they are not compatible with standardized solderless breadboards. We use a lower-cost version that can plug in directly to a solderless breadboard. * Hardware Web Page * Guide to the Arduino Nano CH340 The name of the low-cost USB interface chip that is use instead of the more expensive FTDI USB interface chip. Although the chip is low cost, the driver is not usually included with the Arduino IDE and the driver is not digitally sigined for the Mac. See the CH340 drivers here See Arduino Nano CH340 Instructable for a good description of how to make the CH340 work on the Mac. Light Emitting Diode (LED) A solid-state device that emits light when a voltage is applied. LEDs come in various colors such as red, green and blue. * Wikipedia Definition Moving Rainbow Kits These are kits that combine three important aspects of learning: Color, Motion and Social Constructionism. Students are interested in sensing and changing the world around them. The use of low-cost LEDs and DC-motors can make these kits not only fun, but inexpensive enough that students can purchase them and take them home to share with friends. A typical cost is around $15USD. Light Emitting Diode (LED) A device that converts DC current into light. In our project each Pixel element has a red, green and blue LED in it. Red-Green-Blue LED (RGB LED) A single device that has three colors of LEDs. One for red, one for blue and one for green. By combining various intensities of each of these three colors we can create many additional colors. NeoPixel This is the name coined by Adafruit for an individually addressable LED. Adafruit also provides a high-quality open source library on github to drive these LEDs. * NeoPixel on Adafruit Web Site NeoPixel Library The Arduino library used in these guides. We picked this library because of its popularity and the many on-line tutorials about how to use them. * [NeoPixel Library Guide on the Adafruit Web Site]https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library * NeoPixel Library on GitHub Physical Computing Hardware and software that can sense and respond to changes in the world around us. * Wikipedia Definition Social Constructionism Getting students to build things together in teams. This style of teaching has many benefits over the standard lecture-style learning. * Wikipedia Definition * Berkeley Web Site on Social Constructionism in Education WS2812B A standard for addressable RGB LEDs * Data sheet from Adafruit","title":"Glossary"},{"location":"guide/glossary/#glossary","text":"","title":"Glossary"},{"location":"guide/glossary/#arduino","text":"A popular and set of hardware and software used for teaching physical computing. Also the name of a company that popularized the devices and supports the standards. Note that many of the low-cost devices we use in these kits are technically not true Arduino devices. They are classified as Arduino clones. Many of the clones are 1/10 the cost of the original devices. * Wikipedia Definition","title":"Arduino"},{"location":"guide/glossary/#arduino-integrated-development-environment-ide","text":"A software program to edit, compile, debug and download Arduino programs. It runs on both Windows and Mac. * Download Page","title":"Arduino Integrated Development Environment (IDE)"},{"location":"guide/glossary/#arduino-nano","text":"The original Arduino devices have a defect in that they are not compatible with standardized solderless breadboards. We use a lower-cost version that can plug in directly to a solderless breadboard. * Hardware Web Page * Guide to the Arduino Nano","title":"Arduino Nano"},{"location":"guide/glossary/#ch340","text":"The name of the low-cost USB interface chip that is use instead of the more expensive FTDI USB interface chip. Although the chip is low cost, the driver is not usually included with the Arduino IDE and the driver is not digitally sigined for the Mac. See the CH340 drivers here See Arduino Nano CH340 Instructable for a good description of how to make the CH340 work on the Mac.","title":"CH340"},{"location":"guide/glossary/#light-emitting-diode-led","text":"A solid-state device that emits light when a voltage is applied. LEDs come in various colors such as red, green and blue. * Wikipedia Definition","title":"Light Emitting Diode (LED)"},{"location":"guide/glossary/#moving-rainbow-kits","text":"These are kits that combine three important aspects of learning: Color, Motion and Social Constructionism. Students are interested in sensing and changing the world around them. The use of low-cost LEDs and DC-motors can make these kits not only fun, but inexpensive enough that students can purchase them and take them home to share with friends. A typical cost is around $15USD.","title":"Moving Rainbow Kits"},{"location":"guide/glossary/#light-emitting-diode-led_1","text":"A device that converts DC current into light. In our project each Pixel element has a red, green and blue LED in it.","title":"Light Emitting Diode (LED)"},{"location":"guide/glossary/#red-green-blue-led-rgb-led","text":"A single device that has three colors of LEDs. One for red, one for blue and one for green. By combining various intensities of each of these three colors we can create many additional colors.","title":"Red-Green-Blue LED (RGB LED)"},{"location":"guide/glossary/#neopixel","text":"This is the name coined by Adafruit for an individually addressable LED. Adafruit also provides a high-quality open source library on github to drive these LEDs. * NeoPixel on Adafruit Web Site","title":"NeoPixel"},{"location":"guide/glossary/#neopixel-library","text":"The Arduino library used in these guides. We picked this library because of its popularity and the many on-line tutorials about how to use them. * [NeoPixel Library Guide on the Adafruit Web Site]https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library * NeoPixel Library on GitHub","title":"NeoPixel Library"},{"location":"guide/glossary/#physical-computing","text":"Hardware and software that can sense and respond to changes in the world around us. * Wikipedia Definition","title":"Physical Computing"},{"location":"guide/glossary/#social-constructionism","text":"Getting students to build things together in teams. This style of teaching has many benefits over the standard lecture-style learning. * Wikipedia Definition * Berkeley Web Site on Social Constructionism in Education","title":"Social Constructionism"},{"location":"guide/glossary/#ws2812b","text":"A standard for addressable RGB LEDs * Data sheet from Adafruit","title":"WS2812B"},{"location":"guide/hardware/","text":"Moving Rainbow Hardware Arduino Moving Rainbow Kits The Moving Rainbow Kit is based on a strip of 12 \"addressable\" Red, Green and Blue (RGB) Light Emitting Diodes (LEDs). The basic LED strip is easy to connect to your Arduino. We only need a single data signal (and power and ground) to connect the entire strip to our Arduino. Arduino connected to the LED strip. Note that the red wire is connected to the +5 pin on the Arduino and the white wire is connected to ground (GND). The data wire is connected to pin 12 which is configured as an output data pin in the Arduino. Each pixel in the strip has a red, green and blue LED. We can control how bright each of these three LEDs is by setting a number from 0 (off) to 255 (bright). Since each a LED on the tape has 3 LEDs we have 36 total LEDs we can control. Note, you can cut the tape between any of the LEDs to make smaller strips. The photo above shows the LED strip in a kit that includes a solderless breadboard and an Arduino nano. Controls outside the box turn on the power, reset the processor and change the display mode of the kit. We will use a software library provided by Adafruit called the \"NeoPixel\" library to turn lights on and off. Our LED strip has 12 pixels. However we start numbering at \"0\" to show how computer science people are usually off-by-one digit when they access memory locations! If you want to purchase your own parts, check out our Bill of Materials","title":"Hardware"},{"location":"guide/hardware/#moving-rainbow-hardware","text":"Arduino Moving Rainbow Kits The Moving Rainbow Kit is based on a strip of 12 \"addressable\" Red, Green and Blue (RGB) Light Emitting Diodes (LEDs). The basic LED strip is easy to connect to your Arduino. We only need a single data signal (and power and ground) to connect the entire strip to our Arduino. Arduino connected to the LED strip. Note that the red wire is connected to the +5 pin on the Arduino and the white wire is connected to ground (GND). The data wire is connected to pin 12 which is configured as an output data pin in the Arduino. Each pixel in the strip has a red, green and blue LED. We can control how bright each of these three LEDs is by setting a number from 0 (off) to 255 (bright). Since each a LED on the tape has 3 LEDs we have 36 total LEDs we can control. Note, you can cut the tape between any of the LEDs to make smaller strips. The photo above shows the LED strip in a kit that includes a solderless breadboard and an Arduino nano. Controls outside the box turn on the power, reset the processor and change the display mode of the kit. We will use a software library provided by Adafruit called the \"NeoPixel\" library to turn lights on and off. Our LED strip has 12 pixels. However we start numbering at \"0\" to show how computer science people are usually off-by-one digit when they access memory locations! If you want to purchase your own parts, check out our Bill of Materials","title":"Moving Rainbow Hardware"},{"location":"guide/instructors/","text":"Instructor's Guide to the Moving Rainbow A guide to help teachers and mentors teach the concpets of Computer Science and Physical Computing using the Moving Rainbow kits. Basic Theory These kits are designed around the simple and powerful concept of Social Constructivism. We define Social Constructionism as the process of students working together to solve problems and create projects. REsearch shows that Social Constructionism has many advantages over traditional lecutre-based learing. Students learn the most through direct experience of building things in groups and with their own hands through direct physical experience. Retention is much better then if they read a book about abstract concepts. The second idea is to mix in the power of social learning. When students can take these kits home, to their school and show their friends they demonstrate the devices and then become teachers and mentors to their peers. Learning is reinfoced by each act. We are also opposed to the idea that you have to purchase a $100 to $200 kit to learn these concepts. By keeping the price under $15 we think that we make these kits available to a much larger audience. One of our biggest challenge is recurting mentors, especially women and minority mentors. If you have any suggestions on how we can imporve this, please let us know. We also feel that learning basic \"foundation\" skills such as breadboarding is critical for future projects. Purchasing a kit of propriatary connectors might be fun, but will limit future learing. References Wikipedia Article on Social Constructivism in Education Constructivism on Cult of Pedagogy","title":"Instructors Guide"},{"location":"guide/instructors/#instructors-guide-to-the-moving-rainbow","text":"A guide to help teachers and mentors teach the concpets of Computer Science and Physical Computing using the Moving Rainbow kits.","title":"Instructor's Guide to the Moving Rainbow"},{"location":"guide/instructors/#basic-theory","text":"These kits are designed around the simple and powerful concept of Social Constructivism. We define Social Constructionism as the process of students working together to solve problems and create projects. REsearch shows that Social Constructionism has many advantages over traditional lecutre-based learing. Students learn the most through direct experience of building things in groups and with their own hands through direct physical experience. Retention is much better then if they read a book about abstract concepts. The second idea is to mix in the power of social learning. When students can take these kits home, to their school and show their friends they demonstrate the devices and then become teachers and mentors to their peers. Learning is reinfoced by each act. We are also opposed to the idea that you have to purchase a $100 to $200 kit to learn these concepts. By keeping the price under $15 we think that we make these kits available to a much larger audience. One of our biggest challenge is recurting mentors, especially women and minority mentors. If you have any suggestions on how we can imporve this, please let us know. We also feel that learning basic \"foundation\" skills such as breadboarding is critical for future projects. Purchasing a kit of propriatary connectors might be fun, but will limit future learing.","title":"Basic Theory"},{"location":"guide/instructors/#references","text":"Wikipedia Article on Social Constructivism in Education Constructivism on Cult of Pedagogy","title":"References"},{"location":"guide/larson-scanner/","text":"The Larson Scanner The Larson Scanner is one of the most famous patterns in special effects. It was named after Glen A. Larson who used the pattern in the intelligent car in Knight Rider and as the eyes in Cylons in Battlestar Galactica. Here is out it works. 1. We start the loop by drawing five intensities of light. Dim at the ends and bright in the center. 2. We offset each of these by a position. 3. Each time we go through the loop we move the position up until we reach the end. When we reach the end of the strip we flip the direction (dir = -dir) Here is some sample code to do the Larson Scanner. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <Adafruit_NeoPixel.h> #define NUMBER_PIEXEL 12 #define LEDPIN 12 Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXEL, LEDPIN, NEO_GRB + NEO_KHZ800); void setup() { strip.begin(); } int pos = 0, dir = 1; // Position, direction of \"eye\" void loop() { int j; // Draw 5 pixels centered on pos. setPixelColor() will clip any // pixels off the ends of the strip, we don't need to watch for that. strip.setPixelColor(pos - 2, 0x100000); // Dark red strip.setPixelColor(pos - 1, 0x800000); // Medium red strip.setPixelColor(pos , 0xFF3000); // Center pixel is brightest strip.setPixelColor(pos + 1, 0x800000); // Medium red strip.setPixelColor(pos + 2, 0x100000); // Dark red strip.show(); delay(50); // Rather than being sneaky and erasing just the tail pixel, // it's easier to erase it all and draw a new one next time. for(j=-2; j<= 2; j++) strip.setPixelColor(pos+j, 0); // Bounce off ends of strip pos += dir; if(pos < 0) { pos = 1; dir = -dir; } else if(pos >= strip.numPixels()) { pos = strip.numPixels() - 2; dir = -dir; } }","title":"The Larson Scanner"},{"location":"guide/larson-scanner/#the-larson-scanner","text":"The Larson Scanner is one of the most famous patterns in special effects. It was named after Glen A. Larson who used the pattern in the intelligent car in Knight Rider and as the eyes in Cylons in Battlestar Galactica. Here is out it works. 1. We start the loop by drawing five intensities of light. Dim at the ends and bright in the center. 2. We offset each of these by a position. 3. Each time we go through the loop we move the position up until we reach the end. When we reach the end of the strip we flip the direction (dir = -dir) Here is some sample code to do the Larson Scanner. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <Adafruit_NeoPixel.h> #define NUMBER_PIEXEL 12 #define LEDPIN 12 Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXEL, LEDPIN, NEO_GRB + NEO_KHZ800); void setup() { strip.begin(); } int pos = 0, dir = 1; // Position, direction of \"eye\" void loop() { int j; // Draw 5 pixels centered on pos. setPixelColor() will clip any // pixels off the ends of the strip, we don't need to watch for that. strip.setPixelColor(pos - 2, 0x100000); // Dark red strip.setPixelColor(pos - 1, 0x800000); // Medium red strip.setPixelColor(pos , 0xFF3000); // Center pixel is brightest strip.setPixelColor(pos + 1, 0x800000); // Medium red strip.setPixelColor(pos + 2, 0x100000); // Dark red strip.show(); delay(50); // Rather than being sneaky and erasing just the tail pixel, // it's easier to erase it all and draw a new one next time. for(j=-2; j<= 2; j++) strip.setPixelColor(pos+j, 0); // Bounce off ends of strip pos += dir; if(pos < 0) { pos = 1; dir = -dir; } else if(pos >= strip.numPixels()) { pos = strip.numPixels() - 2; dir = -dir; } }","title":"The Larson Scanner"},{"location":"guide/list-of-sample-programs/","text":"List of Sample Programs Moving Pixel Use a for loop to get a pattern to move down the strip. Moving Group We create a group of pixels that move together. Larson Scanner Spooky pattern used in robot eyes. Wipe Wipe the current color with a new one. Fade In And Out Fade a color in and out. Theater Chase Are you ready for a triple loop? Random Turn on a random pixel with a random color. Color Wheel A walk around the color wheel. Candle Flicker Simulate a flickering candle. Moving Rainbow My favorite sample program.","title":"List of Sample Programs"},{"location":"guide/list-of-sample-programs/#list-of-sample-programs","text":"Moving Pixel Use a for loop to get a pattern to move down the strip. Moving Group We create a group of pixels that move together. Larson Scanner Spooky pattern used in robot eyes. Wipe Wipe the current color with a new one. Fade In And Out Fade a color in and out. Theater Chase Are you ready for a triple loop? Random Turn on a random pixel with a random color. Color Wheel A walk around the color wheel. Candle Flicker Simulate a flickering candle. Moving Rainbow My favorite sample program.","title":"List of Sample Programs"},{"location":"guide/moving-group/","text":"Moving Pixel This loop will move a group of pixels from one end of the LED strip to the other. The central pixel in the group will be brighter then the other pixels 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void loop() { for (int i=0; i<NUMBER_PIEXELS-4; i++) { strip.setPixelColor(i, 5, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+1, 50, 0, 0); // turn the i+1 pixel strip.setPixelColor(i+2, 255, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+3, 50, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+4, 5, 0, 0); // turn the \"i\"th pixel on strip.show(); delay(500); // wait 2/10th of a second strip.setPixelColor(i, 0, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+1, 0, 0, 0); // turn the i+1 pixel strip.setPixelColor(i+2, 0, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+3, 0, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+4, 0, 0, 0); // turn the \"i\"th pixel on strip.show(); } }","title":"Moving Pixel"},{"location":"guide/moving-group/#moving-pixel","text":"This loop will move a group of pixels from one end of the LED strip to the other. The central pixel in the group will be brighter then the other pixels 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void loop() { for (int i=0; i<NUMBER_PIEXELS-4; i++) { strip.setPixelColor(i, 5, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+1, 50, 0, 0); // turn the i+1 pixel strip.setPixelColor(i+2, 255, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+3, 50, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+4, 5, 0, 0); // turn the \"i\"th pixel on strip.show(); delay(500); // wait 2/10th of a second strip.setPixelColor(i, 0, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+1, 0, 0, 0); // turn the i+1 pixel strip.setPixelColor(i+2, 0, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+3, 0, 0, 0); // turn the \"i\"th pixel on strip.setPixelColor(i+4, 0, 0, 0); // turn the \"i\"th pixel on strip.show(); } }","title":"Moving Pixel"},{"location":"guide/moving-pixel/","text":"Moving Pixel This example program turn on a single pixel for 1/10th of a second and then turn it off. It will repeat this pattern for each of the pixels in the LED strip. To do this we will begin with using a for loop. Here is the ovreall structure of the for loop: 1 2 for (int i=0; i < NUMBER_PIEXELS; i++) { } This loop has three parts within the parenthesis. The initialization of the loop (int i=0) The test for exiting the loop (i<NUMBER_PIEXELS) The function that should be run at the end of each loop (i++) which increments the counter by 1. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); void setup() { strip.begin(); // initialize the strip } void loop() { for (int i=0; i<NUMBER_PIEXELS; i++) { strip.setPixelColor(i, 255, 0, 0); // turn the \"i\"th pixel on strip.show(); delay(100); // wait 1/10th of a second strip.setPixelColor(i, 0, 0, 0); // // turn the \"i\"th pixel off } }","title":"Moving Pixel"},{"location":"guide/moving-pixel/#moving-pixel","text":"This example program turn on a single pixel for 1/10th of a second and then turn it off. It will repeat this pattern for each of the pixels in the LED strip. To do this we will begin with using a for loop. Here is the ovreall structure of the for loop: 1 2 for (int i=0; i < NUMBER_PIEXELS; i++) { } This loop has three parts within the parenthesis. The initialization of the loop (int i=0) The test for exiting the loop (i<NUMBER_PIEXELS) The function that should be run at the end of each loop (i++) which increments the counter by 1. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); void setup() { strip.begin(); // initialize the strip } void loop() { for (int i=0; i<NUMBER_PIEXELS; i++) { strip.setPixelColor(i, 255, 0, 0); // turn the \"i\"th pixel on strip.show(); delay(100); // wait 1/10th of a second strip.setPixelColor(i, 0, 0, 0); // // turn the \"i\"th pixel off } }","title":"Moving Pixel"},{"location":"guide/moving-rainbow/","text":"Moving Rainbow Now let's combine a few of our programs. We will use the modulo function (%) to get the offset from a counter. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 150 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int delayTime = 100; // 1/10 of a second void setup() { strip.begin(); // initialize the strip } void loop() { for (int i=0; i<strip.numPixels()-1; i++) { rainbow7(i, delayTime); // starting at i, draw the 7 color rainbow } } // a seven segment rainbow with red on the highest pixel void rainbow7(uint16_t i, uint16_t wait) { int np = strip.numPixels(); // we use the modulo function with this strip.setPixelColor(i % np, 0, 0, 0); // off strip.setPixelColor((i+1) % np, 25, 0, 25); // violet strip.setPixelColor((i+2) % np, 255, 0, 255); // indigo strip.setPixelColor((i+3) % np, 0, 0, 150); // blue strip.setPixelColor((i+4) % np, 0, 150, 0); // green strip.setPixelColor((i+5) % np, 255, 255, 0); // yellow strip.setPixelColor((i+6) % np, 110, 70, 0); // orange strip.setPixelColor((i+7) % np, 150, 0, 0); // red strip.show(); delay(wait); } More to Explore Try changing the speed. How fast can you make it go?","title":"Moving Rainbow"},{"location":"guide/moving-rainbow/#moving-rainbow","text":"Now let's combine a few of our programs. We will use the modulo function (%) to get the offset from a counter. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 150 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int delayTime = 100; // 1/10 of a second void setup() { strip.begin(); // initialize the strip } void loop() { for (int i=0; i<strip.numPixels()-1; i++) { rainbow7(i, delayTime); // starting at i, draw the 7 color rainbow } } // a seven segment rainbow with red on the highest pixel void rainbow7(uint16_t i, uint16_t wait) { int np = strip.numPixels(); // we use the modulo function with this strip.setPixelColor(i % np, 0, 0, 0); // off strip.setPixelColor((i+1) % np, 25, 0, 25); // violet strip.setPixelColor((i+2) % np, 255, 0, 255); // indigo strip.setPixelColor((i+3) % np, 0, 0, 150); // blue strip.setPixelColor((i+4) % np, 0, 150, 0); // green strip.setPixelColor((i+5) % np, 255, 255, 0); // yellow strip.setPixelColor((i+6) % np, 110, 70, 0); // orange strip.setPixelColor((i+7) % np, 150, 0, 0); // red strip.show(); delay(wait); }","title":"Moving Rainbow"},{"location":"guide/moving-rainbow/#more-to-explore","text":"Try changing the speed. How fast can you make it go?","title":"More to Explore"},{"location":"guide/programming/","text":"Moving Rainbow Programmer's Guide This guide assumes you are somewhat familiar with Arduino programming and using the setup() and loop() functions. It assuems you have hooked up your LED strip to your Arduino and are ready to learn how to program the LED strip. This programming guide will cover: - How to use the setup and loop functions - How to set the color of a pixel - How to use a for loop to change all the colors in the strip - How to use the delay function slow down your patterns - How to create and use functions - How to use various such as the if/then/else statements to conditionally turn on pixels Getting Started Setup and Loop In these labs our Arduino programs will have four parts. 1. A, preamble section that will declare various things 2. A setup function, setup() 3. A looping function called loop() that will run until the devices is reset or turned off and loop. 4. A list of functions that are called by the setup and loop functions Sample Preamble 1 2 3 4 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); Setup This function will run only once. It is used to setup the initial memory variables we need in our programs 1 2 3 4 void setup() { strip.begin(); // Initialize all the variables strip.show(); // Initialize all pixels in the strip to be off } Loop The loop program will run over and over. Here is a sample program that will blink the first pixel in the strip: 1 2 3 4 5 6 7 8 void loop() { strip.setPixelColor(0, 255, 0, 0); // set pixel 0 to be red strip.show(); // send red to strip delay(1000); // wait a second strip.setPixelColor(0, 0, 0, 0); // set pixel 0 to be red strip.show(); // send off to strip delay(1000); // wait a second }; Basic Functions Initialize strip 1 Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); Send data to the strip 1 strip.show(); Set a pixel color The most important function in our programs is the function to set one of the pixels to a specific color. We use the following function: 1 strip.setPixelColor(index, red, green, blue); Where the \"index\" is the number of pixel to set, starting at pixel 0. The second pixel is called \"1\" etc. Each of the index numbers is off by one. 1 strip.numPixels() Returns the number of pixels in the LED strip. The first pixel has an address of \"0\", the second an address called \"1\" etc. Wait 1 delay(milliseconds) You can also lower the overall brightness of the strip using the strip.setBrightness() function. It is designed to be used only in the \"setup()\" function and it takes a number from 0 to 255 with 0 for off and 255 for maximum brightness. If you want to turn your LED strip to 1/4 brightness you can add the following: 1 strip.setBrightness(64); You can put this function in to tone down the brightness when the strip starts. Refernces Adafruit NeoPixel Guide","title":"Programming Guide"},{"location":"guide/programming/#moving-rainbow-programmers-guide","text":"This guide assumes you are somewhat familiar with Arduino programming and using the setup() and loop() functions. It assuems you have hooked up your LED strip to your Arduino and are ready to learn how to program the LED strip. This programming guide will cover: - How to use the setup and loop functions - How to set the color of a pixel - How to use a for loop to change all the colors in the strip - How to use the delay function slow down your patterns - How to create and use functions - How to use various such as the if/then/else statements to conditionally turn on pixels","title":"Moving Rainbow Programmer's Guide"},{"location":"guide/programming/#getting-started","text":"","title":"Getting Started"},{"location":"guide/programming/#setup-and-loop","text":"In these labs our Arduino programs will have four parts. 1. A, preamble section that will declare various things 2. A setup function, setup() 3. A looping function called loop() that will run until the devices is reset or turned off and loop. 4. A list of functions that are called by the setup and loop functions","title":"Setup and Loop"},{"location":"guide/programming/#sample-preamble","text":"1 2 3 4 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800);","title":"Sample Preamble"},{"location":"guide/programming/#setup","text":"This function will run only once. It is used to setup the initial memory variables we need in our programs 1 2 3 4 void setup() { strip.begin(); // Initialize all the variables strip.show(); // Initialize all pixels in the strip to be off }","title":"Setup"},{"location":"guide/programming/#loop","text":"The loop program will run over and over. Here is a sample program that will blink the first pixel in the strip: 1 2 3 4 5 6 7 8 void loop() { strip.setPixelColor(0, 255, 0, 0); // set pixel 0 to be red strip.show(); // send red to strip delay(1000); // wait a second strip.setPixelColor(0, 0, 0, 0); // set pixel 0 to be red strip.show(); // send off to strip delay(1000); // wait a second };","title":"Loop"},{"location":"guide/programming/#basic-functions","text":"","title":"Basic Functions"},{"location":"guide/programming/#initialize-strip","text":"1 Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800);","title":"Initialize strip"},{"location":"guide/programming/#send-data-to-the-strip","text":"1 strip.show();","title":"Send data to the strip"},{"location":"guide/programming/#set-a-pixel-color","text":"The most important function in our programs is the function to set one of the pixels to a specific color. We use the following function: 1 strip.setPixelColor(index, red, green, blue); Where the \"index\" is the number of pixel to set, starting at pixel 0. The second pixel is called \"1\" etc. Each of the index numbers is off by one. 1 strip.numPixels() Returns the number of pixels in the LED strip. The first pixel has an address of \"0\", the second an address called \"1\" etc.","title":"Set a pixel color"},{"location":"guide/programming/#wait","text":"1 delay(milliseconds) You can also lower the overall brightness of the strip using the strip.setBrightness() function. It is designed to be used only in the \"setup()\" function and it takes a number from 0 to 255 with 0 for off and 255 for maximum brightness. If you want to turn your LED strip to 1/4 brightness you can add the following: 1 strip.setBrightness(64); You can put this function in to tone down the brightness when the strip starts.","title":"Wait"},{"location":"guide/programming/#refernces","text":"Adafruit NeoPixel Guide","title":"Refernces"},{"location":"guide/project-list/","text":"List of Moving Rainbow Projects Getting Started Labs The purpose of these labs is to use the minimal hardware to get students started programming LED strips. Once they have mastered the basic of loops and conditionals we next introduce input sensors. LED Blink - this is always the first project we start our students with. It is the simplist project that will demonstrate the round-trip process of writing, uploading and running a small Arduino project. You can do this with the built-in LED on most Arduinos. You will need a laptop, a USB cable and a low-cost Arduino Nano. LED Blink with Breadboard - this is the second lab. It requires an additional breadboard, a single LED a resistor and some wires. There are other variations of this lab that use multiple LEDs that move in a pattern. RGB LED - this third lab requires students to control a red, green and blue LED. By mixing the colors they can make any color in the rainbow. LED Strip - this is the forth lab and the one that opens many doors. It will require you to purchase learn the parts in the lab above and an LED strip. We will also learn how to download the Adafruit Neopixel library. You can use an LED strip of anywhere from 10 to 60 pixels. We will make a single red LED move down the LED strip using a for loop. LED Strip Multiple Colors - this lab uses the same LED strip but teaching students how to vary the color of each LED. LED Strip Patterns - in this lab we will use conditional statements (if/then) to make specific patterns such as alternating colors Sensor Input Labs These labs use one or more input sensors to allow studnets to change what is displayed on the LED strip. Button Mode Labs These labs introduce two input buttons that will allow the user to change the display mode of an LED strip. LED Strip Modes Here we add two buttons to our breadboard. By using the built-in pull-up features we don't even need resistors. We introduce the concept of an interrupt. LED Strip Modes with Debounce Now we introduce the concept of a debounce process so that we get a clean mode change when a button is pressed. LED Strip Potentiometers These project requrie one to three potentiometers. We often mount them in a clear box so students can see the circuits and LED strip while they change the potentiomenter. LED Strip Brightness * This project changes the brightness of all the pixels on an LED strip RGB Potentionter Lab * This project uses three potentiometers to change the red, green and blue values of an LED strip. All the LEDs respond together. We use this box to help younger students learn about color mixing. Named Projects Simon This is the classic \"Simon\" game that displays a pattern of Red, green, blue yellow flashes and the student must repeat them back using four corrisponding buttons. The patterns get harder each time. Joystick This project uses a Joystick to change the color or pattern of an LED array Roterery Encoder This project uses a rotery encoder \"dial\" to change what LED is displayed. It can be combined with buttons to build a selector menu system. Advanced Labs These labs also use a $18 OLED to display the state of the Arduino. They are useful for teaching the concept of modes, internal state management and menu systems. They should not be used by beginners because they are more expensive and reuqire more wiring. OLED Display We add an OLED display to show the internal state of our project. We use mode buttons and a rotery encoder to change the state value.","title":"List of Moving Rainbow Projects"},{"location":"guide/project-list/#list-of-moving-rainbow-projects","text":"","title":"List of Moving Rainbow Projects"},{"location":"guide/project-list/#getting-started-labs","text":"The purpose of these labs is to use the minimal hardware to get students started programming LED strips. Once they have mastered the basic of loops and conditionals we next introduce input sensors. LED Blink - this is always the first project we start our students with. It is the simplist project that will demonstrate the round-trip process of writing, uploading and running a small Arduino project. You can do this with the built-in LED on most Arduinos. You will need a laptop, a USB cable and a low-cost Arduino Nano. LED Blink with Breadboard - this is the second lab. It requires an additional breadboard, a single LED a resistor and some wires. There are other variations of this lab that use multiple LEDs that move in a pattern. RGB LED - this third lab requires students to control a red, green and blue LED. By mixing the colors they can make any color in the rainbow. LED Strip - this is the forth lab and the one that opens many doors. It will require you to purchase learn the parts in the lab above and an LED strip. We will also learn how to download the Adafruit Neopixel library. You can use an LED strip of anywhere from 10 to 60 pixels. We will make a single red LED move down the LED strip using a for loop. LED Strip Multiple Colors - this lab uses the same LED strip but teaching students how to vary the color of each LED. LED Strip Patterns - in this lab we will use conditional statements (if/then) to make specific patterns such as alternating colors","title":"Getting Started Labs"},{"location":"guide/project-list/#sensor-input-labs","text":"These labs use one or more input sensors to allow studnets to change what is displayed on the LED strip.","title":"Sensor Input Labs"},{"location":"guide/project-list/#button-mode-labs","text":"These labs introduce two input buttons that will allow the user to change the display mode of an LED strip. LED Strip Modes Here we add two buttons to our breadboard. By using the built-in pull-up features we don't even need resistors. We introduce the concept of an interrupt. LED Strip Modes with Debounce Now we introduce the concept of a debounce process so that we get a clean mode change when a button is pressed.","title":"Button Mode Labs"},{"location":"guide/project-list/#led-strip-potentiometers","text":"These project requrie one to three potentiometers. We often mount them in a clear box so students can see the circuits and LED strip while they change the potentiomenter. LED Strip Brightness * This project changes the brightness of all the pixels on an LED strip RGB Potentionter Lab * This project uses three potentiometers to change the red, green and blue values of an LED strip. All the LEDs respond together. We use this box to help younger students learn about color mixing.","title":"LED Strip Potentiometers"},{"location":"guide/project-list/#named-projects","text":"Simon This is the classic \"Simon\" game that displays a pattern of Red, green, blue yellow flashes and the student must repeat them back using four corrisponding buttons. The patterns get harder each time. Joystick This project uses a Joystick to change the color or pattern of an LED array Roterery Encoder This project uses a rotery encoder \"dial\" to change what LED is displayed. It can be combined with buttons to build a selector menu system.","title":"Named Projects"},{"location":"guide/project-list/#advanced-labs","text":"These labs also use a $18 OLED to display the state of the Arduino. They are useful for teaching the concept of modes, internal state management and menu systems. They should not be used by beginners because they are more expensive and reuqire more wiring. OLED Display We add an OLED display to show the internal state of our project. We use mode buttons and a rotery encoder to change the state value.","title":"Advanced Labs"},{"location":"guide/random/","text":"Random Lets face it. Computers are really good at repeating the same pattern over and over. But after a while this gets pretty boring. What might be fun is to add a little bit of random behavior into our patterns. Luckily the Arduino software has just the function for us! It is called, you guessed it random . By the way, that link is to the Arduino Reference 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int index, red, green, blue; void setup() { strip.begin(); // initialize the strip } void loop() { index = random(12); red = random(255); green = random(255); blue = random(255); strip.setPixelColor(index, strip.Color(red, green, blue)); strip.show(); delay(100); } More to Explore Look at the intensity of the colors. You will find that although there are some darker colors, most of them tend to skew toward the white colors. This is because on the average, there are at least two colors that are over half on. We usually only get a deep color if two colors are almost off and the third one is on. How can you change the program so that we get a more full spectrum of colors?","title":"Random"},{"location":"guide/random/#random","text":"Lets face it. Computers are really good at repeating the same pattern over and over. But after a while this gets pretty boring. What might be fun is to add a little bit of random behavior into our patterns. Luckily the Arduino software has just the function for us! It is called, you guessed it random . By the way, that link is to the Arduino Reference 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int index, red, green, blue; void setup() { strip.begin(); // initialize the strip } void loop() { index = random(12); red = random(255); green = random(255); blue = random(255); strip.setPixelColor(index, strip.Color(red, green, blue)); strip.show(); delay(100); }","title":"Random"},{"location":"guide/random/#more-to-explore","text":"Look at the intensity of the colors. You will find that although there are some darker colors, most of them tend to skew toward the white colors. This is because on the average, there are at least two colors that are over half on. We usually only get a deep color if two colors are almost off and the third one is on. How can you change the program so that we get a more full spectrum of colors?","title":"More to Explore"},{"location":"guide/sample-labs/","text":"Here are some sample labs to try Even Odd Can you turn on only odd pixels? Hint: Try using the modulo function (%). Fade In and Out Can you make a pixel slowly fade in and out? Hint: Use a for loop to change the brightness. Random Can you use the random() function to randomly turn various pixels on? Can you also use random() to select a random color? Movement Can you make a pixel appear to move up and down? Hint: use a for loop to turn a pixel on and off. Bubble Can you make a pixel appear to bubble up? Twinkle Can you make a random pixel appear to twinkle on and off? Heartbeat Can you make a pixel appear to pulse like a beating heart?","title":"Sample labs"},{"location":"guide/sample-labs/#even-odd","text":"Can you turn on only odd pixels? Hint: Try using the modulo function (%).","title":"Even Odd"},{"location":"guide/sample-labs/#fade-in-and-out","text":"Can you make a pixel slowly fade in and out? Hint: Use a for loop to change the brightness.","title":"Fade In and Out"},{"location":"guide/sample-labs/#random","text":"Can you use the random() function to randomly turn various pixels on? Can you also use random() to select a random color?","title":"Random"},{"location":"guide/sample-labs/#movement","text":"Can you make a pixel appear to move up and down? Hint: use a for loop to turn a pixel on and off.","title":"Movement"},{"location":"guide/sample-labs/#bubble","text":"Can you make a pixel appear to bubble up?","title":"Bubble"},{"location":"guide/sample-labs/#twinkle","text":"Can you make a random pixel appear to twinkle on and off?","title":"Twinkle"},{"location":"guide/sample-labs/#heartbeat","text":"Can you make a pixel appear to pulse like a beating heart?","title":"Heartbeat"},{"location":"guide/theater-chase/","text":"Theater Chase A Chase is a pattern of lights where adjacent lights turn on an off to give the illusion of motion. Chase lights are often used in the marquee signs of movie theaters so they are referred to as Theater Chase patterns. We will create a single function that will set a theater chase pattern on our LED strip. It will take two input parameters, one for the color and one for the delay time in milliseconds between changes. 1 2 3 void theaterChase(uint32_t color, uint8_t wait) { ... put your code here... }; Here is the full program that will turn our LED strip into red, white and blue chase patterns. Perfect for the 4th of July celebrations in the US. Note that we use the strip.Color() function to set a red, green and blue value. How the program works is a bit complex. It uses note one, not two, but THREE nested for loops. The outer loop is just a wrapper that repeats 10 times. We use the letter \"j\" to count up to 10. The middle loop just counts from 0 to 2 (three items). It uses the letter \"q\" to do this. We can call this the offset. The most inner loop goes from the first to the last pixel turning each third one on. The increment is by three each time. The letter used is \"i\" for the index. The main function inside these three loops sets the q+i pixel on. The effect is to turn every third pixel on. We skip over two because we are adding 3 to the index each time. 1 strip.setPixelColor(q+i, color); After we display the strip and wait a bit then we reverse the operation by turning each third pixel off. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int delayTime = 100; void setup() { strip.begin(); // initialize the strip } void loop() { theaterChase(strip.Color(127, 0, 0), delayTime); // red theaterChase(strip.Color(127, 127, 127), delayTime); // white theaterChase(strip.Color(0, 0, 127), delayTime); // blue } // Theatre-style crawling lights with a spacing of 3 void theaterChase(uint32_t color, uint8_t wait) { for (int j=0; j<10; j++) { //do 10 cycles of chasing for (int q=0; q < 4; q++) { for (int i=0; i < strip.numPixels(); i=i+4) { strip.setPixelColor(q+i, color); //turn every third pixel on } strip.show(); delay(wait); for (int i=0; i < strip.numPixels(); i=i+3) { strip.setPixelColor(q+i, 0); //turn every third pixel off } } } } More to explore Can you change the spacing between the \"on\" pixels. Right now they are set to be 3. Can you change it to be 4? Note that you will have to make the change it two places in the middle and inner-most for loops. Try it out!","title":"Theater Chase"},{"location":"guide/theater-chase/#theater-chase","text":"A Chase is a pattern of lights where adjacent lights turn on an off to give the illusion of motion. Chase lights are often used in the marquee signs of movie theaters so they are referred to as Theater Chase patterns. We will create a single function that will set a theater chase pattern on our LED strip. It will take two input parameters, one for the color and one for the delay time in milliseconds between changes. 1 2 3 void theaterChase(uint32_t color, uint8_t wait) { ... put your code here... }; Here is the full program that will turn our LED strip into red, white and blue chase patterns. Perfect for the 4th of July celebrations in the US. Note that we use the strip.Color() function to set a red, green and blue value. How the program works is a bit complex. It uses note one, not two, but THREE nested for loops. The outer loop is just a wrapper that repeats 10 times. We use the letter \"j\" to count up to 10. The middle loop just counts from 0 to 2 (three items). It uses the letter \"q\" to do this. We can call this the offset. The most inner loop goes from the first to the last pixel turning each third one on. The increment is by three each time. The letter used is \"i\" for the index. The main function inside these three loops sets the q+i pixel on. The effect is to turn every third pixel on. We skip over two because we are adding 3 to the index each time. 1 strip.setPixelColor(q+i, color); After we display the strip and wait a bit then we reverse the operation by turning each third pixel off. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); int delayTime = 100; void setup() { strip.begin(); // initialize the strip } void loop() { theaterChase(strip.Color(127, 0, 0), delayTime); // red theaterChase(strip.Color(127, 127, 127), delayTime); // white theaterChase(strip.Color(0, 0, 127), delayTime); // blue } // Theatre-style crawling lights with a spacing of 3 void theaterChase(uint32_t color, uint8_t wait) { for (int j=0; j<10; j++) { //do 10 cycles of chasing for (int q=0; q < 4; q++) { for (int i=0; i < strip.numPixels(); i=i+4) { strip.setPixelColor(q+i, color); //turn every third pixel on } strip.show(); delay(wait); for (int i=0; i < strip.numPixels(); i=i+3) { strip.setPixelColor(q+i, 0); //turn every third pixel off } } } }","title":"Theater Chase"},{"location":"guide/theater-chase/#more-to-explore","text":"Can you change the spacing between the \"on\" pixels. Right now they are set to be 3. Can you change it to be 4? Note that you will have to make the change it two places in the middle and inner-most for loops. Try it out!","title":"More to explore"},{"location":"guide/wipe/","text":"The Wipe Function In this section we will learn how put a logical grouping of code together in a bundle and give it a name. We call these functions. Just like we have a setup() and loop() function that all Arduino programs have, we will next learn to write our own functions. Creating functions is one of the greatest features of programming. Once they are written we can reuse them over and over. They keep our programs smaller and easier to read. You might wonder why setup and loop have those parens after them. That is the place that you can put inputs to a function. However neither setup() or loop() have inputs. Our first function will be called wipe. It will wipe our LED strip with a new color. It will take two input parameters - things that control what happens inside the function. The first parameter will be the color expressed as a hex number. The second will be the amount of delay (in milliseconds). Here is what the function will look like: colorWipe(uint32_t color, uint8_t wait) { // our code here... }; This says that the colorWipe function has two inputs: 1. The first parameter (color), is an unsigned 32-bit integer 2. The second input is wait, which is an unsigned 8 bit integer. It is somewhat complicate to write hex numbers. So to make this easy we will use a function that takes three integers (red, green and blue) and converts them to a single hex number. This is called the strip.Color() function. Here is the full program that will turn our LED strip, red, then green, then blue. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); void setup() { strip.begin(); } void loop() { colorWipe(strip.Color(255, 0, 0), 150); // Red colorWipe(strip.Color(0, 255, 0), 150); // Green colorWipe(strip.Color(0, 0, 255), 150); // Blue } void colorWipe(uint32_t color, uint8_t wait) { for(uint16_t i=0; i<strip.numPixels(); i++) { strip.setPixelColor(i, color); strip.show(); delay(wait); } } More to explore What happens if you change the second parameter from 150 milliseconds to 50 milliseconds? What about 5 milliseconds? Can you still see the motion when the delay is very small?","title":"The Wipe Function"},{"location":"guide/wipe/#the-wipe-function","text":"In this section we will learn how put a logical grouping of code together in a bundle and give it a name. We call these functions. Just like we have a setup() and loop() function that all Arduino programs have, we will next learn to write our own functions. Creating functions is one of the greatest features of programming. Once they are written we can reuse them over and over. They keep our programs smaller and easier to read. You might wonder why setup and loop have those parens after them. That is the place that you can put inputs to a function. However neither setup() or loop() have inputs. Our first function will be called wipe. It will wipe our LED strip with a new color. It will take two input parameters - things that control what happens inside the function. The first parameter will be the color expressed as a hex number. The second will be the amount of delay (in milliseconds). Here is what the function will look like: colorWipe(uint32_t color, uint8_t wait) { // our code here... }; This says that the colorWipe function has two inputs: 1. The first parameter (color), is an unsigned 32-bit integer 2. The second input is wait, which is an unsigned 8 bit integer. It is somewhat complicate to write hex numbers. So to make this easy we will use a function that takes three integers (red, green and blue) and converts them to a single hex number. This is called the strip.Color() function. Here is the full program that will turn our LED strip, red, then green, then blue. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <Adafruit_NeoPixel.h> #define LEDPIN 12 // connect the Data from the strip to this pin on the Arduino #define NUMBER_PIEXELS 12 // the number of pixels in your LED strip Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUMBER_PIEXELS, LEDPIN, NEO_GRB + NEO_KHZ800); void setup() { strip.begin(); } void loop() { colorWipe(strip.Color(255, 0, 0), 150); // Red colorWipe(strip.Color(0, 255, 0), 150); // Green colorWipe(strip.Color(0, 0, 255), 150); // Blue } void colorWipe(uint32_t color, uint8_t wait) { for(uint16_t i=0; i<strip.numPixels(); i++) { strip.setPixelColor(i, color); strip.show(); delay(wait); } }","title":"The Wipe Function"},{"location":"guide/wipe/#more-to-explore","text":"What happens if you change the second parameter from 150 milliseconds to 50 milliseconds? What about 5 milliseconds? Can you still see the motion when the delay is very small?","title":"More to explore"},{"location":"guide/project-boxes/rgb/rgb/","text":"RGB Project Box This box has three potentiometers on it that control the intensity of the red, green and blue LEDs in a LED strip. Wriring Diagram The top and bottom connectors of each potentiometer are connected to the +5v and ground rails of the breadboard. The center tap of the first potentiomer goes to first analog input called pin A0. The center tap of the second potentiometer goes to the second analog input called the A1 pin. The center tap of the third potentiometer goes to the third analog input called the A2 pin. Code We use the Adafruit Neopixel libraries. The main loop does an analog read on each potentiomter and then converts the analog value from a scale of 0 to 1023 to a LED intensity of 0 to 255. We use the map() function to do this. We can also adjust the top and bottom maximum values so that we check that the values are within a range. This takes into account that the potentiometer may not go exactly from zero resistence to maximum resistence.","title":"RGB Project Box"},{"location":"guide/project-boxes/rgb/rgb/#rgb-project-box","text":"This box has three potentiometers on it that control the intensity of the red, green and blue LEDs in a LED strip.","title":"RGB Project Box"},{"location":"guide/project-boxes/rgb/rgb/#wriring-diagram","text":"The top and bottom connectors of each potentiometer are connected to the +5v and ground rails of the breadboard. The center tap of the first potentiomer goes to first analog input called pin A0. The center tap of the second potentiometer goes to the second analog input called the A1 pin. The center tap of the third potentiometer goes to the third analog input called the A2 pin.","title":"Wriring Diagram"},{"location":"guide/project-boxes/rgb/rgb/#code","text":"We use the Adafruit Neopixel libraries. The main loop does an analog read on each potentiomter and then converts the analog value from a scale of 0 to 1023 to a LED intensity of 0 to 255. We use the map() function to do this. We can also adjust the top and bottom maximum values so that we check that the values are within a range. This takes into account that the potentiometer may not go exactly from zero resistence to maximum resistence.","title":"Code"}]}